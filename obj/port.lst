   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 2
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"port.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.pxPortInitialiseStack,"ax",%progbits
  20              		.align	2
  21              		.global	pxPortInitialiseStack
  22              		.thumb
  23              		.thumb_func
  25              	pxPortInitialiseStack:
  26              	.LFB110:
  27              		.file 1 "FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c"
   1:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
   2:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     FreeRTOS V7.0.2 - Copyright (C) 2011 Real Time Engineers Ltd.
   3:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	Cortex M4F Port contributed by Thomas Kindler <mail_cm4@t-kindler.de>
   4:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
   5:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     ***************************************************************************
   6:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
   7:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    FreeRTOS tutorial books are available in pdf and paperback.        *
   8:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    Complete, revised, and edited pdf reference manuals are also       *
   9:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    available.                                                         *
  10:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  11:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    Purchasing FreeRTOS documentation will not only help you, by       *
  12:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    ensuring you get running as quickly as possible and with an        *
  13:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    in-depth knowledge of how to use FreeRTOS, it will also help       *
  14:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    the FreeRTOS project to continue with its mission of providing     *
  15:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    professional grade, cross platform, de facto standard solutions    *
  16:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    for microcontrollers - completely free of charge!                  *
  17:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  18:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    >>> See http://www.FreeRTOS.org/Documentation for details. <<<     *
  19:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  20:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *    Thank you for using FreeRTOS, and thank you for your support!      *
  21:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****      *                                                                       *
  22:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     ***************************************************************************
  23:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  24:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  25:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     This file is part of the FreeRTOS distribution.
  26:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  27:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  28:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     the terms of the GNU General Public License (version 2) as published by the
  29:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     Free Software Foundation AND MODIFIED BY the FreeRTOS exception.
  30:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     >>>NOTE<<< The modification to the GPL is included to allow you to
  31:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     distribute a combined work that includes FreeRTOS without being obliged to
  32:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     provide the source code for proprietary components outside of the FreeRTOS
  33:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     kernel.  FreeRTOS is distributed in the hope that it will be useful, but
  34:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
  35:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  36:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     more details. You should have received a copy of the GNU General Public
  37:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     License and the FreeRTOS license exception along with FreeRTOS; if not it
  38:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     can be viewed here: http://www.freertos.org/a00114.html and also obtained
  39:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     by writing to Richard Barry, contact details for whom are available on the
  40:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     FreeRTOS WEB site.
  41:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  42:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     1 tab == 4 spaces!
  43:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  44:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     http://www.FreeRTOS.org - Documentation, latest information, license and
  45:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     contact details.
  46:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  47:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     http://www.SafeRTOS.com - A version that is certified for use in safety
  48:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     critical systems.
  49:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  50:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     http://www.OpenRTOS.com - Commercial support, development, porting,
  51:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     licensing and training services.
  52:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** */
  53:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  54:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------
  55:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Implementation of functions defined in portable.h for the ARM CM4F port.
  56:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  *----------------------------------------------------------*/
  57:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  58:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Scheduler includes. */
  59:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #include "FreeRTOS.h"
  60:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #include "task.h"
  61:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  62:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* For backward compatibility, ensure configKERNEL_INTERRUPT_PRIORITY is
  63:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** defined.  The value should also ensure backward compatibility.
  64:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** FreeRTOS.org versions prior to V4.4.0 did not include this definition. */
  65:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #ifndef configKERNEL_INTERRUPT_PRIORITY
  66:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#define configKERNEL_INTERRUPT_PRIORITY 255
  67:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #endif
  68:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  69:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Constants required to manipulate the NVIC. */
  70:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_CTRL		( ( volatile unsigned long *) 0xe000e010 )
  71:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_LOAD		( ( volatile unsigned long *) 0xe000e014 )
  72:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_INT_CTRL			( ( volatile unsigned long *) 0xe000ed04 )
  73:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSPRI2			( ( volatile unsigned long *) 0xe000ed20 )
  74:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_CLK		0x00000004
  75:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_INT		0x00000002
  76:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_ENABLE		0x00000001
  77:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PENDSVSET			0x10000000
  78:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PENDSV_PRI			( ( ( unsigned long ) configKERNEL_INTERRUPT_PRIORITY ) << 16 )
  79:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_PRI		( ( ( unsigned long ) configKERNEL_INTERRUPT_PRIORITY ) << 24 )
  80:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  81:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Constants required to set up the initial stack. */
  82:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portINITIAL_XPSR			( 0x01000000 )
  83:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portINITIAL_EXC_RETURN		( 0xFFFFFFFD )
  84:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  85:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* The priority used by the kernel is assigned to a variable to make access
  86:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** from inline assembler easier. */
  87:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** const unsigned long ulKernelPriority = configKERNEL_INTERRUPT_PRIORITY;
  88:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  89:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Each task maintains its own interrupt status in the critical nesting
  90:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** variable. */
  91:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** static unsigned portBASE_TYPE uxCriticalNesting = 0xaaaaaaaa;
  92:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  93:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
  94:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Setup the timer to generate the tick interrupts.
  95:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
  96:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** static void prvSetupTimerInterrupt( void );
  97:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  98:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
  99:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Exception handlers.
 100:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 101:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void xPortPendSVHandler( void ) __attribute__ (( naked ));
 102:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void xPortSysTickHandler( void );
 103:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortSVCHandler( void ) __attribute__ (( naked ));
 104:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 105:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 106:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 107:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 108:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortStartFirstTask( void ) __attribute__ (( naked ));
 109:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 110:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 111:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 112:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 113:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * See header file for description.
 114:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 115:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvPa
 116:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
  28              		.loc 1 116 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  34 0000 70B4     		push	{r4, r5, r6}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 12
  37              		.cfi_offset 4, -12
  38              		.cfi_offset 5, -8
  39              		.cfi_offset 6, -4
  40              		.loc 1 116 0
  41 0002 0346     		mov	r3, r0
  42              	.LVL1:
 117:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 118:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	interrupt. */
 119:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of int
 120:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  43              		.loc 1 120 0
  44 0004 4FF08076 		mov	r6, #16777216
 121:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
 122:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
 123:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
 124:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = 0;	/* LR */
  45              		.loc 1 124 0
  46 0008 0025     		movs	r5, #0
 125:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 126:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
 127:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack -= 9;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 128:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = ( portSTACK_TYPE ) portINITIAL_EXC_RETURN;
  47              		.loc 1 128 0
  48 000a 6FF00204 		mvn	r4, #2
 120:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
  49              		.loc 1 120 0
  50 000e 43F8046C 		str	r6, [r3, #-4]
  51              	.LVL2:
 124:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
  52              		.loc 1 124 0
  53 0012 43F80C5C 		str	r5, [r3, #-12]
  54              	.LVL3:
 122:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
  55              		.loc 1 122 0
  56 0016 43F8081C 		str	r1, [r3, #-8]
 126:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack -= 9;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
  57              		.loc 1 126 0
  58 001a 43F8202C 		str	r2, [r3, #-32]
  59              		.loc 1 128 0
  60 001e 40F8444D 		str	r4, [r0, #-68]!
  61              	.LVL4:
 129:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	return pxTopOfStack;
 130:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
  62              		.loc 1 130 0
  63 0022 70BC     		pop	{r4, r5, r6}
  64              	.LCFI1:
  65              		.cfi_restore 6
  66              		.cfi_restore 5
  67              		.cfi_restore 4
  68              		.cfi_def_cfa_offset 0
  69 0024 7047     		bx	lr
  70              		.cfi_endproc
  71              	.LFE110:
  73 0026 00BF     		.section	.text.SVC_Handler,"ax",%progbits
  74              		.align	2
  75              		.global	SVC_Handler
  76              		.thumb
  77              		.thumb_func
  79              	SVC_Handler:
  80              	.LFB111:
 131:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 132:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 133:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortSVCHandler( void )
 134:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
  81              		.loc 1 134 0
  82              		.cfi_startproc
  83              		@ Naked Function: prologue and epilogue provided by programmer.
  84              		@ args = 0, pretend = 0, frame = 0
  85              		@ frame_needed = 0, uses_anonymous_args = 0
 135:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile (
  86              		.loc 1 135 0
  87              	@ 135 "FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
  88 0000 064B     			ldr	r3, pxCurrentTCBConst2		
  89 0002 1968     		ldr r1, [r3]					
  90 0004 0868     		ldr r0, [r1]					
  91 0006 50F804EB 		ldmia r0!, {r14}				
  92 000a B0E8F00F 		ldmia r0!, {r4-r11}				
  93 000e 80F30988 		msr psp, r0						
  94 0012 4FF00000 		mov r0, #0 						
  95 0016 80F31188 		msr	basepri, r0					
  96 001a 7047     		bx r14							
  97              										
  98              		.align 2						
  99 001c 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB				
 100              	
 101              	@ 0 "" 2
 136:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 137:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldr r1, [r3]					\n" /* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 138:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldr r0, [r1]					\n" /* The first item in pxCurrentTCB is the task top of stack. */
 139:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldmia r0!, {r14}				\n" /* Pop the EXC_RETURN value */
 140:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldmia r0!, {r4-r11}				\n" /* Pop the registers that are not automatically saved on exceptio
 141:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	msr psp, r0						\n" /* Restore the task stack pointer. */
 142:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	mov r0, #0 						\n"
 143:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	msr	basepri, r0					\n"
 144:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	bx r14							\n"
 145:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"									\n"
 146:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	.align 2						\n"
 147:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
 148:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				);
 149:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 102              		.loc 1 149 0
 103              		.thumb
 104              		.cfi_endproc
 105              	.LFE111:
 107              		.section	.text.vPortStartFirstTask,"ax",%progbits
 108              		.align	2
 109              		.global	vPortStartFirstTask
 110              		.thumb
 111              		.thumb_func
 113              	vPortStartFirstTask:
 114              	.LFB112:
 150:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 151:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 152:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortStartFirstTask( void )
 153:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 115              		.loc 1 153 0
 116              		.cfi_startproc
 117              		@ Naked Function: prologue and epilogue provided by programmer.
 118              		@ args = 0, pretend = 0, frame = 0
 119              		@ frame_needed = 0, uses_anonymous_args = 0
 154:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile(
 120              		.loc 1 154 0
 121              	@ 154 "FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 122 0000 0348     		 ldr r0, =0xE000ED08 	
 123 0002 0068     	 ldr r0, [r0] 			
 124 0004 0068     	 ldr r0, [r0] 			
 125 0006 80F30888 	 msr msp, r0			
 126 000a 62B6     	 cpsie i				
 127 000c 00DF     	 svc 0					
 128 000e 00BF     	 nop					
 129              	
 130              	@ 0 "" 2
 155:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
 156:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" ldr r0, [r0] 			\n"
 157:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" ldr r0, [r0] 			\n"
 158:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
 159:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" cpsie i				\n" /* Globally enable interrupts. */
 160:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" svc 0					\n" /* System call to start first task. */
 161:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" nop					\n"
 162:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				);
 163:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 131              		.loc 1 163 0
 132              		.thumb
 133              		.cfi_endproc
 134              	.LFE112:
 136              		.section	.text.xPortStartScheduler,"ax",%progbits
 137              		.align	2
 138              		.global	xPortStartScheduler
 139              		.thumb
 140              		.thumb_func
 142              	xPortStartScheduler:
 143              	.LFB113:
 164:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 165:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 166:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 167:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * See header file for description.
 168:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 169:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** portBASE_TYPE xPortStartScheduler( void )
 170:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 144              		.loc 1 170 0
 145              		.cfi_startproc
 146              		@ args = 0, pretend = 0, frame = 0
 147              		@ frame_needed = 0, uses_anonymous_args = 0
 171:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
 172:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 148              		.loc 1 172 0
 149 0000 0E4A     		ldr	r2, .L7
 150              	.LBB4:
 151              	.LBB5:
 173:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 174:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 175:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Start the timer that generates the tick ISR.  Interrupts are disabled
 176:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	here already. */
 177:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	prvSetupTimerInterrupt();
 178:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 179:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Initialise the critical nesting count ready for the first task. */
 180:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting = 0;
 181:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 182:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Start the first task. */
 183:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	vPortStartFirstTask();
 184:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 185:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Should not get here! */
 186:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	return 0;
 187:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 188:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 189:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 190:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortEndScheduler( void )
 191:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 192:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* It is unlikely that the CM4F port will require this function as there
 193:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	is nothing to return to.  */
 194:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 195:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 196:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 197:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortYieldFromISR( void )
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 199:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Set a PendSV to request a context switch. */
 200:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 201:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 202:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 203:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 204:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortEnterCritical( void )
 205:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 206:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portDISABLE_INTERRUPTS();
 207:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting++;
 208:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 209:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 210:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 211:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortExitCritical( void )
 212:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 213:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting--;
 214:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	if( uxCriticalNesting == 0 )
 215:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 216:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		portENABLE_INTERRUPTS();
 217:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 218:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 219:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 220:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 221:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void xPortPendSVHandler( void )
 222:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 223:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* This is a naked function. */
 224:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 225:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile
 226:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	(
 227:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	mrs r0, psp							\n"
 228:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 229:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr	r3, pxCurrentTCBConst			\n" /* Get the location of the current TCB. */
 230:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr	r2, [r3]						\n"
 231:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 232:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	stmdb r0!, {r4-r11}					\n" /* Save the remaining registers. */
 233:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	tst r14, #0x10						\n"	/* Check for extended frame.. */
 234:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	it eq								\n"
 235:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	vstmdbeq r0!, {s16-s31}				\n"	/* Save the high FPU registers (will also trigger a lazy-save) */
 236:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	stmdb r0!, {r14}					\n"	/* Save the EXC_RETURN value */
 237:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	str r0, [r2]						\n" /* Save the new top of stack into the first member of the TCB. */
 238:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 239:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	stmdb sp!, {r3, r14}				\n"
 240:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	mov r0, %0							\n"
 241:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	msr basepri, r0						\n"
 242:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	bl vTaskSwitchContext				\n"
 243:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	mov r0, #0							\n"
 244:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	msr basepri, r0						\n"
 245:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldmia sp!, {r3, r14}				\n"
 246:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"	/* Restore the context, including the critical nesting count. */
 247:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr r1, [r3]						\n"
 248:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr r0, [r1]						\n" /* The first item in pxCurrentTCB is the task top of stack. */
 249:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldmia r0!, {r14}					\n"	/* Pop the EXC_RETURN value */
 250:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	tst r14, #0x10						\n"	/* Check for extended frame.. */
 251:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	it eq								\n"
 252:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	vldmiaeq r0!, {s16-s31}				\n"	/* Pop the high FPU registers.*/
 253:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldmia r0!, {r4-r11}					\n" /* Pop the registers. */
 254:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	msr psp, r0							\n"
 255:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	bx r14								\n"
 256:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 257:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	.align 2							\n"
 258:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
 259:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
 260:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	);
 261:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 262:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 263:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 264:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void xPortSysTickHandler( void )
 265:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 266:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     unsigned long ulDummy;
 267:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 268:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* If using preemption, also force a context switch. */
 269:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/*#if configUSE_PREEMPTION == 1
 270:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 271:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#endif*/
 272:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 273:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
 274:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 275:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		//vTaskIncrementTick();
 276:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		
 277:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		if( xTaskIncrementTick() != pdFALSE )
 278:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		{
 279:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 280:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		}
 281:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		
 282:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 283:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
 284:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 285:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 286:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 287:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 288:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 289:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * frequency.
 290:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 291:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void prvSetupTimerInterrupt( void )
 292:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 293:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Configure SysTick to interrupt at the requested rate. */
 294:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 152              		.loc 1 294 0
 153 0002 0F4B     		ldr	r3, .L7+4
 154              	.LBE5:
 155              	.LBE4:
 172:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 156              		.loc 1 172 0
 157 0004 1168     		ldr	r1, [r2]
 180:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 158              		.loc 1 180 0
 159 0006 0F48     		ldr	r0, .L7+8
 172:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 160              		.loc 1 172 0
 161 0008 41F47F01 		orr	r1, r1, #16711680
 170:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
 162              		.loc 1 170 0
 163 000c 70B5     		push	{r4, r5, r6, lr}
 164              	.LCFI2:
 165              		.cfi_def_cfa_offset 16
 166              		.cfi_offset 4, -16
 167              		.cfi_offset 5, -12
 168              		.cfi_offset 6, -8
 169              		.cfi_offset 14, -4
 172:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 170              		.loc 1 172 0
 171 000e 1160     		str	r1, [r2]
 173:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 172              		.loc 1 173 0
 173 0010 1168     		ldr	r1, [r2]
 174              	.LBB9:
 175              	.LBB6:
 176              		.loc 1 294 0
 177 0012 0D4E     		ldr	r6, .L7+12
 178 0014 0D4C     		ldr	r4, .L7+16
 295:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 179              		.loc 1 295 0
 180 0016 0E4D     		ldr	r5, .L7+20
 181              	.LBE6:
 182              	.LBE9:
 173:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 183              		.loc 1 173 0
 184 0018 41F07F41 		orr	r1, r1, #-16777216
 185 001c 1160     		str	r1, [r2]
 186              	.LBB10:
 187              	.LBB7:
 294:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 188              		.loc 1 294 0
 189 001e 1B68     		ldr	r3, [r3]
 190 0020 A6FB0323 		umull	r2, r3, r6, r3
 191 0024 9B09     		lsrs	r3, r3, #6
 192 0026 013B     		subs	r3, r3, #1
 193              		.loc 1 295 0
 194 0028 0722     		movs	r2, #7
 294:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 195              		.loc 1 294 0
 196 002a 2360     		str	r3, [r4]
 197              	.LBE7:
 198              	.LBE10:
 180:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 199              		.loc 1 180 0
 200 002c 0024     		movs	r4, #0
 201              	.LBB11:
 202              	.LBB8:
 203              		.loc 1 295 0
 204 002e 2A60     		str	r2, [r5]
 205              	.LBE8:
 206              	.LBE11:
 180:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 207              		.loc 1 180 0
 208 0030 0460     		str	r4, [r0]
 183:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 209              		.loc 1 183 0
 210 0032 FFF7FEFF 		bl	vPortStartFirstTask
 211              	.LVL5:
 187:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 212              		.loc 1 187 0
 213 0036 2046     		mov	r0, r4
 214 0038 70BD     		pop	{r4, r5, r6, pc}
 215              	.L8:
 216 003a 00BF     		.align	2
 217              	.L7:
 218 003c 20ED00E0 		.word	-536810208
 219 0040 00000000 		.word	SystemCoreClock
 220 0044 00000000 		.word	.LANCHOR0
 221 0048 D34D6210 		.word	274877907
 222 004c 14E000E0 		.word	-536813548
 223 0050 10E000E0 		.word	-536813552
 224              		.cfi_endproc
 225              	.LFE113:
 227              		.section	.text.vPortEndScheduler,"ax",%progbits
 228              		.align	2
 229              		.global	vPortEndScheduler
 230              		.thumb
 231              		.thumb_func
 233              	vPortEndScheduler:
 234              	.LFB114:
 191:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* It is unlikely that the CM4F port will require this function as there
 235              		.loc 1 191 0
 236              		.cfi_startproc
 237              		@ args = 0, pretend = 0, frame = 0
 238              		@ frame_needed = 0, uses_anonymous_args = 0
 239              		@ link register save eliminated.
 240 0000 7047     		bx	lr
 241              		.cfi_endproc
 242              	.LFE114:
 244 0002 00BF     		.section	.text.vPortYieldFromISR,"ax",%progbits
 245              		.align	2
 246              		.global	vPortYieldFromISR
 247              		.thumb
 248              		.thumb_func
 250              	vPortYieldFromISR:
 251              	.LFB115:
 198:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Set a PendSV to request a context switch. */
 252              		.loc 1 198 0
 253              		.cfi_startproc
 254              		@ args = 0, pretend = 0, frame = 0
 255              		@ frame_needed = 0, uses_anonymous_args = 0
 256              		@ link register save eliminated.
 200:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 257              		.loc 1 200 0
 258 0000 024B     		ldr	r3, .L11
 259 0002 4FF08052 		mov	r2, #268435456
 260 0006 1A60     		str	r2, [r3]
 261 0008 7047     		bx	lr
 262              	.L12:
 263 000a 00BF     		.align	2
 264              	.L11:
 265 000c 04ED00E0 		.word	-536810236
 266              		.cfi_endproc
 267              	.LFE115:
 269              		.section	.text.vPortEnterCritical,"ax",%progbits
 270              		.align	2
 271              		.global	vPortEnterCritical
 272              		.thumb
 273              		.thumb_func
 275              	vPortEnterCritical:
 276              	.LFB116:
 205:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portDISABLE_INTERRUPTS();
 277              		.loc 1 205 0
 278              		.cfi_startproc
 279              		@ args = 0, pretend = 0, frame = 0
 280              		@ frame_needed = 0, uses_anonymous_args = 0
 281              		@ link register save eliminated.
 206:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting++;
 282              		.loc 1 206 0
 283              	@ 206 "FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 284 0000 4FF0BF00 			mov r0, #191								
 285 0004 80F31188 		msr basepri, r0							
 286              	
 287              	@ 0 "" 2
 207:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 288              		.loc 1 207 0
 289              		.thumb
 290 0008 024A     		ldr	r2, .L14
 291 000a 1368     		ldr	r3, [r2]
 292 000c 0133     		adds	r3, r3, #1
 293 000e 1360     		str	r3, [r2]
 294 0010 7047     		bx	lr
 295              	.L15:
 296 0012 00BF     		.align	2
 297              	.L14:
 298 0014 00000000 		.word	.LANCHOR0
 299              		.cfi_endproc
 300              	.LFE116:
 302              		.section	.text.vPortExitCritical,"ax",%progbits
 303              		.align	2
 304              		.global	vPortExitCritical
 305              		.thumb
 306              		.thumb_func
 308              	vPortExitCritical:
 309              	.LFB117:
 212:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting--;
 310              		.loc 1 212 0
 311              		.cfi_startproc
 312              		@ args = 0, pretend = 0, frame = 0
 313              		@ frame_needed = 0, uses_anonymous_args = 0
 314              		@ link register save eliminated.
 213:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	if( uxCriticalNesting == 0 )
 315              		.loc 1 213 0
 316 0000 044A     		ldr	r2, .L19
 317 0002 1368     		ldr	r3, [r2]
 318 0004 013B     		subs	r3, r3, #1
 319 0006 1360     		str	r3, [r2]
 214:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 320              		.loc 1 214 0
 321 0008 1BB9     		cbnz	r3, .L16
 216:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 322              		.loc 1 216 0
 323              	@ 216 "FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 324 000a 4FF00000 			mov r0, #0					
 325 000e 80F31188 		msr basepri, r0				
 326              	
 327              	@ 0 "" 2
 328              		.thumb
 329              	.L16:
 330 0012 7047     		bx	lr
 331              	.L20:
 332              		.align	2
 333              	.L19:
 334 0014 00000000 		.word	.LANCHOR0
 335              		.cfi_endproc
 336              	.LFE117:
 338              		.section	.text.PendSV_Handler,"ax",%progbits
 339              		.align	2
 340              		.global	PendSV_Handler
 341              		.thumb
 342              		.thumb_func
 344              	PendSV_Handler:
 345              	.LFB118:
 222:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* This is a naked function. */
 346              		.loc 1 222 0
 347              		.cfi_startproc
 348              		@ Naked Function: prologue and epilogue provided by programmer.
 349              		@ args = 0, pretend = 0, frame = 0
 350              		@ frame_needed = 0, uses_anonymous_args = 0
 225:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	(
 351              		.loc 1 225 0
 352              	@ 225 "FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 353 0000 EFF30980 			mrs r0, psp							
 354              											
 355 0004 134B     		ldr	r3, pxCurrentTCBConst			
 356 0006 1A68     		ldr	r2, [r3]						
 357              											
 358 0008 20E9F00F 		stmdb r0!, {r4-r11}					
 359 000c 1EF0100F 		tst r14, #0x10						
 360 0010 08BF     		it eq								
 361 0012 20ED108A 		vstmdbeq r0!, {s16-s31}				
 362 0016 40F804ED 		stmdb r0!, {r14}					
 363 001a 1060     		str r0, [r2]						
 364              											
 365 001c 2DE90840 		stmdb sp!, {r3, r14}				
 366 0020 4FF0BF00 		mov r0, #191							
 367 0024 80F31188 		msr basepri, r0						
 368 0028 FFF7FEFF 		bl vTaskSwitchContext				
 369 002c 4FF00000 		mov r0, #0							
 370 0030 80F31188 		msr basepri, r0						
 371 0034 BDE80840 		ldmia sp!, {r3, r14}				
 372              											
 373 0038 1968     		ldr r1, [r3]						
 374 003a 0868     		ldr r0, [r1]						
 375 003c 50F804EB 		ldmia r0!, {r14}					
 376 0040 1EF0100F 		tst r14, #0x10						
 377 0044 08BF     		it eq								
 378 0046 B0EC108A 		vldmiaeq r0!, {s16-s31}				
 379 004a B0E8F00F 		ldmia r0!, {r4-r11}					
 380 004e 80F30988 		msr psp, r0							
 381 0052 7047     		bx r14								
 382              											
 383              		.align 2							
 384 0054 00000000 	pxCurrentTCBConst: .word pxCurrentTCB	
 385              	
 386              	@ 0 "" 2
 261:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 387              		.loc 1 261 0
 388              		.thumb
 389              		.cfi_endproc
 390              	.LFE118:
 392              		.section	.text.SysTick_Handler,"ax",%progbits
 393              		.align	2
 394              		.global	SysTick_Handler
 395              		.thumb
 396              		.thumb_func
 398              	SysTick_Handler:
 399              	.LFB119:
 265:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****     unsigned long ulDummy;
 400              		.loc 1 265 0
 401              		.cfi_startproc
 402              		@ args = 0, pretend = 0, frame = 0
 403              		@ frame_needed = 0, uses_anonymous_args = 0
 404              	.LVL6:
 405 0000 08B5     		push	{r3, lr}
 406              	.LCFI3:
 407              		.cfi_def_cfa_offset 8
 408              		.cfi_offset 3, -8
 409              		.cfi_offset 14, -4
 273:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 410              		.loc 1 273 0
 411              	@ 273 "FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 412 0002 4FF0BF00 			mov r0, #191								
 413 0006 80F31188 		msr basepri, r0							
 414              	
 415              	@ 0 "" 2
 277:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		{
 416              		.loc 1 277 0
 417              		.thumb
 418 000a FFF7FEFF 		bl	xTaskIncrementTick
 419              	.LVL7:
 420 000e 18B1     		cbz	r0, .L23
 279:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		}
 421              		.loc 1 279 0
 422 0010 044B     		ldr	r3, .L28
 423 0012 4FF08052 		mov	r2, #268435456
 424 0016 1A60     		str	r2, [r3]
 425              	.L23:
 283:FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 426              		.loc 1 283 0
 427              	@ 283 "FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 428 0018 4FF00000 			mov r0, #0					
 429 001c 80F31188 		msr basepri, r0				
 430              	
 431              	@ 0 "" 2
 432              		.thumb
 433 0020 08BD     		pop	{r3, pc}
 434              	.L29:
 435 0022 00BF     		.align	2
 436              	.L28:
 437 0024 04ED00E0 		.word	-536810236
 438              		.cfi_endproc
 439              	.LFE119:
 441              		.global	ulKernelPriority
 442              		.section	.rodata.ulKernelPriority,"a",%progbits
 443              		.align	2
 446              	ulKernelPriority:
 447 0000 FF000000 		.word	255
 448              		.section	.data.uxCriticalNesting,"aw",%progbits
 449              		.align	2
 450              		.set	.LANCHOR0,. + 0
 453              	uxCriticalNesting:
 454 0000 AAAAAAAA 		.word	-1431655766
 455              		.text
 456              	.Letext0:
 457              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\4.9 2014q4\\arm-none-eabi\\include\\mach
 458              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\4.9 2014q4\\arm-none-eabi\\include\\stdi
 459              		.file 4 "FreeRTOS/Source/include/projdefs.h"
 460              		.file 5 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 461              		.file 6 "libs/CMSIS/Include/core_cm4.h"
 462              		.file 7 "libs/Device/STM32F4xx/Include/system_stm32f4xx.h"
 463              		.file 8 "FreeRTOS/Source/include/task.h"
DEFINED SYMBOLS
                            *ABS*:00000000 port.c
C:\Users\Student\AppData\Local\Temp\ccTnJIUR.s:20     .text.pxPortInitialiseStack:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccTnJIUR.s:25     .text.pxPortInitialiseStack:00000000 pxPortInitialiseStack
C:\Users\Student\AppData\Local\Temp\ccTnJIUR.s:74     .text.SVC_Handler:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccTnJIUR.s:79     .text.SVC_Handler:00000000 SVC_Handler
C:\Users\Student\AppData\Local\Temp\ccTnJIUR.s:99     .text.SVC_Handler:0000001c pxCurrentTCBConst2
C:\Users\Student\AppData\Local\Temp\ccTnJIUR.s:99     .text.SVC_Handler:0000001c $d
C:\Users\Student\AppData\Local\Temp\ccTnJIUR.s:108    .text.vPortStartFirstTask:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccTnJIUR.s:113    .text.vPortStartFirstTask:00000000 vPortStartFirstTask
C:\Users\Student\AppData\Local\Temp\ccTnJIUR.s:137    .text.xPortStartScheduler:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccTnJIUR.s:142    .text.xPortStartScheduler:00000000 xPortStartScheduler
C:\Users\Student\AppData\Local\Temp\ccTnJIUR.s:218    .text.xPortStartScheduler:0000003c $d
C:\Users\Student\AppData\Local\Temp\ccTnJIUR.s:228    .text.vPortEndScheduler:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccTnJIUR.s:233    .text.vPortEndScheduler:00000000 vPortEndScheduler
C:\Users\Student\AppData\Local\Temp\ccTnJIUR.s:245    .text.vPortYieldFromISR:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccTnJIUR.s:250    .text.vPortYieldFromISR:00000000 vPortYieldFromISR
C:\Users\Student\AppData\Local\Temp\ccTnJIUR.s:265    .text.vPortYieldFromISR:0000000c $d
C:\Users\Student\AppData\Local\Temp\ccTnJIUR.s:270    .text.vPortEnterCritical:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccTnJIUR.s:275    .text.vPortEnterCritical:00000000 vPortEnterCritical
C:\Users\Student\AppData\Local\Temp\ccTnJIUR.s:298    .text.vPortEnterCritical:00000014 $d
C:\Users\Student\AppData\Local\Temp\ccTnJIUR.s:303    .text.vPortExitCritical:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccTnJIUR.s:308    .text.vPortExitCritical:00000000 vPortExitCritical
C:\Users\Student\AppData\Local\Temp\ccTnJIUR.s:334    .text.vPortExitCritical:00000014 $d
C:\Users\Student\AppData\Local\Temp\ccTnJIUR.s:339    .text.PendSV_Handler:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccTnJIUR.s:344    .text.PendSV_Handler:00000000 PendSV_Handler
C:\Users\Student\AppData\Local\Temp\ccTnJIUR.s:384    .text.PendSV_Handler:00000054 pxCurrentTCBConst
C:\Users\Student\AppData\Local\Temp\ccTnJIUR.s:384    .text.PendSV_Handler:00000054 $d
C:\Users\Student\AppData\Local\Temp\ccTnJIUR.s:393    .text.SysTick_Handler:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccTnJIUR.s:398    .text.SysTick_Handler:00000000 SysTick_Handler
C:\Users\Student\AppData\Local\Temp\ccTnJIUR.s:437    .text.SysTick_Handler:00000024 $d
C:\Users\Student\AppData\Local\Temp\ccTnJIUR.s:446    .rodata.ulKernelPriority:00000000 ulKernelPriority
C:\Users\Student\AppData\Local\Temp\ccTnJIUR.s:443    .rodata.ulKernelPriority:00000000 $d
C:\Users\Student\AppData\Local\Temp\ccTnJIUR.s:449    .data.uxCriticalNesting:00000000 $d
C:\Users\Student\AppData\Local\Temp\ccTnJIUR.s:453    .data.uxCriticalNesting:00000000 uxCriticalNesting
C:\Users\Student\AppData\Local\Temp\ccTnJIUR.s:136    .text.vPortStartFirstTask:00000010 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
pxCurrentTCB
SystemCoreClock
vTaskSwitchContext
xTaskIncrementTick
