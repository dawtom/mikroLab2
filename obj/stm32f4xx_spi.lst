   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 2
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"stm32f4xx_spi.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.SPI_I2S_DeInit,"ax",%progbits
  20              		.align	2
  21              		.global	SPI_I2S_DeInit
  22              		.thumb
  23              		.thumb_func
  25              	SPI_I2S_DeInit:
  26              	.LFB110:
  27              		.file 1 "libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c"
   1:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
   2:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ******************************************************************************
   3:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @file    stm32f4xx_spi.c
   4:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @author  MCD Application Team
   5:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @version V1.3.0
   6:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @date    08-November-2013
   7:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief   This file provides firmware functions to manage the following 
   8:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          functionalities of the Serial peripheral interface (SPI):
   9:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           + Initialization and Configuration
  10:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           + Data transfers functions
  11:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           + Hardware CRC Calculation
  12:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           + DMA transfers management
  13:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           + Interrupts and flags management 
  14:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           
  15:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @verbatim
  16:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
  17:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===================================================================
  18:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   ##### How to use this driver #####
  19:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===================================================================
  20:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  [..]
  21:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    (#) Enable peripheral clock using the following functions 
  22:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE) for SPI1
  23:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE) for SPI2
  24:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE) for SPI3
  25:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE) for SPI4
  26:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE) for SPI5
  27:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE) for SPI6.
  28:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
  29:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    (#) Enable SCK, MOSI, MISO and NSS GPIO clocks using RCC_AHB1PeriphClockCmd()
  30:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        function. In I2S mode, if an external clock source is used then the I2S 
  31:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        CKIN pin GPIO clock should also be enabled.
  32:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
  33:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    (#) Peripherals alternate function: 
  34:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        (++) Connect the pin to the desired peripherals' Alternate Function (AF) 
  35:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****             using GPIO_PinAFConfig() function
  36:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        (++) Configure the desired pin in alternate function by: 
  37:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****             GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  38:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        (++) Select the type, pull-up/pull-down and output speed via GPIO_PuPd, 
  39:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****             GPIO_OType and GPIO_Speed members
  40:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        (++) Call GPIO_Init() function In I2S mode, if an external clock source is 
  41:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****             used then the I2S CKIN pin should be also configured in Alternate 
  42:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****             function Push-pull pull-up mode. 
  43:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****           
  44:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    (#) Program the Polarity, Phase, First Data, Baud Rate Prescaler, Slave 
  45:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        Management, Peripheral Mode and CRC Polynomial values using the SPI_Init()
  46:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        function.
  47:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        In I2S mode, program the Mode, Standard, Data Format, MCLK Output, Audio 
  48:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        frequency and Polarity using I2S_Init() function. For I2S mode, make sure 
  49:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        that either:
  50:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        (++) I2S PLL is configured using the functions 
  51:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****             RCC_I2SCLKConfig(RCC_I2S2CLKSource_PLLI2S), RCC_PLLI2SCmd(ENABLE) and 
  52:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****             RCC_GetFlagStatus(RCC_FLAG_PLLI2SRDY); or 
  53:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        (++) External clock source is configured using the function 
  54:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****             RCC_I2SCLKConfig(RCC_I2S2CLKSource_Ext) and after setting correctly 
  55:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****             the define constant I2S_EXTERNAL_CLOCK_VAL in the stm32f4xx_conf.h file. 
  56:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
  57:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    (#) Enable the NVIC and the corresponding interrupt using the function 
  58:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        SPI_ITConfig() if you need to use interrupt mode. 
  59:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
  60:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    (#) When using the DMA mode 
  61:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        (++) Configure the DMA using DMA_Init() function
  62:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        (++) Active the needed channel Request using SPI_I2S_DMACmd() function
  63:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    
  64:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    (#) Enable the SPI using the SPI_Cmd() function or enable the I2S using
  65:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        I2S_Cmd().
  66:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    
  67:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    (#) Enable the DMA using the DMA_Cmd() function when using DMA mode. 
  68:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
  69:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    (#) Optionally, you can enable/configure the following parameters without
  70:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        re-initialization (i.e there is no need to call again SPI_Init() function):
  71:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        (++) When bidirectional mode (SPI_Direction_1Line_Rx or SPI_Direction_1Line_Tx)
  72:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****             is programmed as Data direction parameter using the SPI_Init() function
  73:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****             it can be possible to switch between SPI_Direction_Tx or SPI_Direction_Rx
  74:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****             using the SPI_BiDirectionalLineConfig() function.
  75:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        (++) When SPI_NSS_Soft is selected as Slave Select Management parameter 
  76:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****             using the SPI_Init() function it can be possible to manage the 
  77:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****             NSS internal signal using the SPI_NSSInternalSoftwareConfig() function.
  78:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        (++) Reconfigure the data size using the SPI_DataSizeConfig() function  
  79:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        (++) Enable or disable the SS output using the SPI_SSOutputCmd() function  
  80:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****             
  81:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     (#) To use the CRC Hardware calculation feature refer to the Peripheral 
  82:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         CRC hardware Calculation subsection.
  83:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      
  84:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
  85:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  [..] It is possible to use SPI in I2S full duplex mode, in this case, each SPI 
  86:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       peripheral is able to manage sending and receiving data simultaneously
  87:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       using two data lines. Each SPI peripheral has an extended block called I2Sxext
  88:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       (ie. I2S2ext for SPI2 and I2S3ext for SPI3).
  89:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       The extension block is not a full SPI IP, it is used only as I2S slave to
  90:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       implement full duplex mode. The extension block uses the same clock sources
  91:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       as its master.          
  92:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       To configure I2S full duplex you have to:
  93:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****               
  94:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       (#) Configure SPIx in I2S mode (I2S_Init() function) as described above. 
  95:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****              
  96:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       (#) Call the I2S_FullDuplexConfig() function using the same strucutre passed to  
  97:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****           I2S_Init() function.
  98:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****               
  99:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       (#) Call I2S_Cmd() for SPIx then for its extended block.
 100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****             
 101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       (#) To configure interrupts or DMA requests and to get/clear flag status, 
 102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****           use I2Sxext instance for the extension block.
 103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                
 104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  [..] Functions that can be called with I2Sxext instances are: I2S_Cmd(), 
 105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       I2S_FullDuplexConfig(), SPI_I2S_ReceiveData(), SPI_I2S_SendData(), 
 106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       SPI_I2S_DMACmd(), SPI_I2S_ITConfig(), SPI_I2S_GetFlagStatus(), 
 107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       SPI_I2S_ClearFlag(), SPI_I2S_GetITStatus() and SPI_I2S_ClearITPendingBit().
 108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                    
 109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       Example: To use SPI3 in Full duplex mode (SPI3 is Master Tx, I2S3ext is Slave Rx):
 110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****               
 111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI3, ENABLE);   
 112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       I2S_StructInit(&I2SInitStruct);
 113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       I2SInitStruct.Mode = I2S_Mode_MasterTx;     
 114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       I2S_Init(SPI3, &I2SInitStruct);
 115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       I2S_FullDuplexConfig(SPI3ext, &I2SInitStruct)
 116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       I2S_Cmd(SPI3, ENABLE);
 117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       I2S_Cmd(SPI3ext, ENABLE);
 118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       ...
 119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       while (SPI_I2S_GetFlagStatus(SPI2, SPI_FLAG_TXE) == RESET)
 120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       {}
 121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       SPI_I2S_SendData(SPI3, txdata[i]);
 122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       ...  
 123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       while (SPI_I2S_GetFlagStatus(I2S3ext, SPI_FLAG_RXNE) == RESET)
 124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       {}
 125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       rxdata[i] = SPI_I2S_ReceiveData(I2S3ext);
 126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       ...          
 127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                 
 128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  [..]       
 129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    (@) In I2S mode: if an external clock is used as source clock for the I2S,  
 130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        then the define I2S_EXTERNAL_CLOCK_VAL in file stm32f4xx_conf.h should 
 131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        be enabled and set to the value of the source clock frequency (in Hz).
 132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    
 133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    (@) In SPI mode: To use the SPI TI mode, call the function SPI_TIModeCmd() 
 134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        just after calling the function SPI_Init().
 135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @endverbatim  
 137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *                                  
 138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ******************************************************************************
 139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @attention
 140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
 141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
 142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
 143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
 144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * You may not use this file except in compliance with the License.
 145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * You may obtain a copy of the License at:
 146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
 147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
 148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
 149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * Unless required by applicable law or agreed to in writing, software 
 150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
 151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * See the License for the specific language governing permissions and
 153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * limitations under the License.
 154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
 155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ******************************************************************************  
 156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */ 
 157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Includes ------------------------------------------------------------------*/
 159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #include "stm32f4xx_spi.h"
 160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #include "stm32f4xx_rcc.h"
 161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI 
 167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief SPI driver modules
 168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */ 
 170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private typedef -----------------------------------------------------------*/
 172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private define ------------------------------------------------------------*/
 173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* SPI registers Masks */
 175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define CR1_CLEAR_MASK            ((uint16_t)0x3040)
 176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define I2SCFGR_CLEAR_MASK        ((uint16_t)0xF040)
 177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* RCC PLLs masks */
 179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define PLLCFGR_PPLR_MASK         ((uint32_t)0x70000000)
 180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define PLLCFGR_PPLN_MASK         ((uint32_t)0x00007FC0)
 181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define SPI_CR2_FRF               ((uint16_t)0x0010)
 183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #define SPI_SR_TIFRFE             ((uint16_t)0x0100)
 184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private macro -------------------------------------------------------------*/
 186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private variables ---------------------------------------------------------*/
 187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private function prototypes -----------------------------------------------*/
 188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /* Private functions ---------------------------------------------------------*/
 189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Private_Functions
 191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group1 Initialization and Configuration functions
 195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *  @brief   Initialization and Configuration functions 
 196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *
 197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @verbatim   
 198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================
 199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****              ##### Initialization and Configuration functions ##### 
 200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================  
 201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  [..] This section provides a set of functions allowing to initialize the SPI 
 202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       Direction, SPI Mode, SPI Data Size, SPI Polarity, SPI Phase, SPI NSS 
 203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       Management, SPI Baud Rate Prescaler, SPI First Bit and SPI CRC Polynomial.
 204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  [..] The SPI_Init() function follows the SPI configuration procedures for Master 
 206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       mode and Slave mode (details for these procedures are available in reference 
 207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       manual (RM0090)).
 208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @endverbatim
 210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  De-initialize the SPIx peripheral registers to their default reset values.
 215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
 216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode.   
 217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         
 218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   The extended I2S blocks (ie. I2S2ext and I2S3ext blocks) are de-initialized
 219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         when the relative I2S peripheral is de-initialized (the extended block's clock
 220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         is managed by the I2S peripheral clock).
 221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *             
 222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
 225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
  28              		.loc 1 225 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 08B5     		push	{r3, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 3, -8
  37              		.cfi_offset 14, -4
 226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (SPIx == SPI1)
  38              		.loc 1 229 0
  39 0002 2D4B     		ldr	r3, .L16
  40 0004 9842     		cmp	r0, r3
  41 0006 1BD0     		beq	.L10
 230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable SPI1 reset state */
 232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Release SPI1 from reset state */
 234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else if (SPIx == SPI2)
  42              		.loc 1 236 0
  43 0008 2C4B     		ldr	r3, .L16+4
  44 000a 9842     		cmp	r0, r3
  45 000c 24D0     		beq	.L11
 237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable SPI2 reset state */
 239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Release SPI2 from reset state */
 241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else if (SPIx == SPI3)
  46              		.loc 1 243 0
  47 000e 2C4B     		ldr	r3, .L16+8
  48 0010 9842     		cmp	r0, r3
  49 0012 2DD0     		beq	.L12
 244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable SPI3 reset state */
 246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Release SPI3 from reset state */
 248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else if (SPIx == SPI4)
  50              		.loc 1 250 0
  51 0014 2B4B     		ldr	r3, .L16+12
  52 0016 9842     		cmp	r0, r3
  53 0018 36D0     		beq	.L13
 251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable SPI4 reset state */
 253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, ENABLE);
 254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Release SPI4 from reset state */
 255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI4, DISABLE);
 256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else if (SPIx == SPI5)
  54              		.loc 1 257 0
  55 001a 2B4B     		ldr	r3, .L16+16
  56 001c 9842     		cmp	r0, r3
  57 001e 3FD0     		beq	.L14
 258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable SPI5 reset state */
 260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
 261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Release SPI5 from reset state */
 262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
 263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else 
 265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if (SPIx == SPI6)
  58              		.loc 1 266 0
  59 0020 2A4B     		ldr	r3, .L16+20
  60 0022 9842     		cmp	r0, r3
  61 0024 00D0     		beq	.L15
  62 0026 08BD     		pop	{r3, pc}
  63              	.L15:
 267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* Enable SPI6 reset state */
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, ENABLE);
  64              		.loc 1 269 0
  65 0028 4FF40010 		mov	r0, #2097152
  66              	.LVL1:
  67 002c 0121     		movs	r1, #1
  68 002e FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  69              	.LVL2:
 270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* Release SPI6 from reset state */
 271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI6, DISABLE);
  70              		.loc 1 271 0
  71 0032 4FF40010 		mov	r0, #2097152
  72 0036 0021     		movs	r1, #0
 272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
  73              		.loc 1 274 0
  74 0038 BDE80840 		pop	{r3, lr}
  75              	.LCFI1:
  76              		.cfi_remember_state
  77              		.cfi_restore 14
  78              		.cfi_restore 3
  79              		.cfi_def_cfa_offset 0
 271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
  80              		.loc 1 271 0
  81 003c FFF7FEBF 		b	RCC_APB2PeriphResetCmd
  82              	.LVL3:
  83              	.L10:
  84              	.LCFI2:
  85              		.cfi_restore_state
 232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Release SPI1 from reset state */
  86              		.loc 1 232 0
  87 0040 4FF48050 		mov	r0, #4096
  88              	.LVL4:
  89 0044 0121     		movs	r1, #1
  90 0046 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  91              	.LVL5:
 234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
  92              		.loc 1 234 0
  93 004a 4FF48050 		mov	r0, #4096
  94 004e 0021     		movs	r1, #0
  95              		.loc 1 274 0
  96 0050 BDE80840 		pop	{r3, lr}
  97              	.LCFI3:
  98              		.cfi_remember_state
  99              		.cfi_restore 14
 100              		.cfi_restore 3
 101              		.cfi_def_cfa_offset 0
 234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 102              		.loc 1 234 0
 103 0054 FFF7FEBF 		b	RCC_APB2PeriphResetCmd
 104              	.LVL6:
 105              	.L11:
 106              	.LCFI4:
 107              		.cfi_restore_state
 239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Release SPI2 from reset state */
 108              		.loc 1 239 0
 109 0058 4FF48040 		mov	r0, #16384
 110              	.LVL7:
 111 005c 0121     		movs	r1, #1
 112 005e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 113              	.LVL8:
 241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 114              		.loc 1 241 0
 115 0062 4FF48040 		mov	r0, #16384
 116 0066 0021     		movs	r1, #0
 117              		.loc 1 274 0
 118 0068 BDE80840 		pop	{r3, lr}
 119              	.LCFI5:
 120              		.cfi_remember_state
 121              		.cfi_restore 14
 122              		.cfi_restore 3
 123              		.cfi_def_cfa_offset 0
 241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 124              		.loc 1 241 0
 125 006c FFF7FEBF 		b	RCC_APB1PeriphResetCmd
 126              	.LVL9:
 127              	.L12:
 128              	.LCFI6:
 129              		.cfi_restore_state
 246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Release SPI3 from reset state */
 130              		.loc 1 246 0
 131 0070 4FF40040 		mov	r0, #32768
 132              	.LVL10:
 133 0074 0121     		movs	r1, #1
 134 0076 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 135              	.LVL11:
 248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 136              		.loc 1 248 0
 137 007a 4FF40040 		mov	r0, #32768
 138 007e 0021     		movs	r1, #0
 139              		.loc 1 274 0
 140 0080 BDE80840 		pop	{r3, lr}
 141              	.LCFI7:
 142              		.cfi_remember_state
 143              		.cfi_restore 14
 144              		.cfi_restore 3
 145              		.cfi_def_cfa_offset 0
 248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 146              		.loc 1 248 0
 147 0084 FFF7FEBF 		b	RCC_APB1PeriphResetCmd
 148              	.LVL12:
 149              	.L13:
 150              	.LCFI8:
 151              		.cfi_restore_state
 253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Release SPI4 from reset state */
 152              		.loc 1 253 0
 153 0088 4FF40050 		mov	r0, #8192
 154              	.LVL13:
 155 008c 0121     		movs	r1, #1
 156 008e FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 157              	.LVL14:
 255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 158              		.loc 1 255 0
 159 0092 4FF40050 		mov	r0, #8192
 160 0096 0021     		movs	r1, #0
 161              		.loc 1 274 0
 162 0098 BDE80840 		pop	{r3, lr}
 163              	.LCFI9:
 164              		.cfi_remember_state
 165              		.cfi_restore 14
 166              		.cfi_restore 3
 167              		.cfi_def_cfa_offset 0
 255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 168              		.loc 1 255 0
 169 009c FFF7FEBF 		b	RCC_APB2PeriphResetCmd
 170              	.LVL15:
 171              	.L14:
 172              	.LCFI10:
 173              		.cfi_restore_state
 260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Release SPI5 from reset state */
 174              		.loc 1 260 0
 175 00a0 4FF48010 		mov	r0, #1048576
 176              	.LVL16:
 177 00a4 0121     		movs	r1, #1
 178 00a6 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 179              	.LVL17:
 262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 180              		.loc 1 262 0
 181 00aa 4FF48010 		mov	r0, #1048576
 182 00ae 0021     		movs	r1, #0
 183              		.loc 1 274 0
 184 00b0 BDE80840 		pop	{r3, lr}
 185              	.LCFI11:
 186              		.cfi_restore 14
 187              		.cfi_restore 3
 188              		.cfi_def_cfa_offset 0
 262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 189              		.loc 1 262 0
 190 00b4 FFF7FEBF 		b	RCC_APB2PeriphResetCmd
 191              	.LVL18:
 192              	.L17:
 193              		.align	2
 194              	.L16:
 195 00b8 00300140 		.word	1073819648
 196 00bc 00380040 		.word	1073756160
 197 00c0 003C0040 		.word	1073757184
 198 00c4 00340140 		.word	1073820672
 199 00c8 00500140 		.word	1073827840
 200 00cc 00540140 		.word	1073828864
 201              		.cfi_endproc
 202              	.LFE110:
 204              		.section	.text.SPI_Init,"ax",%progbits
 205              		.align	2
 206              		.global	SPI_Init
 207              		.thumb
 208              		.thumb_func
 210              	SPI_Init:
 211              	.LFB111:
 275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Initializes the SPIx peripheral according to the specified 
 278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         parameters in the SPI_InitStruct.
 279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
 281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         contains the configuration information for the specified SPI peripheral.
 282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
 285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 212              		.loc 1 285 0
 213              		.cfi_startproc
 214              		@ args = 0, pretend = 0, frame = 0
 215              		@ frame_needed = 0, uses_anonymous_args = 0
 216              	.LVL19:
 217 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 218              	.LCFI12:
 219              		.cfi_def_cfa_offset 24
 220              		.cfi_offset 4, -24
 221              		.cfi_offset 5, -20
 222              		.cfi_offset 6, -16
 223              		.cfi_offset 7, -12
 224              		.cfi_offset 8, -8
 225              		.cfi_offset 14, -4
 286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t tmpreg = 0;
 287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* check the parameters */
 289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the SPI parameters */
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
 293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
 294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DATASIZE(SPI_InitStruct->SPI_DataSize));
 295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
 296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
 297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
 298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
 299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
 300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
 301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*---------------------------- SPIx CR1 Configuration ------------------------*/
 303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPIx CR1 value */
 304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg = SPIx->CR1;
 305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
 306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg &= CR1_CLEAR_MASK;
 307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Configure SPIx: direction, NSS management, first transmitted bit, BaudRate prescaler
 308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****      master/salve mode, CPOL and CPHA */
 309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set BIDImode, BIDIOE and RxONLY bits according to SPI_Direction value */
 310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
 311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set LSBFirst bit according to SPI_FirstBit value */
 312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set BR bits according to SPI_BaudRatePrescaler value */
 313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set CPOL bit according to SPI_CPOL value */
 314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set CPHA bit according to SPI_CPHA value */
 315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 226              		.loc 1 315 0
 227 0004 0B88     		ldrh	r3, [r1]
 228 0006 B1F80280 		ldrh	r8, [r1, #2]
 229 000a B1F804C0 		ldrh	ip, [r1, #4]
 230 000e CA88     		ldrh	r2, [r1, #6]
 231 0010 B1F808E0 		ldrh	lr, [r1, #8]
 232 0014 4F89     		ldrh	r7, [r1, #10]
 233 0016 8E89     		ldrh	r6, [r1, #12]
 234 0018 CC89     		ldrh	r4, [r1, #14]
 304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
 235              		.loc 1 304 0
 236 001a 0588     		ldrh	r5, [r0]
 237              	.LVL20:
 316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write to SPIx CR1 */
 320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->CR1 = tmpreg;
 321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
 323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
 325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write to SPIx CRCPOLY */
 326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 238              		.loc 1 326 0
 239 001c 098A     		ldrh	r1, [r1, #16]
 240              	.LVL21:
 315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 241              		.loc 1 315 0
 242 001e 48EA0303 		orr	r3, r8, r3
 243 0022 43EA0C03 		orr	r3, r3, ip
 244 0026 1343     		orrs	r3, r3, r2
 245 0028 43EA0E03 		orr	r3, r3, lr
 246 002c 3B43     		orrs	r3, r3, r7
 247 002e 3343     		orrs	r3, r3, r6
 248 0030 43EA0402 		orr	r2, r3, r4
 306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Configure SPIx: direction, NSS management, first transmitted bit, BaudRate prescaler
 249              		.loc 1 306 0
 250 0034 05F44153 		and	r3, r5, #12352
 251              	.LVL22:
 315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 252              		.loc 1 315 0
 253 0038 1343     		orrs	r3, r3, r2
 254              	.LVL23:
 255 003a 9BB2     		uxth	r3, r3
 256              	.LVL24:
 320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 257              		.loc 1 320 0
 258 003c 0380     		strh	r3, [r0]	@ movhi
 323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
 259              		.loc 1 323 0
 260 003e 838B     		ldrh	r3, [r0, #28]
 261              	.LVL25:
 262 0040 23F40063 		bic	r3, r3, #2048
 263 0044 1B04     		lsls	r3, r3, #16
 264 0046 1B0C     		lsrs	r3, r3, #16
 265 0048 8383     		strh	r3, [r0, #28]	@ movhi
 266              	.LVL26:
 267              		.loc 1 326 0
 268 004a 0182     		strh	r1, [r0, #16]	@ movhi
 269 004c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 270              		.cfi_endproc
 271              	.LFE111:
 273              		.section	.text.I2S_Init,"ax",%progbits
 274              		.align	2
 275              		.global	I2S_Init
 276              		.thumb
 277              		.thumb_func
 279              	I2S_Init:
 280              	.LFB112:
 327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Initializes the SPIx peripheral according to the specified 
 331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         parameters in the I2S_InitStruct.
 332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be  2 or 3 to select the SPI peripheral (configured in I2S mode).
 333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  I2S_InitStruct: pointer to an I2S_InitTypeDef structure that
 334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         contains the configuration information for the specified SPI peripheral
 335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         configured in I2S mode.
 336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *           
 337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   The function calculates the optimal prescaler needed to obtain the most 
 338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         accurate audio frequency (depending on the I2S clock source, the PLL values 
 339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         and the product configuration). But in case the prescaler value is greater 
 340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         than 511, the default value (0x02) will be configured instead.    
 341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
 342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   if an external clock is used as source clock for the I2S, then the define
 343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         I2S_EXTERNAL_CLOCK_VAL in file stm32f4xx_conf.h should be enabled and set
 344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         to the value of the the source clock frequency (in Hz).
 345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  
 346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
 349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 281              		.loc 1 349 0
 282              		.cfi_startproc
 283              		@ args = 0, pretend = 0, frame = 0
 284              		@ frame_needed = 0, uses_anonymous_args = 0
 285              	.LVL27:
 350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint32_t tmp = 0, i2sclk = 0;
 352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #ifndef I2S_EXTERNAL_CLOCK_VAL
 353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint32_t pllm = 0, plln = 0, pllr = 0;
 354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** #endif /* I2S_EXTERNAL_CLOCK_VAL */
 355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the I2S parameters */
 357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_23_PERIPH(SPIx));
 358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
 359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
 360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
 361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_MCLK_OUTPUT(I2S_InitStruct->I2S_MCLKOutput));
 362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
 363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
 364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
 366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
 367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 286              		.loc 1 367 0
 287 0000 828B     		ldrh	r2, [r0, #28]
 368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SPR = 0x0002;
 369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the I2SCFGR register value */
 371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg = SPIx->I2SCFGR;
 372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
 374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 288              		.loc 1 374 0
 289 0002 8B68     		ldr	r3, [r1, #8]
 367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SPR = 0x0002;
 290              		.loc 1 367 0
 291 0004 22F47B62 		bic	r2, r2, #4016
 292 0008 22F00F02 		bic	r2, r2, #15
 293 000c 1204     		lsls	r2, r2, #16
 349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 294              		.loc 1 349 0
 295 000e 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 296              	.LCFI13:
 297              		.cfi_def_cfa_offset 28
 298              		.cfi_offset 4, -28
 299              		.cfi_offset 5, -24
 300              		.cfi_offset 6, -20
 301              		.cfi_offset 7, -16
 302              		.cfi_offset 8, -12
 303              		.cfi_offset 9, -8
 304              		.cfi_offset 14, -4
 367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SPR = 0x0002;
 305              		.loc 1 367 0
 306 0012 120C     		lsrs	r2, r2, #16
 368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SPR = 0x0002;
 307              		.loc 1 368 0
 308 0014 0224     		movs	r4, #2
 367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SPR = 0x0002;
 309              		.loc 1 367 0
 310 0016 8283     		strh	r2, [r0, #28]	@ movhi
 368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SPR = 0x0002;
 311              		.loc 1 368 0
 312 0018 0484     		strh	r4, [r0, #32]	@ movhi
 371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 313              		.loc 1 371 0
 314 001a B0F81CE0 		ldrh	lr, [r0, #28]
 315              		.loc 1 374 0
 316 001e A342     		cmp	r3, r4
 371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 317              		.loc 1 371 0
 318 0020 1FFA8EFE 		uxth	lr, lr
 319              	.LVL28:
 320              		.loc 1 374 0
 321 0024 51D0     		beq	.L34
 375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sodd = (uint16_t)0;
 377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sdiv = (uint16_t)2;   
 378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* If the requested audio frequency is not the default, compute the prescaler */
 380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Check the frame length (For the Prescaler computing) *******************/
 383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* Packet length is 16 bits */
 386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       packetlength = 1;
 387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     else
 389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* Packet length is 32 bits */
 391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       packetlength = 2;
 392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get I2S source Clock frequency  ****************************************/
 395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       
 396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* If an external I2S clock has to be used, this define should be set  
 397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        in the project configuration or in the stm32f4xx_conf.h file */
 398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   #ifdef I2S_EXTERNAL_CLOCK_VAL     
 399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set external clock as I2S clock source */
 400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if ((RCC->CFGR & RCC_CFGR_I2SSRC) == 0)
 401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       RCC->CFGR |= (uint32_t)RCC_CFGR_I2SSRC;
 403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set the I2S clock to the external clock  value */
 406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sclk = I2S_EXTERNAL_CLOCK_VAL;
 407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   #else /* There is no define for External I2S clock source */
 409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set PLLI2S as I2S clock source */
 410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 322              		.loc 1 410 0
 323 0026 2F4A     		ldr	r2, .L37
 383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 324              		.loc 1 383 0
 325 0028 8F88     		ldrh	r7, [r1, #4]
 326              		.loc 1 410 0
 327 002a 9468     		ldr	r4, [r2, #8]
 386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 328              		.loc 1 386 0
 329 002c 002F     		cmp	r7, #0
 330 002e 14BF     		ite	ne
 331 0030 4FF0020C 		movne	ip, #2
 332 0034 4FF0010C 		moveq	ip, #1
 333              	.LVL29:
 334              		.loc 1 410 0
 335 0038 2402     		lsls	r4, r4, #8
 336 003a 41D4     		bmi	.L35
 337              	.L24:
 411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }    
 414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the PLLI2SN value */
 416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 338              		.loc 1 416 0
 339 003c 294A     		ldr	r2, .L37
 417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                       (RCC_PLLI2SCFGR_PLLI2SN >> 6));
 418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the PLLI2SR value */
 420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                       (RCC_PLLI2SCFGR_PLLI2SR >> 28));
 422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the PLLM value */
 424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the I2S source clock value */
 427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   #endif /* I2S_EXTERNAL_CLOCK_VAL */
 429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Compute the Real divider depending on the MCLK output state, with a floating point */
 431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 340              		.loc 1 431 0
 341 003e CE88     		ldrh	r6, [r1, #6]
 416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                       (RCC_PLLI2SCFGR_PLLI2SN >> 6));
 342              		.loc 1 416 0
 343 0040 D2F88450 		ldr	r5, [r2, #132]
 344              	.LVL30:
 420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                       (RCC_PLLI2SCFGR_PLLI2SR >> 28));
 345              		.loc 1 420 0
 346 0044 D2F88440 		ldr	r4, [r2, #132]
 347              	.LVL31:
 424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 348              		.loc 1 424 0
 349 0048 5268     		ldr	r2, [r2, #4]
 350              	.LVL32:
 427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   #endif /* I2S_EXTERNAL_CLOCK_VAL */
 351              		.loc 1 427 0
 352 004a DFF8A080 		ldr	r8, .L37+8
 416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                       (RCC_PLLI2SCFGR_PLLI2SN >> 6));
 353              		.loc 1 416 0
 354 004e C5F38815 		ubfx	r5, r5, #6, #9
 355              	.LVL33:
 356              		.loc 1 431 0
 357 0052 B6F5007F 		cmp	r6, #512
 424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 358              		.loc 1 424 0
 359 0056 02F03F09 		and	r9, r2, #63
 360              	.LVL34:
 420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                       (RCC_PLLI2SCFGR_PLLI2SR >> 28));
 361              		.loc 1 420 0
 362 005a C4F30272 		ubfx	r2, r4, #28, #3
 427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   #endif /* I2S_EXTERNAL_CLOCK_VAL */
 363              		.loc 1 427 0
 364 005e B8FBF9F4 		udiv	r4, r8, r9
 365              	.LVL35:
 366 0062 05FB04F4 		mul	r4, r5, r4
 367 0066 B4FBF2F4 		udiv	r4, r4, r2
 368              	.LVL36:
 369              		.loc 1 431 0
 370 006a 31D0     		beq	.L36
 432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* MCLK output is enabled */
 434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     else
 437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       /* MCLK output is disabled */
 439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 
 371              		.loc 1 439 0
 372 006c 4FEA4C12 		lsl	r2, ip, #5
 373 0070 B4FBF2F2 		udiv	r2, r4, r2
 374 0074 02EB8202 		add	r2, r2, r2, lsl #2
 375 0078 5200     		lsls	r2, r2, #1
 376 007a B2FBF3F3 		udiv	r3, r2, r3
 377 007e 0533     		adds	r3, r3, #5
 378 0080 9AB2     		uxth	r2, r3
 379              	.LVL37:
 380              	.L26:
 440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
 442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Remove the flatting point */
 443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     tmp = tmp / 10;  
 381              		.loc 1 443 0
 382 0082 194B     		ldr	r3, .L37+4
 383 0084 A3FB0223 		umull	r2, r3, r3, r2
 384              	.LVL38:
 385 0088 DB08     		lsrs	r3, r3, #3
 386              	.LVL39:
 444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       
 445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Check the parity of the divider */
 446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    
 448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Compute the i2sdiv prescaler */
 449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 387              		.loc 1 449 0
 388 008a 5A08     		lsrs	r2, r3, #1
 450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    
 451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
 452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sodd = (uint16_t) (i2sodd << 8);
 453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Test if the divider is 1 or 0 or greater than 0xFF */
 456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 389              		.loc 1 456 0
 390 008c 941E     		subs	r4, r2, #2
 449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    
 391              		.loc 1 449 0
 392 008e 03F00103 		and	r3, r3, #1
 393              	.LVL40:
 394              		.loc 1 456 0
 395 0092 FD2C     		cmp	r4, #253
 396 0094 94BF     		ite	ls
 397 0096 42EA0323 		orrls	r3, r2, r3, lsl #8
 398              	.LVL41:
 399 009a 0223     		movhi	r3, #2
 400              	.LVL42:
 401              	.L27:
 402 009c 0C88     		ldrh	r4, [r1]
 403 009e 4A88     		ldrh	r2, [r1, #2]
 404 00a0 8989     		ldrh	r1, [r1, #12]
 405              	.LVL43:
 406 00a2 4EEA040E 		orr	lr, lr, r4
 407              	.LVL44:
 408 00a6 4EF4006E 		orr	lr, lr, #2048
 409 00aa 4EEA0202 		orr	r2, lr, r2
 410 00ae 0A43     		orrs	r2, r2, r1
 457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set the default values */
 459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sdiv = 2;
 460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     i2sodd = 0;
 461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write to SPIx I2SPR register the computed value */
 464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCL
 411              		.loc 1 464 0
 412 00b0 3343     		orrs	r3, r3, r6
 413 00b2 92B2     		uxth	r2, r2
 414 00b4 9BB2     		uxth	r3, r3
 465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  
 466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Configure the I2S with the SPI_InitStruct values */
 467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 415              		.loc 1 467 0
 416 00b6 1743     		orrs	r7, r7, r2
 417              	.LVL45:
 464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  
 418              		.loc 1 464 0
 419 00b8 0384     		strh	r3, [r0, #32]	@ movhi
 468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)I2S_InitStruct->I2S_CPOL))));
 470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  
 471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write to SPIx I2SCFGR */  
 472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->I2SCFGR = tmpreg;
 420              		.loc 1 472 0
 421 00ba 8783     		strh	r7, [r0, #28]	@ movhi
 422 00bc BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 423              	.LVL46:
 424              	.L35:
 412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }    
 425              		.loc 1 412 0
 426 00c0 9468     		ldr	r4, [r2, #8]
 427 00c2 24F40004 		bic	r4, r4, #8388608
 428 00c6 9460     		str	r4, [r2, #8]
 429 00c8 B8E7     		b	.L24
 430              	.LVL47:
 431              	.L34:
 432 00ca 8F88     		ldrh	r7, [r1, #4]
 433 00cc CE88     		ldrh	r6, [r1, #6]
 434 00ce E5E7     		b	.L27
 435              	.LVL48:
 436              	.L36:
 434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 437              		.loc 1 434 0
 438 00d0 240A     		lsrs	r4, r4, #8
 439              	.LVL49:
 440 00d2 04EB8404 		add	r4, r4, r4, lsl #2
 441 00d6 6400     		lsls	r4, r4, #1
 442 00d8 B4FBF3F3 		udiv	r3, r4, r3
 443 00dc 0533     		adds	r3, r3, #5
 444 00de 9AB2     		uxth	r2, r3
 445              	.LVL50:
 446 00e0 CFE7     		b	.L26
 447              	.L38:
 448 00e2 00BF     		.align	2
 449              	.L37:
 450 00e4 00380240 		.word	1073887232
 451 00e8 CDCCCCCC 		.word	-858993459
 452 00ec 00127A00 		.word	8000000
 453              		.cfi_endproc
 454              	.LFE112:
 456              		.section	.text.SPI_StructInit,"ax",%progbits
 457              		.align	2
 458              		.global	SPI_StructInit
 459              		.thumb
 460              		.thumb_func
 462              	SPI_StructInit:
 463              	.LFB113:
 473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Fills each SPI_InitStruct member with its default value.
 477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
 478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
 481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 464              		.loc 1 481 0
 465              		.cfi_startproc
 466              		@ args = 0, pretend = 0, frame = 0
 467              		@ frame_needed = 0, uses_anonymous_args = 0
 468              		@ link register save eliminated.
 469              	.LVL51:
 482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*--------------- Reset SPI init structure parameters values -----------------*/
 483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_Direction member */
 484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 470              		.loc 1 484 0
 471 0000 0023     		movs	r3, #0
 485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* initialize the SPI_Mode member */
 486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* initialize the SPI_DataSize member */
 488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_CPOL member */
 490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_CPHA member */
 492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_NSS member */
 494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_BaudRatePrescaler member */
 496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_FirstBit member */
 498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_CRCPolynomial member */
 500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPI_InitStruct->SPI_CRCPolynomial = 7;
 472              		.loc 1 500 0
 473 0002 0722     		movs	r2, #7
 474 0004 0282     		strh	r2, [r0, #16]	@ movhi
 484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* initialize the SPI_Mode member */
 475              		.loc 1 484 0
 476 0006 0380     		strh	r3, [r0]	@ movhi
 486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* initialize the SPI_DataSize member */
 477              		.loc 1 486 0
 478 0008 4380     		strh	r3, [r0, #2]	@ movhi
 488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_CPOL member */
 479              		.loc 1 488 0
 480 000a 8380     		strh	r3, [r0, #4]	@ movhi
 490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_CPHA member */
 481              		.loc 1 490 0
 482 000c C380     		strh	r3, [r0, #6]	@ movhi
 492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_NSS member */
 483              		.loc 1 492 0
 484 000e 0381     		strh	r3, [r0, #8]	@ movhi
 494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_BaudRatePrescaler member */
 485              		.loc 1 494 0
 486 0010 4381     		strh	r3, [r0, #10]	@ movhi
 496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_FirstBit member */
 487              		.loc 1 496 0
 488 0012 8381     		strh	r3, [r0, #12]	@ movhi
 498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the SPI_CRCPolynomial member */
 489              		.loc 1 498 0
 490 0014 C381     		strh	r3, [r0, #14]	@ movhi
 491 0016 7047     		bx	lr
 492              		.cfi_endproc
 493              	.LFE113:
 495              		.section	.text.I2S_StructInit,"ax",%progbits
 496              		.align	2
 497              		.global	I2S_StructInit
 498              		.thumb
 499              		.thumb_func
 501              	I2S_StructInit:
 502              	.LFB114:
 501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Fills each I2S_InitStruct member with its default value.
 505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  I2S_InitStruct: pointer to a I2S_InitTypeDef structure which will be initialized.
 506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
 509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 503              		.loc 1 509 0
 504              		.cfi_startproc
 505              		@ args = 0, pretend = 0, frame = 0
 506              		@ frame_needed = 0, uses_anonymous_args = 0
 507              		@ link register save eliminated.
 508              	.LVL52:
 510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*--------------- Reset I2S init structure parameters values -----------------*/
 511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_Mode member */
 512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 509              		.loc 1 512 0
 510 0000 0023     		movs	r3, #0
 513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_Standard member */
 515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_DataFormat member */
 518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_MCLKOutput member */
 521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_AudioFreq member */
 524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 511              		.loc 1 524 0
 512 0002 0222     		movs	r2, #2
 513 0004 8260     		str	r2, [r0, #8]
 512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 514              		.loc 1 512 0
 515 0006 0380     		strh	r3, [r0]	@ movhi
 515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 516              		.loc 1 515 0
 517 0008 4380     		strh	r3, [r0, #2]	@ movhi
 518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 518              		.loc 1 518 0
 519 000a 8380     		strh	r3, [r0, #4]	@ movhi
 521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 520              		.loc 1 521 0
 521 000c C380     		strh	r3, [r0, #6]	@ movhi
 525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Initialize the I2S_CPOL member */
 527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 522              		.loc 1 527 0
 523 000e 8381     		strh	r3, [r0, #12]	@ movhi
 524 0010 7047     		bx	lr
 525              		.cfi_endproc
 526              	.LFE114:
 528 0012 00BF     		.section	.text.SPI_Cmd,"ax",%progbits
 529              		.align	2
 530              		.global	SPI_Cmd
 531              		.thumb
 532              		.thumb_func
 534              	SPI_Cmd:
 535              	.LFB115:
 528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the specified SPI peripheral.
 532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx peripheral. 
 534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 536              		.loc 1 538 0
 537              		.cfi_startproc
 538              		@ args = 0, pretend = 0, frame = 0
 539              		@ frame_needed = 0, uses_anonymous_args = 0
 540              		@ link register save eliminated.
 541              	.LVL53:
 539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI peripheral */
 545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_CR1_SPE;
 542              		.loc 1 545 0
 543 0000 0388     		ldrh	r3, [r0]
 542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 544              		.loc 1 542 0
 545 0002 29B9     		cbnz	r1, .L44
 546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI peripheral */
 550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 546              		.loc 1 550 0
 547 0004 23F04003 		bic	r3, r3, #64
 548 0008 1B04     		lsls	r3, r3, #16
 549 000a 1B0C     		lsrs	r3, r3, #16
 550 000c 0380     		strh	r3, [r0]	@ movhi
 551 000e 7047     		bx	lr
 552              	.L44:
 545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 553              		.loc 1 545 0
 554 0010 9BB2     		uxth	r3, r3
 555 0012 43F04003 		orr	r3, r3, #64
 556 0016 0380     		strh	r3, [r0]	@ movhi
 557 0018 7047     		bx	lr
 558              		.cfi_endproc
 559              	.LFE115:
 561 001a 00BF     		.section	.text.I2S_Cmd,"ax",%progbits
 562              		.align	2
 563              		.global	I2S_Cmd
 564              		.thumb
 565              		.thumb_func
 567              	I2S_Cmd:
 568              	.LFB116:
 551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the specified SPI peripheral (in I2S mode).
 556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 2 or 3 to select the SPI peripheral (or I2Sxext 
 557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         for full duplex mode).
 558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx peripheral. 
 559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         This parameter can be: ENABLE or DISABLE.
 560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 569              		.loc 1 563 0
 570              		.cfi_startproc
 571              		@ args = 0, pretend = 0, frame = 0
 572              		@ frame_needed = 0, uses_anonymous_args = 0
 573              		@ link register save eliminated.
 574              	.LVL54:
 564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
 566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI peripheral (in I2S mode) */
 571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 575              		.loc 1 571 0
 576 0000 838B     		ldrh	r3, [r0, #28]
 568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 577              		.loc 1 568 0
 578 0002 29B9     		cbnz	r1, .L48
 572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI peripheral in I2S mode */
 576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 579              		.loc 1 576 0
 580 0004 23F48063 		bic	r3, r3, #1024
 581 0008 1B04     		lsls	r3, r3, #16
 582 000a 1B0C     		lsrs	r3, r3, #16
 583 000c 8383     		strh	r3, [r0, #28]	@ movhi
 584 000e 7047     		bx	lr
 585              	.L48:
 571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 586              		.loc 1 571 0
 587 0010 9BB2     		uxth	r3, r3
 588 0012 43F48063 		orr	r3, r3, #1024
 589 0016 8383     		strh	r3, [r0, #28]	@ movhi
 590 0018 7047     		bx	lr
 591              		.cfi_endproc
 592              	.LFE116:
 594 001a 00BF     		.section	.text.SPI_DataSizeConfig,"ax",%progbits
 595              		.align	2
 596              		.global	SPI_DataSizeConfig
 597              		.thumb
 598              		.thumb_func
 600              	SPI_DataSizeConfig:
 601              	.LFB117:
 577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Configures the data size for the selected SPI.
 582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_DataSize: specifies the SPI data size.
 584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_DataSize_16b: Set data frame format to 16bit
 586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_DataSize_8b: Set data frame format to 8bit
 587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
 590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 602              		.loc 1 590 0
 603              		.cfi_startproc
 604              		@ args = 0, pretend = 0, frame = 0
 605              		@ frame_needed = 0, uses_anonymous_args = 0
 606              		@ link register save eliminated.
 607              	.LVL55:
 591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DATASIZE(SPI_DataSize));
 594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear DFF bit */
 595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 608              		.loc 1 595 0
 609 0000 0388     		ldrh	r3, [r0]
 610 0002 23F40063 		bic	r3, r3, #2048
 611 0006 1B04     		lsls	r3, r3, #16
 612 0008 1B0C     		lsrs	r3, r3, #16
 613 000a 0380     		strh	r3, [r0]	@ movhi
 596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set new DFF bit value */
 597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->CR1 |= SPI_DataSize;
 614              		.loc 1 597 0
 615 000c 0388     		ldrh	r3, [r0]
 616 000e 9BB2     		uxth	r3, r3
 617 0010 1943     		orrs	r1, r1, r3
 618              	.LVL56:
 619 0012 0180     		strh	r1, [r0]	@ movhi
 620 0014 7047     		bx	lr
 621              		.cfi_endproc
 622              	.LFE117:
 624 0016 00BF     		.section	.text.SPI_BiDirectionalLineConfig,"ax",%progbits
 625              		.align	2
 626              		.global	SPI_BiDirectionalLineConfig
 627              		.thumb
 628              		.thumb_func
 630              	SPI_BiDirectionalLineConfig:
 631              	.LFB118:
 598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Selects the data transfer direction in bidirectional mode for the specified SPI.
 602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_Direction: specifies the data transfer direction in bidirectional mode. 
 604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_Direction_Tx: Selects Tx transmission direction
 606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_Direction_Rx: Selects Rx receive direction
 607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
 610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 632              		.loc 1 610 0
 633              		.cfi_startproc
 634              		@ args = 0, pretend = 0, frame = 0
 635              		@ frame_needed = 0, uses_anonymous_args = 0
 636              		@ link register save eliminated.
 637              	.LVL57:
 611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_DIRECTION(SPI_Direction));
 614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (SPI_Direction == SPI_Direction_Tx)
 638              		.loc 1 614 0
 639 0000 B1F5804F 		cmp	r1, #16384
 615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set the Tx only mode */
 617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_Direction_Tx;
 640              		.loc 1 617 0
 641 0004 0388     		ldrh	r3, [r0]
 614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 642              		.loc 1 614 0
 643 0006 05D0     		beq	.L53
 618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set the Rx only mode */
 622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 &= SPI_Direction_Rx;
 644              		.loc 1 622 0
 645 0008 23F48043 		bic	r3, r3, #16384
 646 000c 1B04     		lsls	r3, r3, #16
 647 000e 1B0C     		lsrs	r3, r3, #16
 648 0010 0380     		strh	r3, [r0]	@ movhi
 649 0012 7047     		bx	lr
 650              	.L53:
 617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 651              		.loc 1 617 0
 652 0014 9BB2     		uxth	r3, r3
 653 0016 43F48043 		orr	r3, r3, #16384
 654 001a 0380     		strh	r3, [r0]	@ movhi
 655 001c 7047     		bx	lr
 656              		.cfi_endproc
 657              	.LFE118:
 659 001e 00BF     		.section	.text.SPI_NSSInternalSoftwareConfig,"ax",%progbits
 660              		.align	2
 661              		.global	SPI_NSSInternalSoftwareConfig
 662              		.thumb
 663              		.thumb_func
 665              	SPI_NSSInternalSoftwareConfig:
 666              	.LFB119:
 623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Configures internally by software the NSS pin for the selected SPI.
 628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_NSSInternalSoft: specifies the SPI NSS internal state.
 630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
 632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
 633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
 636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 667              		.loc 1 636 0
 668              		.cfi_startproc
 669              		@ args = 0, pretend = 0, frame = 0
 670              		@ frame_needed = 0, uses_anonymous_args = 0
 671              		@ link register save eliminated.
 672              	.LVL58:
 637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
 640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 673              		.loc 1 640 0
 674 0000 4FF6FF63 		movw	r3, #65279
 675 0004 9942     		cmp	r1, r3
 641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Set NSS pin internally by software */
 643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 676              		.loc 1 643 0
 677 0006 0388     		ldrh	r3, [r0]
 640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 678              		.loc 1 640 0
 679 0008 04D0     		beq	.L55
 680              		.loc 1 643 0
 681 000a 9BB2     		uxth	r3, r3
 682 000c 43F48073 		orr	r3, r3, #256
 683 0010 0380     		strh	r3, [r0]	@ movhi
 684 0012 7047     		bx	lr
 685              	.L55:
 644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Reset NSS pin internally by software */
 648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 686              		.loc 1 648 0
 687 0014 23F48073 		bic	r3, r3, #256
 688 0018 1B04     		lsls	r3, r3, #16
 689 001a 1B0C     		lsrs	r3, r3, #16
 690 001c 0380     		strh	r3, [r0]	@ movhi
 691 001e 7047     		bx	lr
 692              		.cfi_endproc
 693              	.LFE119:
 695              		.section	.text.SPI_SSOutputCmd,"ax",%progbits
 696              		.align	2
 697              		.global	SPI_SSOutputCmd
 698              		.thumb
 699              		.thumb_func
 701              	SPI_SSOutputCmd:
 702              	.LFB120:
 649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the SS output for the selected SPI.
 654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx SS output. 
 656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 703              		.loc 1 660 0
 704              		.cfi_startproc
 705              		@ args = 0, pretend = 0, frame = 0
 706              		@ frame_needed = 0, uses_anonymous_args = 0
 707              		@ link register save eliminated.
 708              	.LVL59:
 661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI SS output */
 667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 709              		.loc 1 667 0
 710 0000 8388     		ldrh	r3, [r0, #4]
 664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 711              		.loc 1 664 0
 712 0002 29B9     		cbnz	r1, .L60
 668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI SS output */
 672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 713              		.loc 1 672 0
 714 0004 23F00403 		bic	r3, r3, #4
 715 0008 1B04     		lsls	r3, r3, #16
 716 000a 1B0C     		lsrs	r3, r3, #16
 717 000c 8380     		strh	r3, [r0, #4]	@ movhi
 718 000e 7047     		bx	lr
 719              	.L60:
 667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 720              		.loc 1 667 0
 721 0010 9BB2     		uxth	r3, r3
 722 0012 43F00403 		orr	r3, r3, #4
 723 0016 8380     		strh	r3, [r0, #4]	@ movhi
 724 0018 7047     		bx	lr
 725              		.cfi_endproc
 726              	.LFE120:
 728 001a 00BF     		.section	.text.SPI_TIModeCmd,"ax",%progbits
 729              		.align	2
 730              		.global	SPI_TIModeCmd
 731              		.thumb
 732              		.thumb_func
 734              	SPI_TIModeCmd:
 735              	.LFB121:
 673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the SPIx/I2Sx DMA interface.
 678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *   
 679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   This function can be called only after the SPI_Init() function has 
 680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         been called. 
 681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   When TI mode is selected, the control bits SSM, SSI, CPOL and CPHA 
 682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         are not taken into consideration and are configured by hardware
 683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         respectively to the TI mode requirements.  
 684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
 685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 
 686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the selected SPI TI communication mode.
 687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 736              		.loc 1 691 0
 737              		.cfi_startproc
 738              		@ args = 0, pretend = 0, frame = 0
 739              		@ frame_needed = 0, uses_anonymous_args = 0
 740              		@ link register save eliminated.
 741              	.LVL60:
 692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the TI mode for the selected SPI peripheral */
 699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 |= SPI_CR2_FRF;
 742              		.loc 1 699 0
 743 0000 8388     		ldrh	r3, [r0, #4]
 696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 744              		.loc 1 696 0
 745 0002 29B9     		cbnz	r1, .L64
 700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the TI mode for the selected SPI peripheral */
 704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 746              		.loc 1 704 0
 747 0004 23F01003 		bic	r3, r3, #16
 748 0008 1B04     		lsls	r3, r3, #16
 749 000a 1B0C     		lsrs	r3, r3, #16
 750 000c 8380     		strh	r3, [r0, #4]	@ movhi
 751 000e 7047     		bx	lr
 752              	.L64:
 699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 753              		.loc 1 699 0
 754 0010 9BB2     		uxth	r3, r3
 755 0012 43F01003 		orr	r3, r3, #16
 756 0016 8380     		strh	r3, [r0, #4]	@ movhi
 757 0018 7047     		bx	lr
 758              		.cfi_endproc
 759              	.LFE121:
 761 001a 00BF     		.section	.text.I2S_FullDuplexConfig,"ax",%progbits
 762              		.align	2
 763              		.global	I2S_FullDuplexConfig
 764              		.thumb
 765              		.thumb_func
 767              	I2S_FullDuplexConfig:
 768              	.LFB122:
 705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Configures the full duplex mode for the I2Sx peripheral using its
 710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         extension I2Sxext according to the specified parameters in the 
 711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         I2S_InitStruct.
 712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  I2Sxext: where x can be  2 or 3 to select the I2S peripheral extension block.
 713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  I2S_InitStruct: pointer to an I2S_InitTypeDef structure that
 714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         contains the configuration information for the specified I2S peripheral
 715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         extension.
 716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * 
 717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   The structure pointed by I2S_InitStruct parameter should be the same
 718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         used for the master I2S peripheral. In this case, if the master is 
 719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         configured as transmitter, the slave will be receiver and vice versa.
 720:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         Or you can force a different mode by modifying the field I2S_Mode to the
 721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         value I2S_SlaveRx or I2S_SlaveTx indepedently of the master configuration.    
 722:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         
 723:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   The I2S full duplex extension can be configured in slave mode only.    
 724:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  
 725:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 726:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 727:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
 728:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 769              		.loc 1 728 0
 770              		.cfi_startproc
 771              		@ args = 0, pretend = 0, frame = 0
 772              		@ frame_needed = 0, uses_anonymous_args = 0
 773              		@ link register save eliminated.
 774              	.LVL61:
 729:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t tmpreg = 0, tmp = 0;
 730:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 731:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the I2S parameters */
 732:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_EXT_PERIPH(I2Sxext));
 733:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
 734:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
 735:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
 736:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
 737:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
 739:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
 740:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 775              		.loc 1 740 0
 776 0000 838B     		ldrh	r3, [r0, #28]
 777 0002 23F47B63 		bic	r3, r3, #4016
 778 0006 23F00F03 		bic	r3, r3, #15
 779 000a 1B04     		lsls	r3, r3, #16
 741:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2Sxext->I2SPR = 0x0002;
 780              		.loc 1 741 0
 781 000c 0222     		movs	r2, #2
 740:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2Sxext->I2SPR = 0x0002;
 782              		.loc 1 740 0
 783 000e 1B0C     		lsrs	r3, r3, #16
 784 0010 8383     		strh	r3, [r0, #28]	@ movhi
 785              		.loc 1 741 0
 786 0012 0284     		strh	r2, [r0, #32]	@ movhi
 742:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 743:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the I2SCFGR register value */
 744:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg = I2Sxext->I2SCFGR;
 787              		.loc 1 744 0
 788 0014 838B     		ldrh	r3, [r0, #28]
 789 0016 8A89     		ldrh	r2, [r1, #12]
 728:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t tmpreg = 0, tmp = 0;
 790              		.loc 1 728 0
 791 0018 70B4     		push	{r4, r5, r6}
 792              	.LCFI14:
 793              		.cfi_def_cfa_offset 12
 794              		.cfi_offset 4, -12
 795              		.cfi_offset 5, -8
 796              		.cfi_offset 6, -4
 797 001a 4D88     		ldrh	r5, [r1, #2]
 745:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 746:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the mode to be configured for the extended I2S */
 747:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_Slav
 798              		.loc 1 747 0
 799 001c 0C88     		ldrh	r4, [r1]
 800 001e 8E88     		ldrh	r6, [r1, #4]
 744:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 801              		.loc 1 744 0
 802 0020 9BB2     		uxth	r3, r3
 803              	.LVL62:
 804 0022 2B43     		orrs	r3, r3, r5
 805              	.LVL63:
 806              		.loc 1 747 0
 807 0024 24F40071 		bic	r1, r4, #512
 808              	.LVL64:
 809 0028 43F40063 		orr	r3, r3, #2048
 810 002c 3343     		orrs	r3, r3, r6
 811 002e 89B2     		uxth	r1, r1
 812 0030 1343     		orrs	r3, r3, r2
 813 0032 0029     		cmp	r1, #0
 814 0034 9BB2     		uxth	r3, r3
 748:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 749:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     tmp = I2S_Mode_SlaveRx;
 750:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 751:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 752:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 753:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterRx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_Sl
 754:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     {
 755:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       tmp = I2S_Mode_SlaveTx;
 815              		.loc 1 755 0
 816 0036 0CBF     		ite	eq
 817 0038 4FF48072 		moveq	r2, #256
 818 003c 0022     		movne	r2, #0
 819              	.LVL65:
 756:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     }
 757:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 758:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 759:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  
 760:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Configure the I2S with the SPI_InitStruct values */
 761:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 820              		.loc 1 761 0
 821 003e 1343     		orrs	r3, r3, r2
 822              	.LVL66:
 762:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 763:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                   (uint16_t)I2S_InitStruct->I2S_CPOL))));
 764:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  
 765:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write to SPIx I2SCFGR */  
 766:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   I2Sxext->I2SCFGR = tmpreg;
 823              		.loc 1 766 0
 824 0040 8383     		strh	r3, [r0, #28]	@ movhi
 767:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 825              		.loc 1 767 0
 826 0042 70BC     		pop	{r4, r5, r6}
 827              	.LCFI15:
 828              		.cfi_restore 6
 829              		.cfi_restore 5
 830              		.cfi_restore 4
 831              		.cfi_def_cfa_offset 0
 832 0044 7047     		bx	lr
 833              		.cfi_endproc
 834              	.LFE122:
 836 0046 00BF     		.section	.text.SPI_I2S_ReceiveData,"ax",%progbits
 837              		.align	2
 838              		.global	SPI_I2S_ReceiveData
 839              		.thumb
 840              		.thumb_func
 842              	SPI_I2S_ReceiveData:
 843              	.LFB123:
 768:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 769:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 770:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @}
 771:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 772:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 773:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group2 Data transfers functions
 774:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *  @brief   Data transfers functions
 775:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *
 776:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @verbatim   
 777:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================
 778:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                       ##### Data transfers functions #####
 779:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================  
 780:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 781:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  [..] This section provides a set of functions allowing to manage the SPI data 
 782:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       transfers. In reception, data are received and then stored into an internal 
 783:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       Rx buffer while. In transmission, data are first stored into an internal Tx 
 784:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       buffer before being transmitted.
 785:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 786:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  [..] The read access of the SPI_DR register can be done using the SPI_I2S_ReceiveData()
 787:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       function and returns the Rx buffered value. Whereas a write access to the SPI_DR 
 788:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       can be done using SPI_I2S_SendData() function and stores the written data into 
 789:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       Tx buffer.
 790:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 791:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @endverbatim
 792:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 793:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 794:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 795:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 796:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Returns the most recent received data by the SPIx/I2Sx peripheral. 
 797:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
 798:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
 799:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval The value of the received data.
 800:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 801:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
 802:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 844              		.loc 1 802 0
 845              		.cfi_startproc
 846              		@ args = 0, pretend = 0, frame = 0
 847              		@ frame_needed = 0, uses_anonymous_args = 0
 848              		@ link register save eliminated.
 849              	.LVL67:
 803:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 804:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 805:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 806:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Return the data in the DR register */
 807:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   return SPIx->DR;
 850              		.loc 1 807 0
 851 0000 8089     		ldrh	r0, [r0, #12]
 852              	.LVL68:
 808:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 853              		.loc 1 808 0
 854 0002 80B2     		uxth	r0, r0
 855 0004 7047     		bx	lr
 856              		.cfi_endproc
 857              	.LFE123:
 859 0006 00BF     		.section	.text.SPI_I2S_SendData,"ax",%progbits
 860              		.align	2
 861              		.global	SPI_I2S_SendData
 862              		.thumb
 863              		.thumb_func
 865              	SPI_I2S_SendData:
 866              	.LFB124:
 809:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 810:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 811:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Transmits a Data through the SPIx/I2Sx peripheral.
 812:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
 813:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
 814:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  Data: Data to be transmitted.
 815:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 816:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 817:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
 818:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 867              		.loc 1 818 0
 868              		.cfi_startproc
 869              		@ args = 0, pretend = 0, frame = 0
 870              		@ frame_needed = 0, uses_anonymous_args = 0
 871              		@ link register save eliminated.
 872              	.LVL69:
 819:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 820:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
 821:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 822:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Write in the DR register the data to be sent */
 823:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->DR = Data;
 873              		.loc 1 823 0
 874 0000 8181     		strh	r1, [r0, #12]	@ movhi
 875 0002 7047     		bx	lr
 876              		.cfi_endproc
 877              	.LFE124:
 879              		.section	.text.SPI_CalculateCRC,"ax",%progbits
 880              		.align	2
 881              		.global	SPI_CalculateCRC
 882              		.thumb
 883              		.thumb_func
 885              	SPI_CalculateCRC:
 886              	.LFB125:
 824:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 825:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 826:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 827:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @}
 828:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 829:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 830:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group3 Hardware CRC Calculation functions
 831:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *  @brief   Hardware CRC Calculation functions
 832:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *
 833:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @verbatim   
 834:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================
 835:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                  ##### Hardware CRC Calculation functions #####
 836:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================  
 837:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 838:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  [..] This section provides a set of functions allowing to manage the SPI CRC hardware 
 839:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       calculation
 840:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 841:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  [..] SPI communication using CRC is possible through the following procedure:
 842:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    (#) Program the Data direction, Polarity, Phase, First Data, Baud Rate Prescaler, 
 843:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        Slave Management, Peripheral Mode and CRC Polynomial values using the SPI_Init()
 844:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        function.
 845:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    (#) Enable the CRC calculation using the SPI_CalculateCRC() function.
 846:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    (#) Enable the SPI using the SPI_Cmd() function
 847:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    (#) Before writing the last data to the TX buffer, set the CRCNext bit using the 
 848:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        SPI_TransmitCRC() function to indicate that after transmission of the last 
 849:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        data, the CRC should be transmitted.
 850:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    (#) After transmitting the last data, the SPI transmits the CRC. The SPI_CR1_CRCNEXT
 851:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         bit is reset. The CRC is also received and compared against the SPI_RXCRCR 
 852:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         value. 
 853:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         If the value does not match, the SPI_FLAG_CRCERR flag is set and an interrupt
 854:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****         can be generated when the SPI_I2S_IT_ERR interrupt is enabled.
 855:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 856:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  [..]
 857:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    (@) It is advised not to read the calculated CRC values during the communication.
 858:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 859:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    (@) When the SPI is in slave mode, be careful to enable CRC calculation only 
 860:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        when the clock is stable, that is, when the clock is in the steady state. 
 861:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        If not, a wrong CRC calculation may be done. In fact, the CRC is sensitive 
 862:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        to the SCK slave input clock as soon as CRCEN is set, and this, whatever 
 863:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        the value of the SPE bit.
 864:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 865:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    (@) With high bitrate frequencies, be careful when transmitting the CRC.
 866:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        As the number of used CPU cycles has to be as low as possible in the CRC 
 867:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        transfer phase, it is forbidden to call software functions in the CRC 
 868:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        transmission sequence to avoid errors in the last data and CRC reception. 
 869:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        In fact, CRCNEXT bit has to be written before the end of the transmission/reception 
 870:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        of the last data.
 871:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 872:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    (@) For high bit rate frequencies, it is advised to use the DMA mode to avoid the
 873:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        degradation of the SPI speed performance due to CPU accesses impacting the 
 874:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        SPI bandwidth.
 875:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 876:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    (@) When the STM32F4xx is configured as slave and the NSS hardware mode is 
 877:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        used, the NSS pin needs to be kept low between the data phase and the CRC 
 878:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        phase.
 879:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 880:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    (@) When the SPI is configured in slave mode with the CRC feature enabled, CRC
 881:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        calculation takes place even if a high level is applied on the NSS pin. 
 882:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        This may happen for example in case of a multi-slave environment where the 
 883:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        communication master addresses slaves alternately.
 884:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 885:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    (@) Between a slave de-selection (high level on NSS) and a new slave selection 
 886:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        (low level on NSS), the CRC value should be cleared on both master and slave
 887:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        sides in order to resynchronize the master and slave for their respective 
 888:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        CRC calculation.
 889:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 890:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    (@) To clear the CRC, follow the procedure below:
 891:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        (#@) Disable SPI using the SPI_Cmd() function
 892:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        (#@) Disable the CRC calculation using the SPI_CalculateCRC() function.
 893:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        (#@) Enable the CRC calculation using the SPI_CalculateCRC() function.
 894:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        (#@) Enable SPI using the SPI_Cmd() function.
 895:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 896:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @endverbatim
 897:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 898:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 899:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 900:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 901:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the CRC value calculation of the transferred bytes.
 902:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 903:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the SPIx CRC value calculation.
 904:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
 905:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 906:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 907:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
 908:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 887              		.loc 1 908 0
 888              		.cfi_startproc
 889              		@ args = 0, pretend = 0, frame = 0
 890              		@ frame_needed = 0, uses_anonymous_args = 0
 891              		@ link register save eliminated.
 892              	.LVL70:
 909:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 910:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 911:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 912:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 913:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 914:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI CRC calculation */
 915:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 |= SPI_CR1_CRCEN;
 893              		.loc 1 915 0
 894 0000 0388     		ldrh	r3, [r0]
 912:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 895              		.loc 1 912 0
 896 0002 29B9     		cbnz	r1, .L74
 916:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 917:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 918:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 919:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI CRC calculation */
 920:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 897              		.loc 1 920 0
 898 0004 23F40053 		bic	r3, r3, #8192
 899 0008 1B04     		lsls	r3, r3, #16
 900 000a 1B0C     		lsrs	r3, r3, #16
 901 000c 0380     		strh	r3, [r0]	@ movhi
 902 000e 7047     		bx	lr
 903              	.L74:
 915:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 904              		.loc 1 915 0
 905 0010 9BB2     		uxth	r3, r3
 906 0012 43F40053 		orr	r3, r3, #8192
 907 0016 0380     		strh	r3, [r0]	@ movhi
 908 0018 7047     		bx	lr
 909              		.cfi_endproc
 910              	.LFE125:
 912 001a 00BF     		.section	.text.SPI_TransmitCRC,"ax",%progbits
 913              		.align	2
 914              		.global	SPI_TransmitCRC
 915              		.thumb
 916              		.thumb_func
 918              	SPI_TransmitCRC:
 919              	.LFB126:
 921:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 922:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 923:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 924:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 925:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Transmit the SPIx CRC value.
 926:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 927:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
 928:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 929:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_TransmitCRC(SPI_TypeDef* SPIx)
 930:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 920              		.loc 1 930 0
 921              		.cfi_startproc
 922              		@ args = 0, pretend = 0, frame = 0
 923              		@ frame_needed = 0, uses_anonymous_args = 0
 924              		@ link register save eliminated.
 925              	.LVL71:
 931:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 932:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 933:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 934:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Enable the selected SPI CRC transmission */
 935:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->CR1 |= SPI_CR1_CRCNEXT;
 926              		.loc 1 935 0
 927 0000 0388     		ldrh	r3, [r0]
 928 0002 9BB2     		uxth	r3, r3
 929 0004 43F48053 		orr	r3, r3, #4096
 930 0008 0380     		strh	r3, [r0]	@ movhi
 931 000a 7047     		bx	lr
 932              		.cfi_endproc
 933              	.LFE126:
 935              		.section	.text.SPI_GetCRC,"ax",%progbits
 936              		.align	2
 937              		.global	SPI_GetCRC
 938              		.thumb
 939              		.thumb_func
 941              	SPI_GetCRC:
 942              	.LFB127:
 936:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 937:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 938:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 939:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Returns the transmit or the receive CRC register value for the specified SPI.
 940:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 941:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_CRC: specifies the CRC register to be read.
 942:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
 943:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_CRC_Tx: Selects Tx CRC register
 944:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_CRC_Rx: Selects Rx CRC register
 945:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval The selected CRC register value..
 946:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 947:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
 948:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 943              		.loc 1 948 0
 944              		.cfi_startproc
 945              		@ args = 0, pretend = 0, frame = 0
 946              		@ frame_needed = 0, uses_anonymous_args = 0
 947              		@ link register save eliminated.
 948              	.LVL72:
 949:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t crcreg = 0;
 950:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 951:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 952:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_CRC(SPI_CRC));
 953:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (SPI_CRC != SPI_CRC_Rx)
 949              		.loc 1 953 0
 950 0000 0129     		cmp	r1, #1
 954:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 955:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the Tx CRC register */
 956:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     crcreg = SPIx->TXCRCR;
 951              		.loc 1 956 0
 952 0002 14BF     		ite	ne
 953 0004 008B     		ldrhne	r0, [r0, #24]
 954              	.LVL73:
 957:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 958:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
 959:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 960:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Get the Rx CRC register */
 961:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     crcreg = SPIx->RXCRCR;
 955              		.loc 1 961 0
 956 0006 808A     		ldrheq	r0, [r0, #20]
 957 0008 80B2     		uxth	r0, r0
 958              	.LVL74:
 962:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 963:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Return the selected CRC register */
 964:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   return crcreg;
 965:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 959              		.loc 1 965 0
 960 000a 7047     		bx	lr
 961              		.cfi_endproc
 962              	.LFE127:
 964              		.section	.text.SPI_GetCRCPolynomial,"ax",%progbits
 965              		.align	2
 966              		.global	SPI_GetCRCPolynomial
 967              		.thumb
 968              		.thumb_func
 970              	SPI_GetCRCPolynomial:
 971              	.LFB128:
 966:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 967:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 968:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Returns the CRC Polynomial register value for the specified SPI.
 969:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: where x can be 1, 2, 3, 4, 5 or 6 to select the SPI peripheral.
 970:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval The CRC Polynomial register value.
 971:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 972:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
 973:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 972              		.loc 1 973 0
 973              		.cfi_startproc
 974              		@ args = 0, pretend = 0, frame = 0
 975              		@ frame_needed = 0, uses_anonymous_args = 0
 976              		@ link register save eliminated.
 977              	.LVL75:
 974:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
 975:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 976:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
 977:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Return the CRC polynomial register */
 978:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   return SPIx->CRCPR;
 978              		.loc 1 978 0
 979 0000 008A     		ldrh	r0, [r0, #16]
 980              	.LVL76:
 979:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 981              		.loc 1 979 0
 982 0002 80B2     		uxth	r0, r0
 983 0004 7047     		bx	lr
 984              		.cfi_endproc
 985              	.LFE128:
 987 0006 00BF     		.section	.text.SPI_I2S_DMACmd,"ax",%progbits
 988              		.align	2
 989              		.global	SPI_I2S_DMACmd
 990              		.thumb
 991              		.thumb_func
 993              	SPI_I2S_DMACmd:
 994              	.LFB129:
 980:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 981:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 982:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @}
 983:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 984:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 985:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group4 DMA transfers management functions
 986:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *  @brief   DMA transfers management functions
 987:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
 988:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @verbatim   
 989:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================
 990:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****                    ##### DMA transfers management functions #####
 991:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================  
 992:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 993:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @endverbatim
 994:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
 995:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
 996:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 997:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
 998:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the SPIx/I2Sx DMA interface.
 999:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
1000:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1001:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_DMAReq: specifies the SPI DMA transfer request to be enabled or disabled. 
1002:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be any combination of the following values:
1003:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_DMAReq_Tx: Tx buffer DMA transfer request
1004:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_DMAReq_Rx: Rx buffer DMA transfer request
1005:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the selected SPI DMA transfer request.
1006:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
1007:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
1008:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1009:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
1010:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 995              		.loc 1 1010 0
 996              		.cfi_startproc
 997              		@ args = 0, pretend = 0, frame = 0
 998              		@ frame_needed = 0, uses_anonymous_args = 0
 999              		@ link register save eliminated.
 1000              	.LVL77:
1011:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
1012:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1013:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1014:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
1015:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1016:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
1017:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1018:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI DMA requests */
1019:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 |= SPI_I2S_DMAReq;
 1001              		.loc 1 1019 0
 1002 0000 8388     		ldrh	r3, [r0, #4]
 1003 0002 9BB2     		uxth	r3, r3
1016:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
 1004              		.loc 1 1016 0
 1005 0004 1AB9     		cbnz	r2, .L83
1020:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1021:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
1022:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1023:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI DMA requests */
1024:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 1006              		.loc 1 1024 0
 1007 0006 23EA0101 		bic	r1, r3, r1
 1008              	.LVL78:
 1009 000a 8180     		strh	r1, [r0, #4]	@ movhi
 1010 000c 7047     		bx	lr
 1011              	.LVL79:
 1012              	.L83:
1019:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 1013              		.loc 1 1019 0
 1014 000e 1943     		orrs	r1, r1, r3
 1015              	.LVL80:
 1016 0010 8180     		strh	r1, [r0, #4]	@ movhi
 1017 0012 7047     		bx	lr
 1018              		.cfi_endproc
 1019              	.LFE129:
 1021              		.section	.text.SPI_I2S_ITConfig,"ax",%progbits
 1022              		.align	2
 1023              		.global	SPI_I2S_ITConfig
 1024              		.thumb
 1025              		.thumb_func
 1027              	SPI_I2S_ITConfig:
 1028              	.LFB130:
1025:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1026:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
1027:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1028:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1029:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @}
1030:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1031:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1032:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /** @defgroup SPI_Group5 Interrupts and flags management functions
1033:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *  @brief   Interrupts and flags management functions
1034:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *
1035:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @verbatim   
1036:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================
1037:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****             ##### Interrupts and flags management functions #####
1038:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ===============================================================================  
1039:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  
1040:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  [..] This section provides a set of functions allowing to configure the SPI Interrupts 
1041:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       sources and check or clear the flags or pending bits status.
1042:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       The user should identify which mode will be used in his application to manage 
1043:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       the communication: Polling mode, Interrupt mode or DMA mode. 
1044:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
1045:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *** Polling Mode ***
1046:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ====================
1047:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** [..] In Polling Mode, the SPI/I2S communication can be managed by 9 flags:
1048:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   (#) SPI_I2S_FLAG_TXE : to indicate the status of the transmit buffer register
1049:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   (#) SPI_I2S_FLAG_RXNE : to indicate the status of the receive buffer register
1050:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   (#) SPI_I2S_FLAG_BSY : to indicate the state of the communication layer of the SPI.
1051:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   (#) SPI_FLAG_CRCERR : to indicate if a CRC Calculation error occur              
1052:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   (#) SPI_FLAG_MODF : to indicate if a Mode Fault error occur
1053:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   (#) SPI_I2S_FLAG_OVR : to indicate if an Overrun error occur
1054:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   (#) I2S_FLAG_TIFRFE: to indicate a Frame Format error occurs.
1055:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   (#) I2S_FLAG_UDR: to indicate an Underrun error occurs.
1056:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   (#) I2S_FLAG_CHSIDE: to indicate Channel Side.
1057:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1058:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   (@) Do not use the BSY flag to handle each data transmission or reception. It is
1059:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       better to use the TXE and RXNE flags instead.
1060:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1061:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  [..] In this Mode it is advised to use the following functions:
1062:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    (+) FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG);
1063:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    (+) void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG);
1064:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1065:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *** Interrupt Mode ***
1066:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ======================
1067:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  [..] In Interrupt Mode, the SPI communication can be managed by 3 interrupt sources
1068:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****       and 7 pending bits: 
1069:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    (+) Pending Bits:
1070:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        (##) SPI_I2S_IT_TXE : to indicate the status of the transmit buffer register
1071:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        (##) SPI_I2S_IT_RXNE : to indicate the status of the receive buffer register
1072:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        (##) SPI_IT_CRCERR : to indicate if a CRC Calculation error occur (available in SPI mode onl
1073:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        (##) SPI_IT_MODF : to indicate if a Mode Fault error occur (available in SPI mode only)
1074:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        (##) SPI_I2S_IT_OVR : to indicate if an Overrun error occur
1075:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        (##) I2S_IT_UDR : to indicate an Underrun Error occurs (available in I2S mode only).
1076:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        (##) I2S_FLAG_TIFRFE : to indicate a Frame Format error occurs (available in TI mode only).
1077:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1078:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    (+) Interrupt Source:
1079:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        (##) SPI_I2S_IT_TXE: specifies the interrupt source for the Tx buffer empty 
1080:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****             interrupt.  
1081:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        (##) SPI_I2S_IT_RXNE : specifies the interrupt source for the Rx buffer not 
1082:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****             empty interrupt.
1083:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        (##) SPI_I2S_IT_ERR : specifies the interrupt source for the errors interrupt.
1084:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1085:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  [..] In this Mode it is advised to use the following functions:
1086:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    (+) void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState);
1087:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    (+) ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT);
1088:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    (+) void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT);
1089:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1090:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  *** DMA Mode ***
1091:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  ================
1092:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  [..] In DMA Mode, the SPI communication can be managed by 2 DMA Channel requests:
1093:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    (#) SPI_I2S_DMAReq_Tx: specifies the Tx buffer DMA transfer request
1094:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    (#) SPI_I2S_DMAReq_Rx: specifies the Rx buffer DMA transfer request
1095:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1096:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****  [..] In this Mode it is advised to use the following function:
1097:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****    (+) void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState 
1098:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****        NewState);
1099:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** @endverbatim
1101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @{
1102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Enables or disables the specified SPI/I2S interrupts.
1106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
1107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt source to be enabled or disabled. 
1109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
1110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_TXE: Tx buffer empty interrupt mask
1111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_RXNE: Rx buffer not empty interrupt mask
1112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_ERR: Error interrupt mask
1113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  NewState: new state of the specified SPI interrupt.
1114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be: ENABLE or DISABLE.
1115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
1116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
1118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1029              		.loc 1 1118 0
 1030              		.cfi_startproc
 1031              		@ args = 0, pretend = 0, frame = 0
 1032              		@ frame_needed = 0, uses_anonymous_args = 0
 1033              		@ link register save eliminated.
 1034              	.LVL81:
1119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t itpos = 0, itmask = 0 ;
1120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
1121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
1122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));
1125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPI IT index */
1127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itpos = SPI_I2S_IT >> 4;
1128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set the IT mask */
1130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itmask = (uint16_t)1 << (uint16_t)itpos;
 1035              		.loc 1 1130 0
 1036 0000 0909     		lsrs	r1, r1, #4
 1037              	.LVL82:
 1038 0002 0123     		movs	r3, #1
 1039 0004 8B40     		lsls	r3, r3, r1
 1040 0006 9BB2     		uxth	r3, r3
 1041              	.LVL83:
1131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (NewState != DISABLE)
 1042              		.loc 1 1132 0
 1043 0008 2AB9     		cbnz	r2, .L87
1133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Enable the selected SPI interrupt */
1135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 |= itmask;
1136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
1138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* Disable the selected SPI interrupt */
1140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     SPIx->CR2 &= (uint16_t)~itmask;
 1044              		.loc 1 1140 0
 1045 000a 8288     		ldrh	r2, [r0, #4]
 1046              	.LVL84:
 1047 000c 92B2     		uxth	r2, r2
 1048 000e 22EA0303 		bic	r3, r2, r3
 1049              	.LVL85:
 1050 0012 8380     		strh	r3, [r0, #4]	@ movhi
 1051 0014 7047     		bx	lr
 1052              	.LVL86:
 1053              	.L87:
1135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
 1054              		.loc 1 1135 0
 1055 0016 8288     		ldrh	r2, [r0, #4]
 1056              	.LVL87:
 1057 0018 92B2     		uxth	r2, r2
 1058 001a 1343     		orrs	r3, r3, r2
 1059              	.LVL88:
 1060 001c 8380     		strh	r3, [r0, #4]	@ movhi
 1061 001e 7047     		bx	lr
 1062              		.cfi_endproc
 1063              	.LFE130:
 1065              		.section	.text.SPI_I2S_GetFlagStatus,"ax",%progbits
 1066              		.align	2
 1067              		.global	SPI_I2S_GetFlagStatus
 1068              		.thumb
 1069              		.thumb_func
 1071              	SPI_I2S_GetFlagStatus:
 1072              	.LFB131:
1141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
1143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Checks whether the specified SPIx/I2Sx flag is set or not.
1146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
1147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_FLAG: specifies the SPI flag to check. 
1149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
1150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_TXE: Transmit buffer empty flag.
1151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_RXNE: Receive buffer not empty flag.
1152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_BSY: Busy flag.
1153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_OVR: Overrun flag.
1154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_FLAG_MODF: Mode Fault flag.
1155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_FLAG_CRCERR: CRC Error flag.
1156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_FLAG_TIFRFE: Format Error.
1157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg I2S_FLAG_UDR: Underrun Error flag.
1158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
1159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval The new state of SPI_I2S_FLAG (SET or RESET).
1160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
1162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1073              		.loc 1 1162 0
 1074              		.cfi_startproc
 1075              		@ args = 0, pretend = 0, frame = 0
 1076              		@ frame_needed = 0, uses_anonymous_args = 0
 1077              		@ link register save eliminated.
 1078              	.LVL89:
1163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   FlagStatus bitstatus = RESET;
1164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
1165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
1167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   
1168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the status of the specified SPI flag */
1169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 1079              		.loc 1 1169 0
 1080 0000 0389     		ldrh	r3, [r0, #8]
 1081              	.LVL90:
 1082 0002 1942     		tst	r1, r3
1170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* SPI_I2S_FLAG is set */
1172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     bitstatus = SET;
1173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
1175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* SPI_I2S_FLAG is reset */
1177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     bitstatus = RESET;
1178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Return the SPI_I2S_FLAG status */
1180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   return  bitstatus;
1181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1083              		.loc 1 1181 0
 1084 0004 14BF     		ite	ne
 1085 0006 0120     		movne	r0, #1
 1086              	.LVL91:
 1087 0008 0020     		moveq	r0, #0
 1088 000a 7047     		bx	lr
 1089              		.cfi_endproc
 1090              	.LFE131:
 1092              		.section	.text.SPI_I2S_ClearFlag,"ax",%progbits
 1093              		.align	2
 1094              		.global	SPI_I2S_ClearFlag
 1095              		.thumb
 1096              		.thumb_func
 1098              	SPI_I2S_ClearFlag:
 1099              	.LFB132:
1182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Clears the SPIx CRC Error (CRCERR) flag.
1185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
1186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
1187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_FLAG: specifies the SPI flag to clear. 
1188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This function clears only CRCERR flag.
1189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_FLAG_CRCERR: CRC Error flag.  
1190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  
1191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   OVR (OverRun error) flag is cleared by software sequence: a read 
1192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          operation to SPI_DR register (SPI_I2S_ReceiveData()) followed by a read 
1193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          operation to SPI_SR register (SPI_I2S_GetFlagStatus()).
1194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   UDR (UnderRun error) flag is cleared by a read operation to 
1195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          SPI_SR register (SPI_I2S_GetFlagStatus()).   
1196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   MODF (Mode Fault) flag is cleared by software sequence: a read/write 
1197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          operation to SPI_SR register (SPI_I2S_GetFlagStatus()) followed by a 
1198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
1199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *  
1200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
1201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
1203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1100              		.loc 1 1203 0
 1101              		.cfi_startproc
 1102              		@ args = 0, pretend = 0, frame = 0
 1103              		@ frame_needed = 0, uses_anonymous_args = 0
 1104              		@ link register save eliminated.
 1105              	.LVL92:
1204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
1205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
1207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     
1208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear the selected SPI CRC Error (CRCERR) flag */
1209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 1106              		.loc 1 1209 0
 1107 0000 C943     		mvns	r1, r1
 1108              	.LVL93:
 1109 0002 89B2     		uxth	r1, r1
 1110 0004 0181     		strh	r1, [r0, #8]	@ movhi
 1111 0006 7047     		bx	lr
 1112              		.cfi_endproc
 1113              	.LFE132:
 1115              		.section	.text.SPI_I2S_GetITStatus,"ax",%progbits
 1116              		.align	2
 1117              		.global	SPI_I2S_GetITStatus
 1118              		.thumb
 1119              		.thumb_func
 1121              	SPI_I2S_GetITStatus:
 1122              	.LFB133:
1210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
1211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Checks whether the specified SPIx/I2Sx interrupt has occurred or not.
1214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
1215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.  
1216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt source to check. 
1217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          This parameter can be one of the following values:
1218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_TXE: Transmit buffer empty interrupt.
1219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_RXNE: Receive buffer not empty interrupt.
1220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_OVR: Overrun interrupt.
1221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_IT_MODF: Mode Fault interrupt.
1222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_IT_CRCERR: CRC Error interrupt.
1223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg I2S_IT_UDR: Underrun interrupt.  
1224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
1225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval The new state of SPI_I2S_IT (SET or RESET).
1226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
1228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1123              		.loc 1 1228 0
 1124              		.cfi_startproc
 1125              		@ args = 0, pretend = 0, frame = 0
 1126              		@ frame_needed = 0, uses_anonymous_args = 0
 1127              		@ link register save eliminated.
 1128              	.LVL94:
 1129 0000 10B4     		push	{r4}
 1130              	.LCFI16:
 1131              		.cfi_def_cfa_offset 4
 1132              		.cfi_offset 4, -4
1229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   ITStatus bitstatus = RESET;
1230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t itpos = 0, itmask = 0, enablestatus = 0;
1231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
1233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));
1235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S_IT index */
1237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itpos = 0x01 << (SPI_I2S_IT & 0x0F);
1238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S_IT IT mask */
1240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itmask = SPI_I2S_IT >> 4;
1241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Set the IT mask */
1243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itmask = 0x01 << itmask;
1244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S_IT enable bit status */
1246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   enablestatus = (SPIx->CR2 & itmask) ;
 1133              		.loc 1 1246 0
 1134 0002 8488     		ldrh	r4, [r0, #4]
1247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the status of the specified SPI interrupt */
1249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 1135              		.loc 1 1249 0
 1136 0004 0389     		ldrh	r3, [r0, #8]
1237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 1137              		.loc 1 1237 0
 1138 0006 0122     		movs	r2, #1
 1139 0008 01F00F00 		and	r0, r1, #15
 1140              	.LVL95:
 1141              		.loc 1 1249 0
 1142 000c 9BB2     		uxth	r3, r3
1237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 1143              		.loc 1 1237 0
 1144 000e 02FA00F0 		lsl	r0, r2, r0
 1145              		.loc 1 1249 0
 1146 0012 1840     		ands	r0, r3, r0
1246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 1147              		.loc 1 1246 0
 1148 0014 A4B2     		uxth	r4, r4
 1149              	.LVL96:
 1150              		.loc 1 1249 0
 1151 0016 05D0     		beq	.L91
1243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
 1152              		.loc 1 1243 0 discriminator 1
 1153 0018 0909     		lsrs	r1, r1, #4
 1154              	.LVL97:
 1155 001a 8A40     		lsls	r2, r2, r1
 1156              		.loc 1 1249 0 discriminator 1
 1157 001c 1442     		tst	r4, r2
1250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* SPI_I2S_IT is set */
1252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     bitstatus = SET;
 1158              		.loc 1 1252 0 discriminator 1
 1159 001e 14BF     		ite	ne
 1160 0020 0120     		movne	r0, #1
 1161 0022 0020     		moveq	r0, #0
 1162              	.L91:
 1163              	.LVL98:
1253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   else
1255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   {
1256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     /* SPI_I2S_IT is reset */
1257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****     bitstatus = RESET;
1258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   }
1259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Return the SPI_I2S_IT status */
1260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   return bitstatus;
1261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** }
 1164              		.loc 1 1261 0
 1165 0024 5DF8044B 		ldr	r4, [sp], #4
 1166              	.LCFI17:
 1167              		.cfi_restore 4
 1168              		.cfi_def_cfa_offset 0
 1169              	.LVL99:
 1170 0028 7047     		bx	lr
 1171              		.cfi_endproc
 1172              	.LFE133:
 1174 002a 00BF     		.section	.text.SPI_I2S_ClearITPendingBit,"ax",%progbits
 1175              		.align	2
 1176              		.global	SPI_I2S_ClearITPendingBit
 1177              		.thumb
 1178              		.thumb_func
 1180              	SPI_I2S_ClearITPendingBit:
 1181              	.LFB134:
1262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** /**
1264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @brief  Clears the SPIx CRC Error (CRCERR) interrupt pending bit.
1265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2, 3, 4, 5 or 6 
1266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.  
1267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt pending bit to clear.
1268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *         This function clears only CRCERR interrupt pending bit.   
1269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *            @arg SPI_IT_CRCERR: CRC Error interrupt.
1270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *   
1271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   OVR (OverRun Error) interrupt pending bit is cleared by software 
1272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          sequence: a read operation to SPI_DR register (SPI_I2S_ReceiveData()) 
1273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          followed by a read operation to SPI_SR register (SPI_I2S_GetITStatus()).
1274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   UDR (UnderRun Error) interrupt pending bit is cleared by a read 
1275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          operation to SPI_SR register (SPI_I2S_GetITStatus()).   
1276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @note   MODF (Mode Fault) interrupt pending bit is cleared by software sequence:
1277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          a read/write operation to SPI_SR register (SPI_I2S_GetITStatus()) 
1278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          followed by a write operation to SPI_CR1 register (SPI_Cmd() to enable 
1279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   *          the SPI).
1280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   * @retval None
1281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   */
1282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
1283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** {
 1182              		.loc 1 1283 0
 1183              		.cfi_startproc
 1184              		@ args = 0, pretend = 0, frame = 0
 1185              		@ frame_needed = 0, uses_anonymous_args = 0
 1186              		@ link register save eliminated.
 1187              	.LVL100:
1284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   uint16_t itpos = 0;
1285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Check the parameters */
1286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
1287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));
1288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Get the SPI_I2S IT index */
1290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 1188              		.loc 1 1290 0
 1189 0000 01F00F01 		and	r1, r1, #15
 1190              	.LVL101:
 1191 0004 0123     		movs	r3, #1
 1192 0006 8B40     		lsls	r3, r3, r1
1291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c **** 
1292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
1293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_spi.c ****   SPIx->SR = (uint16_t)~itpos;
 1193              		.loc 1 1293 0
 1194 0008 DB43     		mvns	r3, r3
 1195 000a 9BB2     		uxth	r3, r3
 1196 000c 0381     		strh	r3, [r0, #8]	@ movhi
 1197 000e 7047     		bx	lr
 1198              		.cfi_endproc
 1199              	.LFE134:
 1201              		.text
 1202              	.Letext0:
 1203              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\4.9 2014q4\\arm-none-eabi\\include\\mach
 1204              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\4.9 2014q4\\arm-none-eabi\\include\\stdi
 1205              		.file 4 "libs/Device/STM32F4xx/Include/stm32f4xx.h"
 1206              		.file 5 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_spi.h"
 1207              		.file 6 "libs/CMSIS/Include/core_cm4.h"
 1208              		.file 7 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rcc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_spi.c
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:20     .text.SPI_I2S_DeInit:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:25     .text.SPI_I2S_DeInit:00000000 SPI_I2S_DeInit
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:195    .text.SPI_I2S_DeInit:000000b8 $d
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:205    .text.SPI_Init:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:210    .text.SPI_Init:00000000 SPI_Init
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:274    .text.I2S_Init:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:279    .text.I2S_Init:00000000 I2S_Init
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:450    .text.I2S_Init:000000e4 $d
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:457    .text.SPI_StructInit:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:462    .text.SPI_StructInit:00000000 SPI_StructInit
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:496    .text.I2S_StructInit:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:501    .text.I2S_StructInit:00000000 I2S_StructInit
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:529    .text.SPI_Cmd:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:534    .text.SPI_Cmd:00000000 SPI_Cmd
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:562    .text.I2S_Cmd:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:567    .text.I2S_Cmd:00000000 I2S_Cmd
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:595    .text.SPI_DataSizeConfig:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:600    .text.SPI_DataSizeConfig:00000000 SPI_DataSizeConfig
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:625    .text.SPI_BiDirectionalLineConfig:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:630    .text.SPI_BiDirectionalLineConfig:00000000 SPI_BiDirectionalLineConfig
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:660    .text.SPI_NSSInternalSoftwareConfig:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:665    .text.SPI_NSSInternalSoftwareConfig:00000000 SPI_NSSInternalSoftwareConfig
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:696    .text.SPI_SSOutputCmd:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:701    .text.SPI_SSOutputCmd:00000000 SPI_SSOutputCmd
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:729    .text.SPI_TIModeCmd:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:734    .text.SPI_TIModeCmd:00000000 SPI_TIModeCmd
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:762    .text.I2S_FullDuplexConfig:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:767    .text.I2S_FullDuplexConfig:00000000 I2S_FullDuplexConfig
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:837    .text.SPI_I2S_ReceiveData:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:842    .text.SPI_I2S_ReceiveData:00000000 SPI_I2S_ReceiveData
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:860    .text.SPI_I2S_SendData:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:865    .text.SPI_I2S_SendData:00000000 SPI_I2S_SendData
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:880    .text.SPI_CalculateCRC:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:885    .text.SPI_CalculateCRC:00000000 SPI_CalculateCRC
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:913    .text.SPI_TransmitCRC:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:918    .text.SPI_TransmitCRC:00000000 SPI_TransmitCRC
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:936    .text.SPI_GetCRC:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:941    .text.SPI_GetCRC:00000000 SPI_GetCRC
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:965    .text.SPI_GetCRCPolynomial:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:970    .text.SPI_GetCRCPolynomial:00000000 SPI_GetCRCPolynomial
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:988    .text.SPI_I2S_DMACmd:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:993    .text.SPI_I2S_DMACmd:00000000 SPI_I2S_DMACmd
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:1022   .text.SPI_I2S_ITConfig:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:1027   .text.SPI_I2S_ITConfig:00000000 SPI_I2S_ITConfig
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:1066   .text.SPI_I2S_GetFlagStatus:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:1071   .text.SPI_I2S_GetFlagStatus:00000000 SPI_I2S_GetFlagStatus
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:1093   .text.SPI_I2S_ClearFlag:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:1098   .text.SPI_I2S_ClearFlag:00000000 SPI_I2S_ClearFlag
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:1116   .text.SPI_I2S_GetITStatus:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:1121   .text.SPI_I2S_GetITStatus:00000000 SPI_I2S_GetITStatus
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:1175   .text.SPI_I2S_ClearITPendingBit:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccpf08ei.s:1180   .text.SPI_I2S_ClearITPendingBit:00000000 SPI_I2S_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
