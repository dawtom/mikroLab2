   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 2
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"stm32f4xx_rcc.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.RCC_DeInit,"ax",%progbits
  20              		.align	2
  21              		.global	RCC_DeInit
  22              		.thumb
  23              		.thumb_func
  25              	RCC_DeInit:
  26              	.LFB110:
  27              		.file 1 "libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c"
   1:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
   2:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ******************************************************************************
   3:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @file    stm32f4xx_rcc.c
   4:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @author  MCD Application Team
   5:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @version V1.3.0
   6:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @date    08-November-2013
   7:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          functionalities of the Reset and clock control (RCC) peripheral:
   9:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           + Internal/external clocks, PLL, CSS and MCO configuration
  10:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           + System, AHB and APB busses clocks configuration
  11:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           + Peripheral clocks configuration
  12:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           + Interrupts and flags management
  13:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
  14:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  @verbatim                
  15:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================
  16:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****                       ##### RCC specific features #####
  17:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================
  18:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     [..]  
  19:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       After reset the device is running from Internal High Speed oscillator 
  20:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (HSI 16MHz) with Flash 0 wait state, Flash prefetch buffer, D-Cache 
  21:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       and I-Cache are disabled, and all peripherals are off except internal
  22:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       SRAM, Flash and JTAG.
  23:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (+) There is no prescaler on High speed (AHB) and Low speed (APB) busses;
  24:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           all peripherals mapped on these busses are running at HSI speed.
  25:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (+) The clock for all peripherals is switched off, except the SRAM and FLASH.
  26:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (+) All GPIOs are in input floating state, except the JTAG pins which
  27:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           are assigned to be used for debug purpose.
  28:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     [..]          
  29:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       Once the device started from reset, the user application has to:        
  30:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (+) Configure the clock source to be used to drive the System clock
  31:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           (if the application needs higher frequency/performance)
  32:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (+) Configure the System clock frequency and Flash settings  
  33:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (+) Configure the AHB and APB busses prescalers
  34:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (+) Enable the clock for the peripheral(s) to be used
  35:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (+) Configure the clock source(s) for peripherals which clocks are not
  36:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           derived from the System clock (I2S, RTC, ADC, USB OTG FS/SDIO/RNG)                       
  37:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  @endverbatim    
  38:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ******************************************************************************
  39:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @attention
  40:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
  41:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
  42:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
  43:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  44:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * You may not use this file except in compliance with the License.
  45:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * You may obtain a copy of the License at:
  46:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
  47:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  48:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
  49:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * Unless required by applicable law or agreed to in writing, software 
  50:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  51:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  52:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * See the License for the specific language governing permissions and
  53:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * limitations under the License.
  54:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
  55:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ******************************************************************************
  56:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
  57:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  58:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Includes ------------------------------------------------------------------*/
  59:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #include "stm32f4xx_rcc.h"
  60:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  61:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  62:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
  63:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
  64:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  65:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC 
  66:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief RCC driver modules
  67:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
  68:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */ 
  69:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  70:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private typedef -----------------------------------------------------------*/
  71:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private define ------------------------------------------------------------*/
  72:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* ------------ RCC registers bit address in the alias region ----------- */
  73:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define RCC_OFFSET                (RCC_BASE - PERIPH_BASE)
  74:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* --- CR Register ---*/
  75:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of HSION bit */
  76:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_OFFSET                 (RCC_OFFSET + 0x00)
  77:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define HSION_BitNumber           0x00
  78:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_HSION_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (HSION_BitNumber * 4))
  79:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of CSSON bit */
  80:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CSSON_BitNumber           0x13
  81:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_CSSON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (CSSON_BitNumber * 4))
  82:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of PLLON bit */
  83:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define PLLON_BitNumber           0x18
  84:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_PLLON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLON_BitNumber * 4))
  85:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of PLLI2SON bit */
  86:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define PLLI2SON_BitNumber        0x1A
  87:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_PLLI2SON_BB            (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLI2SON_BitNumber * 4))
  88:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  89:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of PLLSAION bit */
  90:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define PLLSAION_BitNumber        0x1C
  91:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_PLLSAION_BB            (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLSAION_BitNumber * 4))
  92:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  93:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* --- CFGR Register ---*/
  94:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of I2SSRC bit */
  95:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CFGR_OFFSET               (RCC_OFFSET + 0x08)
  96:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define I2SSRC_BitNumber          0x17
  97:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CFGR_I2SSRC_BB            (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (I2SSRC_BitNumber * 4))
  98:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  99:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* --- BDCR Register ---*/
 100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of RTCEN bit */
 101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDCR_OFFSET               (RCC_OFFSET + 0x70)
 102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define RTCEN_BitNumber           0x0F
 103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDCR_RTCEN_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (RTCEN_BitNumber * 4))
 104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of BDRST bit */
 105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDRST_BitNumber           0x10
 106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDCR_BDRST_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (BDRST_BitNumber * 4))
 107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* --- CSR Register ---*/
 109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of LSION bit */
 110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CSR_OFFSET                (RCC_OFFSET + 0x74)
 111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define LSION_BitNumber           0x00
 112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CSR_LSION_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (LSION_BitNumber * 4))
 113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* --- DCKCFGR Register ---*/
 115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of TIMPRE bit */
 116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define DCKCFGR_OFFSET            (RCC_OFFSET + 0x8C)
 117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define TIMPRE_BitNumber          0x18
 118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define DCKCFGR_TIMPRE_BB         (PERIPH_BB_BASE + (DCKCFGR_OFFSET * 32) + (TIMPRE_BitNumber * 4))
 119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* ---------------------- RCC registers bit mask ------------------------ */
 120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* CFGR register bit mask */
 121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CFGR_MCO2_RESET_MASK      ((uint32_t)0x07FFFFFF)
 122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CFGR_MCO1_RESET_MASK      ((uint32_t)0xF89FFFFF)
 123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* RCC Flag Mask */
 125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define FLAG_MASK                 ((uint8_t)0x1F)
 126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* CR register byte 3 (Bits[23:16]) base address */
 128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_BYTE3_ADDRESS          ((uint32_t)0x40023802)
 129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* CIR register byte 2 (Bits[15:8]) base address */
 131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CIR_BYTE2_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x01))
 132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* CIR register byte 3 (Bits[23:16]) base address */
 134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CIR_BYTE3_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x02))
 135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* BDCR register base address */
 137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDCR_ADDRESS              (PERIPH_BASE + BDCR_OFFSET)
 138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private macro -------------------------------------------------------------*/
 140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private variables ---------------------------------------------------------*/
 141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** static __I uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
 142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private function prototypes -----------------------------------------------*/
 144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private functions ---------------------------------------------------------*/
 145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Private_Functions
 147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
 148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */ 
 149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group1 Internal and external clocks, PLL, CSS and MCO configuration functions
 151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *  @brief   Internal and external clocks, PLL, CSS and MCO configuration functions 
 152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *
 153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @verbatim   
 154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===================================================================================
 155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ##### Internal and  external clocks, PLL, CSS and MCO configuration functions #####
 156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===================================================================================  
 157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     [..]
 158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       This section provide functions allowing to configure the internal/external clocks,
 159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       PLLs, CSS and MCO pins.
 160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (#) HSI (high-speed internal), 16 MHz factory-trimmed RC used directly or through
 162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           the PLL as System clock source.
 163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (#) LSI (low-speed internal), 32 KHz low consumption RC used as IWDG and/or RTC
 165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           clock source.
 166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (#) HSE (high-speed external), 4 to 26 MHz crystal oscillator used directly or
 168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           through the PLL as System clock source. Can be used also as RTC clock source.
 169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (#) LSE (low-speed external), 32 KHz oscillator used as RTC clock source.   
 171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (#) PLL (clocked by HSI or HSE), featuring two different output clocks:
 173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         (++) The first output is used to generate the high speed system clock (up to 168 MHz)
 174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         (++) The second output is used to generate the clock for the USB OTG FS (48 MHz),
 175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****              the random analog generator (<=48 MHz) and the SDIO (<= 48 MHz).
 176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (#) PLLI2S (clocked by HSI or HSE), used to generate an accurate clock to achieve 
 178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           high-quality audio performance on the I2S interface or SAI interface in case 
 179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           of STM32F429x/439x devices.
 180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      
 181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (#) PLLSAI clocked by (HSI or HSE), used to generate an accurate clock to SAI 
 182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           interface and LCD TFT controller available only for STM32F42xxx/43xxx devices.
 183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (#) CSS (Clock security system), once enable and if a HSE clock failure occurs 
 185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****          (HSE used directly or through PLL as System clock source), the System clock
 186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****          is automatically switched to HSI and an interrupt is generated if enabled. 
 187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****          The interrupt is linked to the Cortex-M4 NMI (Non-Maskable Interrupt) 
 188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****          exception vector.   
 189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (#) MCO1 (microcontroller clock output), used to output HSI, LSE, HSE or PLL
 191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           clock (through a configurable prescaler) on PA8 pin.
 192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (#) MCO2 (microcontroller clock output), used to output HSE, PLL, SYSCLK or PLLI2S
 194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           clock (through a configurable prescaler) on PC9 pin.
 195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  @endverbatim
 196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
 197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - HSI ON and used as system clock source
 203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - HSE, PLL and PLLI2S OFF
 204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - AHB, APB1 and APB2 prescaler set to 1.
 205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - CSS, MCO1 and MCO2 OFF
 206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - All interrupts disabled
 207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function doesn't modify the configuration of the
 208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - Peripheral clocks  
 209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - LSI, LSE and RTC clocks 
 210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  None
 211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_DeInit(void)
 214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
  28              		.loc 1 214 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set HSION bit */
 216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CR |= (uint32_t)0x00000001;
  33              		.loc 1 216 0
  34 0000 0F4B     		ldr	r3, .L3
 217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset CFGR register */
 219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = 0x00000000;
 220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42/43xxx devices) bits */
 222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CR &= (uint32_t)0xEAF6FFFF;
 223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset PLLCFGR register */
 225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = 0x24003010;
 226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset PLLI2SCFGR register */
 228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = 0x20003000;
 229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset PLLSAICFGR register, only available for STM32F42/43xxx devices */
 231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLSAICFGR = 0x24003000;
  35              		.loc 1 231 0
  36 0002 1048     		ldr	r0, .L3+4
 216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  37              		.loc 1 216 0
  38 0004 1A68     		ldr	r2, [r3]
 219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  39              		.loc 1 219 0
  40 0006 0021     		movs	r1, #0
 216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  41              		.loc 1 216 0
  42 0008 42F00102 		orr	r2, r2, #1
 214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set HSION bit */
  43              		.loc 1 214 0
  44 000c 30B4     		push	{r4, r5}
  45              	.LCFI0:
  46              		.cfi_def_cfa_offset 8
  47              		.cfi_offset 4, -8
  48              		.cfi_offset 5, -4
 216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  49              		.loc 1 216 0
  50 000e 1A60     		str	r2, [r3]
 219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  51              		.loc 1 219 0
  52 0010 9960     		str	r1, [r3, #8]
 222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  53              		.loc 1 222 0
  54 0012 1A68     		ldr	r2, [r3]
 225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  55              		.loc 1 225 0
  56 0014 0C4D     		ldr	r5, .L3+8
 228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  57              		.loc 1 228 0
  58 0016 0D4C     		ldr	r4, .L3+12
 222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  59              		.loc 1 222 0
  60 0018 22F0A852 		bic	r2, r2, #352321536
  61 001c 22F41022 		bic	r2, r2, #589824
  62 0020 1A60     		str	r2, [r3]
 225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  63              		.loc 1 225 0
  64 0022 5D60     		str	r5, [r3, #4]
 228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  65              		.loc 1 228 0
  66 0024 C3F88440 		str	r4, [r3, #132]
  67              		.loc 1 231 0
  68 0028 C3F88800 		str	r0, [r3, #136]
 232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  
 233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset HSEBYP bit */
 234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  69              		.loc 1 234 0
  70 002c 1A68     		ldr	r2, [r3]
  71 002e 22F48022 		bic	r2, r2, #262144
  72 0032 1A60     		str	r2, [r3]
 235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Disable all interrupts */
 237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CIR = 0x00000000;
 238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx devices */
 240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = 0x00000000; 
 241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
  73              		.loc 1 242 0
  74 0034 30BC     		pop	{r4, r5}
  75              	.LCFI1:
  76              		.cfi_restore 5
  77              		.cfi_restore 4
  78              		.cfi_def_cfa_offset 0
 237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  79              		.loc 1 237 0
  80 0036 D960     		str	r1, [r3, #12]
 240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  81              		.loc 1 240 0
  82 0038 C3F88C10 		str	r1, [r3, #140]
  83              		.loc 1 242 0
  84 003c 7047     		bx	lr
  85              	.L4:
  86 003e 00BF     		.align	2
  87              	.L3:
  88 0040 00380240 		.word	1073887232
  89 0044 00300024 		.word	603992064
  90 0048 10300024 		.word	603992080
  91 004c 00300020 		.word	536883200
  92              		.cfi_endproc
  93              	.LFE110:
  95              		.section	.text.RCC_HSEConfig,"ax",%progbits
  96              		.align	2
  97              		.global	RCC_HSEConfig
  98              		.thumb
  99              		.thumb_func
 101              	RCC_HSEConfig:
 102              	.LFB111:
 243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the External High Speed oscillator (HSE).
 246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the HSE (RCC_HSE_ON or RCC_HSE_Bypass), the application
 247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         software should wait on HSERDY flag to be set indicating that HSE clock
 248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is stable and can be used to clock the PLL and/or system clock.
 249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   HSE state can not be changed if it is used directly or through the
 250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PLL as system clock. In this case, you have to select another source
 251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of the system clock then change the HSE state (ex. disable it).
 252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The HSE is stopped by hardware when entering STOP and STANDBY modes.  
 253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function reset the CSSON bit, so if the Clock security system(CSS)
 254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         was previously enabled you have to enable it again after calling this
 255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         function.    
 256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_HSE: specifies the new state of the HSE.
 257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_OFF: turn OFF the HSE oscillator, HSERDY flag goes low after
 259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                              6 HSE oscillator clock cycles.
 260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_ON: turn ON the HSE oscillator
 261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
 262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_HSEConfig(uint8_t RCC_HSE)
 265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 103              		.loc 1 265 0
 104              		.cfi_startproc
 105              		@ args = 0, pretend = 0, frame = 0
 106              		@ frame_needed = 0, uses_anonymous_args = 0
 107              		@ link register save eliminated.
 108              	.LVL0:
 266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_HSE(RCC_HSE));
 268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
 270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 109              		.loc 1 270 0
 110 0000 024B     		ldr	r3, .L6
 111 0002 0022     		movs	r2, #0
 112 0004 1A70     		strb	r2, [r3]
 271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set the new HSE configuration -------------------------------------------*/
 273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 113              		.loc 1 273 0
 114 0006 1870     		strb	r0, [r3]
 115 0008 7047     		bx	lr
 116              	.L7:
 117 000a 00BF     		.align	2
 118              	.L6:
 119 000c 02380240 		.word	1073887234
 120              		.cfi_endproc
 121              	.LFE111:
 123              		.section	.text.RCC_WaitForHSEStartUp,"ax",%progbits
 124              		.align	2
 125              		.global	RCC_WaitForHSEStartUp
 126              		.thumb
 127              		.thumb_func
 129              	RCC_WaitForHSEStartUp:
 130              	.LFB112:
 274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Waits for HSE start-up.
 278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This functions waits on HSERDY flag to be set and return SUCCESS if 
 279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         this flag is set, otherwise returns ERROR if the timeout is reached 
 280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         and this flag is not set. The timeout value is defined by the constant
 281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         HSE_STARTUP_TIMEOUT in stm32f4xx.h file. You can tailor it depending
 282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         on the HSE crystal used in your application. 
 283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  None
 284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval An ErrorStatus enumeration value:
 285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          - SUCCESS: HSE oscillator is stable and ready to use
 286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          - ERROR: HSE oscillator not yet ready
 287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** ErrorStatus RCC_WaitForHSEStartUp(void)
 289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 131              		.loc 1 289 0
 132              		.cfi_startproc
 133              		@ args = 0, pretend = 0, frame = 8
 134              		@ frame_needed = 0, uses_anonymous_args = 0
 135              		@ link register save eliminated.
 136 0000 82B0     		sub	sp, sp, #8
 137              	.LCFI2:
 138              		.cfi_def_cfa_offset 8
 290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   __IO uint32_t startupcounter = 0;
 139              		.loc 1 290 0
 140 0002 0023     		movs	r3, #0
 141              	.LBB6:
 142              	.LBB7:
 291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ErrorStatus status = ERROR;
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   FlagStatus hsestatus = RESET;
 293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   do
 295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     startupcounter++;
 298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     status = SUCCESS;
 303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
 305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     status = ERROR;
 307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return (status);
 309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Adjusts the Internal High Speed oscillator (HSI) calibration value.
 313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The calibration is used to compensate for the variations in voltage
 314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         and temperature that influence the frequency of the internal HSI RC.
 315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  HSICalibrationValue: specifies the calibration trimming value.
 316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         This parameter must be a number between 0 and 0x1F.
 317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
 320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
 324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CR;
 326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear HSITRIM[4:0] bits */
 328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CR_HSITRIM;
 329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
 331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= (uint32_t)HSICalibrationValue << 3;
 332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CR = tmpreg;
 335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator (HSI).
 339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The HSI is stopped by hardware when entering STOP and STANDBY modes.
 340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         It is used (enabled by hardware) as system clock source after startup
 341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         from Reset, wakeup from STOP and STANDBY mode, or in case of failure
 342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of the HSE used directly or indirectly as system clock (if the Clock
 343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         Security System CSS is enabled).             
 344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   HSI can not be stopped if it is used as system clock source. In this case,
 345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         you have to select another source of the system clock then stop the HSI.  
 346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the HSI, the application software should wait on HSIRDY
 347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         flag to be set indicating that HSI clock is stable and can be used as
 348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         system clock source.  
 349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the HSI.
 350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
 352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         clock cycles.  
 353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_HSICmd(FunctionalState NewState)
 356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the External Low Speed oscillator (LSE).
 365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   As the LSE is in the Backup domain and write access is denied to
 366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         this domain after reset, you have to enable write access using 
 367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PWR_BackupAccessCmd(ENABLE) function before to configure the LSE
 368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         (to be done once after reset).  
 369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the LSE (RCC_LSE_ON or RCC_LSE_Bypass), the application
 370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         software should wait on LSERDY flag to be set indicating that LSE clock
 371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is stable and can be used to clock the RTC.
 372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_LSE: specifies the new state of the LSE.
 373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_OFF: turn OFF the LSE oscillator, LSERDY flag goes low after
 375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                              6 LSE oscillator clock cycles.
 376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_ON: turn ON the LSE oscillator
 377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
 378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_LSEConfig(uint8_t RCC_LSE)
 381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_LSE(RCC_LSE));
 384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
 386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset LSEON bit */
 387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset LSEBYP bit */
 390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
 393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   switch (RCC_LSE)
 394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case RCC_LSE_ON:
 396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       /* Set LSEON bit */
 397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case RCC_LSE_Bypass:
 400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       /* Set LSEBYP and LSEON bits */
 401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     default:
 404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Internal Low Speed oscillator (LSI).
 410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the LSI, the application software should wait on 
 411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         LSIRDY flag to be set indicating that LSI clock is stable and can
 412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         be used to clock the IWDG and/or the RTC.
 413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   LSI can not be disabled if the IWDG is running.  
 414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the LSI.
 415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
 417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         clock cycles. 
 418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_LSICmd(FunctionalState NewState)
 421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the main PLL clock source, multiplication and division factors.
 430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the main PLL is disabled.
 431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSI: HSI oscillator clock selected as PLL clock entry
 435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSE: HSE oscillator clock selected as PLL clock entry
 436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This clock source (RCC_PLLSource) is common for the main PLL and PLLI2S.  
 437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLM: specifies the division factor for PLL VCO input clock
 439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 0 and 63.
 440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLM parameter correctly to ensure that the VCO input
 441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLL jitter.
 443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLN: specifies the multiplication factor for PLL VCO output clock
 445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLN parameter correctly to ensure that the VCO
 447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLP: specifies the division factor for main system clock (SYSCLK)
 450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number in the range {2, 4, 6, or 8}.
 451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLP parameter correctly to not exceed 168 MHz on
 452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the System clock frequency.
 453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLQ: specifies the division factor for OTG FS, SDIO and RNG clocks
 455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 4 and 15.
 456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   If the USB OTG FS is used in your application, you have to set the
 457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PLLQ parameter correctly to have 48 MHz clock for the USB. However,
 458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the SDIO and RNG need a frequency lower than or equal to 48 MHz to work
 459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         correctly.
 460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PL
 464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLM_VALUE(PLLM));
 468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLN_VALUE(PLLN));
 469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLP_VALUE(PLLP));
 470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
 471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****                  (PLLQ << 24);
 474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the main PLL.
 478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the main PLL, the application software should wait on 
 479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PLLRDY flag to be set indicating that PLL clock is stable and can
 480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         be used as system clock source.
 481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The main PLL can not be disabled if it is used as system clock source
 482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
 483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
 484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLCmd(FunctionalState NewState)
 487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #if defined (STM32F40_41xxx) || defined (STM32F401xx)
 494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F405xx/407xx, STM32F415xx/417xx 
 498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         or STM32F401xx devices. 
 499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
 500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             
 504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
 509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
 517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #endif /* STM32F40_41xxx || STM32F401xx */
 525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #if defined (STM32F427_437xx) || defined (STM32F429_439xx)
 527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * 
 530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices 
 531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         
 532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             
 536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * 
 541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLI2SQ: specifies the division factor for SAI1 clock
 542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 15.
 543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                 
 544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   the PLLI2SR parameter is only available with STM32F42xxx/43xxx devices.  
 549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SQ, uint32_t PLLI2SR)
 553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SQ));
 557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SQ << 24) | (PLLI2SR << 28);
 560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #endif /* STM32F427_437xx ||  STM32F429_439xx */
 562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the PLLI2S. 
 565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
 566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
 567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLI2SCmd(FunctionalState NewState)
 570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLSAI clock multiplication and division factors.
 578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
 579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices 
 580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *        
 581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLSAI is disabled.
 582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PLLSAI clock source is common with the main PLL (configured in 
 583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             
 585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLSAIN: specifies the multiplication factor for PLLSAI VCO output clock
 586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLSAIN parameter correctly to ensure that the VCO 
 588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           
 590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLSAIQ: specifies the division factor for SAI1 clock
 591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 15.
 592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            
 593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLSAIR: specifies the division factor for LTDC clock
 594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLSAIConfig(uint32_t PLLSAIN, uint32_t PLLSAIQ, uint32_t PLLSAIR)
 599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIN_VALUE(PLLSAIN));
 602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAIR_VALUE(PLLSAIR));
 603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLSAICFGR = (PLLSAIN << 6) | (PLLSAIQ << 24) | (PLLSAIR << 28);
 605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the PLLSAI. 
 609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * 
 610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices 
 611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *       
 612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The PLLSAI is disabled by hardware when entering STOP and STANDBY modes.  
 613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the PLLSAI. This parameter can be: ENABLE or DISABLE.
 614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLSAICmd(FunctionalState NewState)
 617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLSAION_BB = (uint32_t)NewState;
 621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Clock Security System.
 625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
 626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
 627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
 628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to 
 629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
 630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the Clock Security System.
 631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         This parameter can be: ENABLE or DISABLE.
 632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
 635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Selects the clock source to output on MCO1 pin(PA8).
 643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PA8 should be configured in alternate function mode.
 644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO1Source: specifies the clock source to output.
 645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_HSI: HSI clock selected as MCO1 source
 647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_LSE: LSE clock selected as MCO1 source
 648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_HSE: HSE clock selected as MCO1 source
 649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_PLLCLK: main PLL clock selected as MCO1 source
 650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO1Div: specifies the MCO1 prescaler.
 651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_1: no division applied to MCO1 clock
 653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_2: division by 2 applied to MCO1 clock
 654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_3: division by 3 applied to MCO1 clock
 655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
 656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
 657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
 660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
 665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  
 666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
 670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= CFGR_MCO1_RESET_MASK;
 671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Select MCO1 clock source and prescaler */
 673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;  
 677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Selects the clock source to output on MCO2 pin(PC9).
 681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PC9 should be configured in alternate function mode.
 682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO2Source: specifies the clock source to output.
 683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_SYSCLK: System clock (SYSCLK) selected as MCO2 source
 685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_PLLI2SCLK: PLLI2S clock selected as MCO2 source
 686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_HSE: HSE clock selected as MCO2 source
 687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_PLLCLK: main PLL clock selected as MCO2 source
 688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO2Div: specifies the MCO2 prescaler.
 689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_1: no division applied to MCO2 clock
 691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_2: division by 2 applied to MCO2 clock
 692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_3: division by 3 applied to MCO2 clock
 693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
 694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
 695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
 698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
 703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
 704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear MCO2 and MCO2PRE[2:0] bits */
 708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= CFGR_MCO2_RESET_MASK;
 709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Select MCO2 clock source and prescaler */
 711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;  
 715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @}
 719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 720:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group2 System AHB and APB busses clocks configuration functions
 722:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *  @brief   System, AHB and APB busses clocks configuration functions
 723:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *
 724:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @verbatim   
 725:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================
 726:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       ##### System, AHB and APB busses clocks configuration functions #####
 727:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================  
 728:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     [..]
 729:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       This section provide functions allowing to configure the System, AHB, APB1 and 
 730:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       APB2 busses clocks.
 731:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 732:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (#) Several clock sources can be used to drive the System clock (SYSCLK): HSI,
 733:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           HSE and PLL.
 734:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           The AHB clock (HCLK) is derived from System clock through configurable 
 735:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           prescaler and used to clock the CPU, memory and peripherals mapped 
 736:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           on AHB bus (DMA, GPIO...). APB1 (PCLK1) and APB2 (PCLK2) clocks are derived 
 737:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           from AHB clock through configurable prescalers and used to clock 
 738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           the peripherals mapped on these busses. You can use 
 739:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           "RCC_GetClocksFreq()" function to retrieve the frequencies of these clocks.  
 740:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 741:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       -@- All the peripheral clocks are derived from the System clock (SYSCLK) except:
 742:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         (+@) I2S: the I2S clock can be derived either from a specific PLL (PLLI2S) or
 743:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****              from an external clock mapped on the I2S_CKIN pin. 
 744:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****              You have to use RCC_I2SCLKConfig() function to configure this clock. 
 745:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         (+@) RTC: the RTC clock can be derived either from the LSI, LSE or HSE clock
 746:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****              divided by 2 to 31. You have to use RCC_RTCCLKConfig() and RCC_RTCCLKCmd()
 747:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****              functions to configure this clock. 
 748:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         (+@) USB OTG FS, SDIO and RTC: USB OTG FS require a frequency equal to 48 MHz
 749:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****              to work correctly, while the SDIO require a frequency equal or lower than
 750:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****              to 48. This clock is derived of the main PLL through PLLQ divider.
 751:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         (+@) IWDG clock which is always the LSI clock.
 752:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        
 753:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (#) For STM32F405xx/407xx and STM32F415xx/417xx devices, the maximum frequency 
 754:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****          of the SYSCLK and HCLK is 168 MHz, PCLK2 84 MHz and PCLK1 42 MHz. Depending 
 755:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****          on the device voltage range, the maximum frequency should be adapted accordingly:
 756:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+     
 757:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 758:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|     
 759:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 760:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 761:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|           
 762:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
 763:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 764:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  | 
 765:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 766:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
 767:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 768:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |66 < HCLK <= 88  |60 < HCLK <= 80  |
 769:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 770:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|120< HCLK <= 150|96 < HCLK <= 120|88 < HCLK <= 110 |80 < HCLK <= 100 |
 771:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 772:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |5WS(6CPU cycle)|150< HCLK <= 168|120< HCLK <= 144|110 < HCLK <= 132|100 < HCLK <= 120| 
 773:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 774:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |6WS(7CPU cycle)|      NA        |144< HCLK <= 168|132 < HCLK <= 154|120 < HCLK <= 140| 
 775:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 776:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |7WS(8CPU cycle)|      NA        |      NA        |154 < HCLK <= 168|140 < HCLK <= 160|
 777:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  +---------------|----------------|----------------|-----------------|-----------------+ 
 778:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (#) For STM32F42xxx/43xxx devices, the maximum frequency of the SYSCLK and HCLK is 180 MHz, 
 779:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           PCLK2 90 MHz and PCLK1 45 MHz. Depending on the device voltage range, the maximum 
 780:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           frequency should be adapted accordingly:
 781:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+     
 782:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 783:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|     
 784:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 785:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 786:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|           
 787:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
 788:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 789:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  | 
 790:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 791:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
 792:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 793:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |66 < HCLK <= 88  |60 < HCLK <= 80  |
 794:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 795:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|120< HCLK <= 150|96 < HCLK <= 120|88 < HCLK <= 110 |80 < HCLK <= 100 |
 796:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 797:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |5WS(6CPU cycle)|120< HCLK <= 180|120< HCLK <= 144|110 < HCLK <= 132|100 < HCLK <= 120| 
 798:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 799:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |6WS(7CPU cycle)|      NA        |144< HCLK <= 168|132 < HCLK <= 154|120 < HCLK <= 140| 
 800:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 801:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |7WS(8CPU cycle)|      NA        |168< HCLK <= 180|154 < HCLK <= 176|140 < HCLK <= 160|
 802:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 803:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |8WS(9CPU cycle)|      NA        |      NA        |176 < HCLK <= 180|160 < HCLK <= 168|
 804:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+
 805:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****    
 806:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (#) For STM32F401xx devices, the maximum frequency of the SYSCLK and HCLK is 84 MHz, 
 807:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           PCLK2 84 MHz and PCLK1 42 MHz. Depending on the device voltage range, the maximum 
 808:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           frequency should be adapted accordingly:
 809:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+     
 810:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 811:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|     
 812:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 813:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 814:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|           
 815:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 22   |0 < HCLK <= 20   |
 816:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 817:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |22 < HCLK <= 44  |20 < HCLK <= 40  | 
 818:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 819:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 84 |48 < HCLK <= 72 |44 < HCLK <= 66  |40 < HCLK <= 60  |
 820:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 821:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|      NA        |72 < HCLK <= 84 |66 < HCLK <= 84  |60 < HCLK <= 80  |
 822:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 823:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|      NA        |      NA        |      NA         |80 < HCLK <= 84  | 
 824:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+ 
 825:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 826:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       -@- On STM32F405xx/407xx and STM32F415xx/417xx devices: 
 827:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****            (++) when VOS = '0', the maximum value of fHCLK = 144MHz. 
 828:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****            (++) when VOS = '1', the maximum value of fHCLK = 168MHz. 
 829:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           [..] 
 830:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           On STM32F42xxx/43xxx devices:
 831:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x01', the maximum value of fHCLK is 120MHz.
 832:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x10', the maximum value of fHCLK is 144MHz.
 833:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x11', the maximum value of f  is 168MHz 
 834:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           [..]  
 835:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           On STM32F401x devices:
 836:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x01', the maximum value of fHCLK is 64MHz.
 837:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****            (++) when VOS[1:0] = '0x10', the maximum value of fHCLK is 84MHz.
 838:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****            You can use PWR_MainRegulatorModeConfig() function to control VOS bits.
 839:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 840:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @endverbatim
 841:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
 842:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 843:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 844:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 845:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the system clock (SYSCLK).
 846:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
 847:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         startup from Reset, wake-up from STOP and STANDBY mode, or in case
 848:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of failure of the HSE used directly or indirectly as system clock
 849:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         (if the Clock Security System CSS is enabled).
 850:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   A switch from one clock source to another occurs only if the target
 851:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         clock source is ready (clock stable after startup delay or PLL locked). 
 852:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         If a clock source which is not yet ready is selected, the switch will
 853:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         occur when the clock source will be ready. 
 854:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         You can use RCC_GetSYSCLKSource() function to know which clock is
 855:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         currently used as system clock source. 
 856:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_SYSCLKSource: specifies the clock source used as system clock.
 857:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 858:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSI:    HSI selected as system clock source
 859:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
 860:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
 861:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 862:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 863:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
 864:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 865:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 866:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 867:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 868:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
 869:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 870:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 871:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 872:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear SW[1:0] bits */
 873:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_SW;
 874:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 875:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
 876:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SYSCLKSource;
 877:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 878:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 879:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 880:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 881:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 882:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 883:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Returns the clock source used as system clock.
 884:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  None
 885:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval The clock source used as system clock. The returned value can be one
 886:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of the following:
 887:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *              - 0x00: HSI used as system clock
 888:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *              - 0x04: HSE used as system clock
 889:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *              - 0x08: PLL used as system clock
 890:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 891:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** uint8_t RCC_GetSYSCLKSource(void)
 892:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 893:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 894:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 895:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 896:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 897:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the AHB clock (HCLK).
 898:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Depending on the device voltage range, the software has to set correctly
 899:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         these bits to ensure that HCLK not exceed the maximum allowed frequency
 900:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         (for more details refer to section above
 901:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           "CPU, AHB and APB busses clocks configuration functions")
 902:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_SYSCLK: defines the AHB clock divider. This clock is derived from 
 903:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the system clock (SYSCLK).
 904:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 905:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div1: AHB clock = SYSCLK
 906:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div2: AHB clock = SYSCLK/2
 907:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div4: AHB clock = SYSCLK/4
 908:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div8: AHB clock = SYSCLK/8
 909:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div16: AHB clock = SYSCLK/16
 910:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div64: AHB clock = SYSCLK/64
 911:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div128: AHB clock = SYSCLK/128
 912:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
 913:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
 914:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 915:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 916:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
 917:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 918:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 919:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 920:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 921:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_HCLK(RCC_SYSCLK));
 922:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 923:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 924:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 925:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear HPRE[3:0] bits */
 926:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_HPRE;
 927:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 928:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
 929:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SYSCLK;
 930:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 931:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 932:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 933:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 934:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 935:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 936:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 937:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the Low Speed APB clock (PCLK1).
 938:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_HCLK: defines the APB1 clock divider. This clock is derived from 
 939:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the AHB clock (HCLK).
 940:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 941:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div1:  APB1 clock = HCLK
 942:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div2:  APB1 clock = HCLK/2
 943:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div4:  APB1 clock = HCLK/4
 944:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
 945:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
 946:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 947:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 948:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PCLK1Config(uint32_t RCC_HCLK)
 949:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 950:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 951:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 952:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 953:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 954:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 955:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 956:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 957:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear PPRE1[2:0] bits */
 958:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE1;
 959:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 960:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set PPRE1[2:0] bits according to RCC_HCLK value */
 961:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_HCLK;
 962:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 963:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 964:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 965:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 966:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 967:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 968:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the High Speed APB clock (PCLK2).
 969:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_HCLK: defines the APB2 clock divider. This clock is derived from 
 970:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the AHB clock (HCLK).
 971:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 972:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div1:  APB2 clock = HCLK
 973:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div2:  APB2 clock = HCLK/2
 974:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div4:  APB2 clock = HCLK/4
 975:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
 976:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
 977:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 978:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 979:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PCLK2Config(uint32_t RCC_HCLK)
 980:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 981:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 982:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 983:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 984:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 985:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 986:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 987:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 988:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear PPRE2[2:0] bits */
 989:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE2;
 990:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 991:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set PPRE2[2:0] bits according to RCC_HCLK value */
 992:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_HCLK << 3;
 993:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 994:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 995:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 996:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 997:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 998:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 999:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Returns the frequencies of different on chip clocks; SYSCLK, HCLK, 
1000:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PCLK1 and PCLK2.       
1001:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * 
1002:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The system frequency computed by this function is not the real 
1003:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         frequency in the chip. It is calculated based on the predefined 
1004:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         constant and the selected clock source:
1005:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(*)
1006:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is HSE, function returns values based on HSE_VALUE(**)
1007:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is PLL, function returns values based on HSE_VALUE(**) 
1008:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           or HSI_VALUE(*) multiplied/divided by the PLL factors.         
1009:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     (*) HSI_VALUE is a constant defined in stm32f4xx.h file (default value
1010:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *               16 MHz) but the real value may vary depending on the variations
1011:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *               in voltage and temperature.
1012:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     (**) HSE_VALUE is a constant defined in stm32f4xx.h file (default value
1013:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                25 MHz), user has to ensure that HSE_VALUE is same as the real
1014:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                frequency of the crystal used. Otherwise, this function may
1015:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                have wrong result.
1016:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                
1017:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The result of this function could be not correct when using fractional
1018:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         value for HSE crystal.
1019:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
1020:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
1021:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          the clocks frequencies.
1022:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *     
1023:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function can be used by the user application to compute the 
1024:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         baudrate for the communication peripherals or configure other parameters.
1025:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Each time SYSCLK, HCLK, PCLK1 and/or PCLK2 clock changes, this function
1026:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         must be called to update the structure's field. Otherwise, any
1027:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         configuration based on this function will be incorrect.
1028:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
1029:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1030:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1031:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
1032:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1033:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
1034:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1035:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
1036:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
1037:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1038:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   switch (tmp)
1039:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1040:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case 0x00:  /* HSI used as system clock source */
1041:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
1042:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
1043:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case 0x04:  /* HSE used as system clock  source */
1044:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
1045:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
1046:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case 0x08:  /* PLL used as system clock  source */
1047:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1048:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
1049:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****          SYSCLK = PLL_VCO / PLLP
1050:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****          */    
1051:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
1052:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
1053:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       
1054:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       if (pllsource != 0)
1055:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       {
1056:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         /* HSE used as PLL clock source */
1057:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
1058:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       }
1059:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       else
1060:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       {
1061:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         /* HSI used as PLL clock source */
1062:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
1063:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       }
1064:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1065:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
1066:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
1067:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
1068:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     default:
1069:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
1070:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
1071:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1072:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
1073:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1074:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get HCLK prescaler */
1075:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_HPRE;
1076:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = tmp >> 4;
1077:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
1078:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* HCLK clock frequency */
1079:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
1080:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1081:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get PCLK1 prescaler */
1082:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE1;
1083:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = tmp >> 10;
1084:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
1085:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* PCLK1 clock frequency */
1086:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
1087:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1088:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get PCLK2 prescaler */
1089:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE2;
1090:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = tmp >> 13;
1091:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
1092:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* PCLK2 clock frequency */
1093:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
1094:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1095:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1096:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1097:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @}
1098:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1099:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group3 Peripheral clocks configuration functions
1101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *  @brief   Peripheral clocks configuration functions 
1102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *
1103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @verbatim   
1104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================
1105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****               ##### Peripheral clocks configuration functions #####
1106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================  
1107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     [..] This section provide functions allowing to configure the Peripheral clocks. 
1108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
1109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (#) The RTC clock which is derived from the LSI, LSE or HSE clock divided 
1110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           by 2 to 31.
1111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      
1112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (#) After restart from Reset or wakeup from STANDBY, all peripherals are off
1113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           except internal SRAM, Flash and JTAG. Before to start using a peripheral 
1114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           you have to enable its interface clock. You can do this using 
1115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           RCC_AHBPeriphClockCmd(), RCC_APB2PeriphClockCmd() and RCC_APB1PeriphClockCmd() functions.
1116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (#) To reset the peripherals configuration (to the default state after device reset)
1118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           you can use RCC_AHBPeriphResetCmd(), RCC_APB2PeriphResetCmd() and 
1119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           RCC_APB1PeriphResetCmd() functions.
1120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      
1121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       (#) To further reduce power consumption in SLEEP mode the peripheral clocks 
1122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           can be disabled prior to executing the WFI or WFE instructions. 
1123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           You can do this using RCC_AHBPeriphClockLPModeCmd(), 
1124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           RCC_APB2PeriphClockLPModeCmd() and RCC_APB1PeriphClockLPModeCmd() functions.  
1125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @endverbatim
1127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
1128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the RTC clock (RTCCLK).
1132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   As the RTC clock configuration bits are in the Backup domain and write
1133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         access is denied to this domain after reset, you have to enable write
1134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         access using PWR_BackupAccessCmd(ENABLE) function before to configure
1135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the RTC clock source (to be done once after reset).    
1136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Once the RTC clock is configured it can't be changed unless the  
1137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         Backup domain is reset using RCC_BackupResetCmd() function, or by
1138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         a Power On Reset (POR).
1139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
1140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_RTCCLKSource: specifies the RTC clock source.
1141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSE: LSE selected as RTC clock
1143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
1144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_HSE_Divx: HSE clock divided by x selected
1145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                                            as RTC clock, where x:[2,31]
1146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
1147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   If the LSE or LSI is used as RTC clock source, the RTC continues to
1148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         work in STOP and STANDBY modes, and can be used as wakeup source.
1149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         However, when the HSE clock is used as RTC clock source, the RTC
1150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         cannot be used in STOP and STANDBY modes.    
1151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The maximum input clock frequency for RTC is 1MHz (when using HSE as
1152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         RTC clock source).
1153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
1154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
1157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
1162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
1164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
1165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     tmpreg = RCC->CFGR;
1166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Clear RTCPRE[4:0] bits */
1168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     tmpreg &= ~RCC_CFGR_RTCPRE;
1169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Configure HSE division factor for RTC clock */
1171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
1172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Store the new value */
1174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->CFGR = tmpreg;
1175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     
1177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Select the RTC clock source */
1178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
1179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the RTC clock.
1183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be used only after the RTC clock source was selected
1184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using the RCC_RTCCLKConfig function.
1185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
1186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_RTCCLKCmd(FunctionalState NewState)
1189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
1194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases the Backup domain reset.
1198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function resets the RTC peripheral (including the backup registers)
1199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         and the RTC clock source selection in RCC_CSR register.
1200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The BKPSRAM is not affected by this reset.    
1201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the Backup domain reset.
1202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_BackupResetCmd(FunctionalState NewState)
1206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
1210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the I2S clock source (I2SCLK).
1214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the I2S APB clock.
1215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_I2SCLKSource: specifies the I2S clock source.
1216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2S2CLKSource_PLLI2S: PLLI2S clock used as I2S clock source
1218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
1219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                                        used as I2S clock source
1220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
1223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));
1226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
1228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the SAI clock Divider coming from PLLI2S.
1232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * 
1233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
1235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the PLLI2S.
1236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *              
1237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLI2SDivQ: specifies the PLLI2S division factor for SAI1 clock .
1238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 1 and 32.
1239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          SAI1 clock frequency = f(PLLI2S_Q) / RCC_PLLI2SDivQ 
1240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *              
1241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_SAIPLLI2SClkDivConfig(uint32_t RCC_PLLI2SDivQ)  
1244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
1247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(RCC_PLLI2SDivQ));
1249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
1250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear PLLI2SDIVQ[4:0] bits */
1253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~(RCC_DCKCFGR_PLLI2SDIVQ);
1254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set PLLI2SDIVQ values */
1256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= (RCC_PLLI2SDivQ - 1);
1257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
1259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
1260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the SAI clock Divider coming from PLLSAI.
1264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * 
1265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *        
1267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the PLLSAI.
1268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
1269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLSAIDivQ: specifies the PLLSAI division factor for SAI1 clock .
1270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 1 and 32.
1271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          SAI1 clock frequency = f(PLLSAI_Q) / RCC_PLLSAIDivQ  
1272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *              
1273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_SAIPLLSAIClkDivConfig(uint32_t RCC_PLLSAIDivQ)  
1276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
1279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(RCC_PLLSAIDivQ));
1281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
1282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear PLLI2SDIVQ[4:0] and PLLSAIDIVQ[4:0] bits */
1285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~(RCC_DCKCFGR_PLLSAIDIVQ);
1286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set PLLSAIDIVQ values */
1288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= ((RCC_PLLSAIDivQ - 1) << 8);
1289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
1291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
1292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures SAI1BlockA clock source selection.
1296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * 
1297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *       
1299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling PLLSAI, PLLI2S and  
1300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the SAI clock.
1301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_SAIBlockACLKSource: specifies the SAI Block A clock source.
1302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_PLLI2S: PLLI2S_Q clock divided by PLLI2SDIVQ used 
1304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                                           as SAI1 Block A clock 
1305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_PLLSAI: PLLISAI_Q clock divided by PLLSAIDIVQ used 
1306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                                           as SAI1 Block A clock 
1307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIACLKSource_Ext: External clock mapped on the I2S_CKIN pin
1308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                                        used as SAI1 Block A clock
1309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_SAIBlockACLKConfig(uint32_t RCC_SAIBlockACLKSource)
1312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
1315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAIACLK_SOURCE(RCC_SAIBlockACLKSource));
1317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
1318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear RCC_DCKCFGR_SAI1ASRC[1:0] bits */
1321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_SAI1ASRC;
1322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set SAI Block A source selection value */
1324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SAIBlockACLKSource;
1325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
1327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
1328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures SAI1BlockB clock source selection.
1332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * 
1333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx devices.
1334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *       
1335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling PLLSAI, PLLI2S and  
1336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the SAI clock.
1337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_SAIBlockBCLKSource: specifies the SAI Block B clock source.
1338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_PLLI2S: PLLI2S_Q clock divided by PLLI2SDIVQ used 
1340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                                           as SAI1 Block B clock 
1341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_PLLSAI: PLLISAI_Q clock divided by PLLSAIDIVQ used 
1342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                                           as SAI1 Block B clock 
1343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SAIBCLKSource_Ext: External clock mapped on the I2S_CKIN pin
1344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                                        used as SAI1 Block B clock
1345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_SAIBlockBCLKConfig(uint32_t RCC_SAIBlockBCLKSource)
1348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
1351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SAIBCLK_SOURCE(RCC_SAIBlockBCLKSource));
1353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
1354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear RCC_DCKCFGR_SAI1BSRC[1:0] bits */
1357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_SAI1BSRC;
1358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set SAI Block B source selection value */
1360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SAIBlockBCLKSource;
1361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
1363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
1364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the LTDC clock Divider coming from PLLSAI.
1369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * 
1370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The LTDC peripheral is only available with STM32F429xx/439xx Devices.
1371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *      
1372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the PLLSAI.
1373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
1374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLSAIDivR: specifies the PLLSAI division factor for LTDC clock .
1375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 16.
1376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          LTDC clock frequency = f(PLLSAI_R) / RCC_PLLSAIDivR  
1377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            
1378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_LTDCCLKDivConfig(uint32_t RCC_PLLSAIDivR)
1381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
1383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
1384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLSAI_DIVR_VALUE(RCC_PLLSAIDivR));
1386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
1387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->DCKCFGR;
1388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear PLLSAIDIVR[2:0] bits */
1390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_DCKCFGR_PLLSAIDIVR;
1391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set PLLSAIDIVR values */
1393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_PLLSAIDivR;
1394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
1396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->DCKCFGR = tmpreg;
1397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the Timers clocks prescalers selection.
1401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * 
1402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function can be used only for STM32F42xxx/43xxx and STM32F401xx devices. 
1403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
1404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_TIMCLKPrescaler : specifies the Timers clocks prescalers selection
1405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         This parameter can be one of the following values:
1406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_TIMPrescDesactivated: The Timers kernels clocks prescaler is 
1407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                 equal to HPRE if PPREx is corresponding to division by 1 or 2, 
1408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                 else it is equal to [(HPRE * PPREx) / 2] if PPREx is corresponding to 
1409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                 division by 4 or more.
1410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                   
1411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_TIMPrescActivated: The Timers kernels clocks prescaler is 
1412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                 equal to HPRE if PPREx is corresponding to division by 1, 2 or 4, 
1413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                 else it is equal to [(HPRE * PPREx) / 4] if PPREx is corresponding 
1414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                 to division by 8 or more.
1415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_TIMCLKPresConfig(uint32_t RCC_TIMCLKPrescaler)
1418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_TIMCLK_PRESCALER(RCC_TIMCLKPrescaler));
1421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) DCKCFGR_TIMPRE_BB = RCC_TIMCLKPrescaler;
1423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
1424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 peripheral clock.
1428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it.   
1431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
1432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
1434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
1435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
1436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
1437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
1438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
1439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
1442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOJ:       GPIOJ clock (STM32F42xxx/43xxx devices) 
1443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOK:       GPIOK clock (STM32F42xxx/43xxx devices)  
1444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:         CRC clock
1445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
1446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CCMDATARAMEN CCM data RAM interface clock
1447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
1448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
1449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2D:       DMA2D clock (STM32F429xx/439xx devices)  
1450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
1451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
1452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
1453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
1454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
1455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
1456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
1464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1ENR |= RCC_AHB1Periph;
1469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1ENR &= ~RCC_AHB1Periph;
1473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB2 peripheral clock.
1478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it. 
1481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
1482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
1488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2ENR |= RCC_AHB2Periph;
1501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2ENR &= ~RCC_AHB2Periph;
1505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB3 peripheral clock.
1510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it. 
1513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
1514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                                  or RCC_AHB3Periph_FMC (STM32F42xxx/43xxx devices)  
1516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
1524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3ENR |= RCC_AHB3Periph;
1529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3ENR &= ~RCC_AHB3Periph;
1533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
1538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it. 
1541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
1544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
1545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
1546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
1547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
1548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
1549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
1550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
1551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
1552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
1553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
1554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
1555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
1556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
1557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
1558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
1559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
1560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
1561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
1562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
1563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
1564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
1565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
1566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART7:  UART7 clock
1567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART8:  UART8 clock
1568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
1576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1ENR |= RCC_APB1Periph;
1581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1ENR &= ~RCC_APB1Periph;
1585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
1590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it.
1593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
1596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
1597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
1598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
1599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
1600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
1601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
1602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
1603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
1604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI4:   SPI4 clock
1605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
1607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
1608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
1609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI5:   SPI5 clock
1610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI6:   SPI6 clock
1611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI1:   SAI1 clock (STM32F42xxx/43xxx devices) 
1612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_LTDC:   LTDC clock (STM32F429xx/439xx devices) 
1613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2ENR |= RCC_APB2Periph;
1626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2ENR &= ~RCC_APB2Periph;
1630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB1 peripheral reset.
1635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB1Periph: specifies the AHB1 peripheral to reset.
1636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:   GPIOA clock
1638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:   GPIOB clock 
1639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:   GPIOC clock
1640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:   GPIOD clock
1641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:   GPIOE clock
1642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:   GPIOF clock
1643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
1644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
1645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:   GPIOI clock
1646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOJ:   GPIOJ clock (STM32F42xxx/43xxx devices) 
1647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOK:   GPIOK clock (STM32F42xxx/43xxxdevices)   
1648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:     CRC clock
1649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:    DMA1 clock
1650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:    DMA2 clock
1651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2D:   DMA2D clock (STM32F429xx/439xx devices)   
1652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC: Ethernet MAC clock
1653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:  USB OTG HS clock
1654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                  
1655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
1663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1RSTR |= RCC_AHB1Periph;
1668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1RSTR &= ~RCC_AHB1Periph;
1672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB2 peripheral reset.
1677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB2Periph: specifies the AHB2 peripheral to reset.
1678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
1684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2RSTR |= RCC_AHB2Periph;
1697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2RSTR &= ~RCC_AHB2Periph;
1701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB3 peripheral reset.
1706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB3Periph: specifies the AHB3 peripheral to reset.
1707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                                  or RCC_AHB3Periph_FMC (STM32F42xxx/43xxx devices)  
1709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
1717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1720:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3RSTR |= RCC_AHB3Periph;
1722:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1723:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1724:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1725:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3RSTR &= ~RCC_AHB3Periph;
1726:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1727:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1728:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1729:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1730:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases Low Speed APB (APB1) peripheral reset.
1731:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to reset.
1732:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1733:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
1734:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
1735:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
1736:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
1737:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
1738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
1739:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
1740:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
1741:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
1742:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
1743:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
1744:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
1745:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
1746:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
1747:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
1748:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
1749:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
1750:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
1751:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
1752:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
1753:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
1754:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
1755:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
1756:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART7:  UART7 clock
1757:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART8:  UART8 clock  
1758:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1759:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1760:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1761:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1762:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1763:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1764:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1765:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1766:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1767:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1768:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1769:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1RSTR |= RCC_APB1Periph;
1770:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1771:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1772:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1773:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1RSTR &= ~RCC_APB1Periph;
1774:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1775:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1776:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1777:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1778:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases High Speed APB (APB2) peripheral reset.
1779:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to reset.
1780:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1781:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
1782:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
1783:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
1784:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
1785:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
1786:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
1787:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
1788:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
1789:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
1790:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI4:   SPI4 clock  
1791:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1792:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
1793:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
1794:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
1795:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI5:   SPI5 clock
1796:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI6:   SPI6 clock
1797:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI1:   SAI1 clock (STM32F42xxx/43xxx devices) 
1798:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_LTDC:   LTDC clock (STM32F429xx/439xx devices)   
1799:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1800:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1801:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1802:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1803:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1804:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1805:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1806:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
1807:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1808:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1809:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1810:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2RSTR |= RCC_APB2Periph;
1811:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1812:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1813:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1814:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2RSTR &= ~RCC_APB2Periph;
1815:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1816:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1817:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1818:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1819:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 peripheral clock during Low Power (Sleep) mode.
1820:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1821:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         power consumption.
1822:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1823:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1824:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
1825:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1826:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
1827:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
1828:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
1829:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
1830:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
1831:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
1832:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1833:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1834:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
1835:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOJ:       GPIOJ clock (STM32F42xxx/43xxx devices) 
1836:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOK:       GPIOK clock (STM32F42xxx/43xxx devices)   
1837:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:         CRC clock
1838:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
1839:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
1840:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
1841:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2D:       DMA2D clock (STM32F429xx/439xx devices) 
1842:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
1843:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
1844:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
1845:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
1846:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
1847:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
1848:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1849:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1850:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1851:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1852:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1853:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1854:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1855:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
1856:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1857:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1858:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1859:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1LPENR |= RCC_AHB1Periph;
1860:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1861:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1862:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1863:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1LPENR &= ~RCC_AHB1Periph;
1864:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1865:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1866:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1867:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1868:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB2 peripheral clock during Low Power (Sleep) mode.
1869:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1870:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           power consumption.
1871:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1872:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1873:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
1874:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1875:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1876:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1877:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1878:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1879:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock  
1880:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1881:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1882:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1883:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1884:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1885:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1886:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1887:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1888:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1889:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1890:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1891:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2LPENR |= RCC_AHB2Periph;
1892:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1893:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1894:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1895:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2LPENR &= ~RCC_AHB2Periph;
1896:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1897:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1898:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1899:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1900:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB3 peripheral clock during Low Power (Sleep) mode.
1901:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1902:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         power consumption.
1903:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1904:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1905:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
1906:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1907:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                                  or RCC_AHB3Periph_FMC (STM32F429x/439x devices) 
1908:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1909:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1910:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1911:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1912:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1913:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1914:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1915:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
1916:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1917:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1918:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1919:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3LPENR |= RCC_AHB3Periph;
1920:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1921:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1922:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1923:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3LPENR &= ~RCC_AHB3Periph;
1924:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1925:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1926:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1927:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1928:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the APB1 peripheral clock during Low Power (Sleep) mode.
1929:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1930:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         power consumption.
1931:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1932:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1933:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1934:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1935:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
1936:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
1937:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
1938:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
1939:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
1940:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
1941:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
1942:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
1943:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
1944:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
1945:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
1946:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
1947:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
1948:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
1949:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
1950:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
1951:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
1952:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
1953:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
1954:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
1955:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
1956:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
1957:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
1958:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART7:  UART7 clock
1959:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART8:  UART8 clock
1960:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1961:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1962:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1963:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1964:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1965:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
1966:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1967:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1968:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1969:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
1970:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1971:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1LPENR |= RCC_APB1Periph;
1972:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1973:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1974:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1975:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1LPENR &= ~RCC_APB1Periph;
1976:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1977:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
1978:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1979:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1980:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the APB2 peripheral clock during Low Power (Sleep) mode.
1981:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1982:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         power consumption.
1983:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1984:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1985:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1986:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1987:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
1988:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
1989:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
1990:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
1991:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
1992:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
1993:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
1994:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
1995:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
1996:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI4:   SPI4 clock
1997:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1998:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
1999:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
2000:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
2001:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI5:   SPI5 clock
2002:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI6:   SPI6 clock
2003:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SAI1:   SAI1 clock (STM32F42xxx/43xxx devices) 
2004:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_LTDC:   LTDC clock (STM32F429xx/439xx devices)   
2005:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
2006:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2007:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
2008:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
2009:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
2010:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
2011:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2012:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
2013:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2014:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
2015:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2016:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2LPENR |= RCC_APB2Periph;
2017:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2018:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
2019:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2020:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2LPENR &= ~RCC_APB2Periph;
2021:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2022:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
2023:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2024:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
2025:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @}
2026:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
2027:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2028:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group4 Interrupts and flags management functions
2029:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *  @brief   Interrupts and flags management functions 
2030:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *
2031:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @verbatim   
2032:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================
2033:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****                 ##### Interrupts and flags management functions #####
2034:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================  
2035:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2036:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @endverbatim
2037:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
2038:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
2039:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2040:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
2041:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the specified RCC interrupts.
2042:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt sources to be enabled or disabled.
2043:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2044:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
2045:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
2046:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
2047:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
2048:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
2049:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt
2050:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx devices)
2051:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified RCC interrupts.
2052:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
2053:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
2054:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
2055:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
2056:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
2057:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2058:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_IT(RCC_IT));
2059:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2060:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
2061:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2062:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
2063:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
2064:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2065:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
2066:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2067:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
2068:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
2069:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2070:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
2071:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2072:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
2073:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Checks whether the specified RCC flag is set or not.
2074:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_FLAG: specifies the flag to check.
2075:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2076:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
2077:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
2078:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLRDY: main PLL clock ready
2079:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLI2SRDY: PLLI2S clock ready
2080:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLSAIRDY: PLLSAI clock ready (only for STM32F42xxx/43xxx devices)
2081:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
2082:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
2083:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_BORRST: POR/PDR or BOR reset
2084:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PINRST: Pin reset
2085:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PORRST: POR/PDR reset
2086:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_SFTRST: Software reset
2087:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
2088:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
2089:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LPWRRST: Low Power reset
2090:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval The new state of RCC_FLAG (SET or RESET).
2091:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
2092:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
2093:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
2094:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmp = 0;
2095:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t statusreg = 0;
2096:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   FlagStatus bitstatus = RESET;
2097:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2098:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2099:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_FLAG(RCC_FLAG));
2100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get the RCC register index */
2102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC_FLAG >> 5;
2103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (tmp == 1)               /* The flag to check is in CR register */
2104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     statusreg = RCC->CR;
 143              		.loc 1 2105 0
 144 0004 0A4A     		ldr	r2, .L19
 145              	.LBE7:
 146              	.LBE6:
 290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   __IO uint32_t startupcounter = 0;
 147              		.loc 1 290 0
 148 0006 0193     		str	r3, [sp, #4]
 149              	.LVL1:
 150 0008 02E0     		b	.L12
 151              	.LVL2:
 152              	.L18:
 298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 153              		.loc 1 298 0
 154 000a B3F5A04F 		cmp	r3, #20480
 155 000e 08D0     		beq	.L11
 156              	.LVL3:
 157              	.L12:
 158              	.LBB10:
 159              	.LBB8:
 160              		.loc 1 2105 0 discriminator 2
 161 0010 1368     		ldr	r3, [r2]
 162              	.LVL4:
2106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else if (tmp == 2)          /* The flag to check is in BDCR register */
2108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     statusreg = RCC->BDCR;
2110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else                       /* The flag to check is in CSR register */
2112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     statusreg = RCC->CSR;
2114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get the flag position */
2117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC_FLAG & FLAG_MASK;
2118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 163              		.loc 1 2118 0 discriminator 2
 164 0012 13F4003F 		tst	r3, #131072
 165              	.LBE8:
 166              	.LBE10:
 297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 167              		.loc 1 297 0 discriminator 2
 168 0016 019B     		ldr	r3, [sp, #4]
 169              	.LVL5:
 170 0018 03F10103 		add	r3, r3, #1
 171 001c 0193     		str	r3, [sp, #4]
 298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 172              		.loc 1 298 0 discriminator 2
 173 001e 019B     		ldr	r3, [sp, #4]
 174              	.LBB11:
 175              	.LBB9:
 176              		.loc 1 2118 0 discriminator 2
 177 0020 F3D0     		beq	.L18
 178              	.L11:
 179              	.LVL6:
 180              	.LBE9:
 181              	.LBE11:
 182              	.LBB12:
 183              	.LBB13:
2105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 184              		.loc 1 2105 0
 185 0022 034B     		ldr	r3, .L19
 186 0024 1868     		ldr	r0, [r3]
 187              	.LVL7:
 188              	.LBE13:
 189              	.LBE12:
 308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 190              		.loc 1 308 0
 191 0026 C0F34040 		ubfx	r0, r0, #17, #1
 192              	.LVL8:
 309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 193              		.loc 1 309 0
 194 002a 02B0     		add	sp, sp, #8
 195              	.LCFI3:
 196              		.cfi_def_cfa_offset 0
 197              		@ sp needed
 198 002c 7047     		bx	lr
 199              	.L20:
 200 002e 00BF     		.align	2
 201              	.L19:
 202 0030 00380240 		.word	1073887232
 203              		.cfi_endproc
 204              	.LFE112:
 206              		.section	.text.RCC_AdjustHSICalibrationValue,"ax",%progbits
 207              		.align	2
 208              		.global	RCC_AdjustHSICalibrationValue
 209              		.thumb
 210              		.thumb_func
 212              	RCC_AdjustHSICalibrationValue:
 213              	.LFB113:
 320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 214              		.loc 1 320 0
 215              		.cfi_startproc
 216              		@ args = 0, pretend = 0, frame = 0
 217              		@ frame_needed = 0, uses_anonymous_args = 0
 218              		@ link register save eliminated.
 219              	.LVL9:
 325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 220              		.loc 1 325 0
 221 0000 034A     		ldr	r2, .L22
 222 0002 1368     		ldr	r3, [r2]
 223              	.LVL10:
 328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 224              		.loc 1 328 0
 225 0004 23F0F803 		bic	r3, r3, #248
 226              	.LVL11:
 331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 227              		.loc 1 331 0
 228 0008 43EAC000 		orr	r0, r3, r0, lsl #3
 229              	.LVL12:
 334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 230              		.loc 1 334 0
 231 000c 1060     		str	r0, [r2]
 232 000e 7047     		bx	lr
 233              	.L23:
 234              		.align	2
 235              	.L22:
 236 0010 00380240 		.word	1073887232
 237              		.cfi_endproc
 238              	.LFE113:
 240              		.section	.text.RCC_HSICmd,"ax",%progbits
 241              		.align	2
 242              		.global	RCC_HSICmd
 243              		.thumb
 244              		.thumb_func
 246              	RCC_HSICmd:
 247              	.LFB114:
 356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 248              		.loc 1 356 0
 249              		.cfi_startproc
 250              		@ args = 0, pretend = 0, frame = 0
 251              		@ frame_needed = 0, uses_anonymous_args = 0
 252              		@ link register save eliminated.
 253              	.LVL13:
 360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 254              		.loc 1 360 0
 255 0000 014B     		ldr	r3, .L25
 256 0002 1860     		str	r0, [r3]
 257 0004 7047     		bx	lr
 258              	.L26:
 259 0006 00BF     		.align	2
 260              	.L25:
 261 0008 00004742 		.word	1111949312
 262              		.cfi_endproc
 263              	.LFE114:
 265              		.section	.text.RCC_LSEConfig,"ax",%progbits
 266              		.align	2
 267              		.global	RCC_LSEConfig
 268              		.thumb
 269              		.thumb_func
 271              	RCC_LSEConfig:
 272              	.LFB115:
 381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 273              		.loc 1 381 0
 274              		.cfi_startproc
 275              		@ args = 0, pretend = 0, frame = 0
 276              		@ frame_needed = 0, uses_anonymous_args = 0
 277              		@ link register save eliminated.
 278              	.LVL14:
 387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 279              		.loc 1 387 0
 280 0000 064B     		ldr	r3, .L32
 281 0002 0022     		movs	r2, #0
 393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 282              		.loc 1 393 0
 283 0004 0128     		cmp	r0, #1
 387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 284              		.loc 1 387 0
 285 0006 1A70     		strb	r2, [r3]
 390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 286              		.loc 1 390 0
 287 0008 1A70     		strb	r2, [r3]
 393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 288              		.loc 1 393 0
 289 000a 05D0     		beq	.L29
 290 000c 0428     		cmp	r0, #4
 291 000e 02D1     		bne	.L31
 401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 292              		.loc 1 401 0
 293 0010 0522     		movs	r2, #5
 294 0012 1A70     		strb	r2, [r3]
 295 0014 7047     		bx	lr
 296              	.L31:
 297 0016 7047     		bx	lr
 298              	.L29:
 397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 299              		.loc 1 397 0
 300 0018 1870     		strb	r0, [r3]
 398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case RCC_LSE_Bypass:
 301              		.loc 1 398 0
 302 001a 7047     		bx	lr
 303              	.L33:
 304              		.align	2
 305              	.L32:
 306 001c 70380240 		.word	1073887344
 307              		.cfi_endproc
 308              	.LFE115:
 310              		.section	.text.RCC_LSICmd,"ax",%progbits
 311              		.align	2
 312              		.global	RCC_LSICmd
 313              		.thumb
 314              		.thumb_func
 316              	RCC_LSICmd:
 317              	.LFB116:
 421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 318              		.loc 1 421 0
 319              		.cfi_startproc
 320              		@ args = 0, pretend = 0, frame = 0
 321              		@ frame_needed = 0, uses_anonymous_args = 0
 322              		@ link register save eliminated.
 323              	.LVL15:
 425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 324              		.loc 1 425 0
 325 0000 014B     		ldr	r3, .L35
 326 0002 1860     		str	r0, [r3]
 327 0004 7047     		bx	lr
 328              	.L36:
 329 0006 00BF     		.align	2
 330              	.L35:
 331 0008 800E4742 		.word	1111953024
 332              		.cfi_endproc
 333              	.LFE116:
 335              		.section	.text.RCC_PLLConfig,"ax",%progbits
 336              		.align	2
 337              		.global	RCC_PLLConfig
 338              		.thumb
 339              		.thumb_func
 341              	RCC_PLLConfig:
 342              	.LFB117:
 464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 343              		.loc 1 464 0
 344              		.cfi_startproc
 345              		@ args = 4, pretend = 0, frame = 0
 346              		@ frame_needed = 0, uses_anonymous_args = 0
 347              		@ link register save eliminated.
 348              	.LVL16:
 349 0000 30B4     		push	{r4, r5}
 350              	.LCFI4:
 351              		.cfi_def_cfa_offset 8
 352              		.cfi_offset 4, -8
 353              		.cfi_offset 5, -4
 464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 354              		.loc 1 464 0
 355 0002 029C     		ldr	r4, [sp, #8]
 472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****                  (PLLQ << 24);
 356              		.loc 1 472 0
 357 0004 064D     		ldr	r5, .L39
 358 0006 40EA0460 		orr	r0, r0, r4, lsl #24
 359              	.LVL17:
 360 000a 0143     		orrs	r1, r1, r0
 361              	.LVL18:
 362 000c 5B08     		lsrs	r3, r3, #1
 363              	.LVL19:
 364 000e 013B     		subs	r3, r3, #1
 365 0010 41EA8212 		orr	r2, r1, r2, lsl #6
 366              	.LVL20:
 367 0014 42EA0340 		orr	r0, r2, r3, lsl #16
 368 0018 6860     		str	r0, [r5, #4]
 369              	.LVL21:
 474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 370              		.loc 1 474 0
 371 001a 30BC     		pop	{r4, r5}
 372              	.LCFI5:
 373              		.cfi_restore 5
 374              		.cfi_restore 4
 375              		.cfi_def_cfa_offset 0
 376 001c 7047     		bx	lr
 377              	.L40:
 378 001e 00BF     		.align	2
 379              	.L39:
 380 0020 00380240 		.word	1073887232
 381              		.cfi_endproc
 382              	.LFE117:
 384              		.section	.text.RCC_PLLCmd,"ax",%progbits
 385              		.align	2
 386              		.global	RCC_PLLCmd
 387              		.thumb
 388              		.thumb_func
 390              	RCC_PLLCmd:
 391              	.LFB118:
 487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 392              		.loc 1 487 0
 393              		.cfi_startproc
 394              		@ args = 0, pretend = 0, frame = 0
 395              		@ frame_needed = 0, uses_anonymous_args = 0
 396              		@ link register save eliminated.
 397              	.LVL22:
 490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 398              		.loc 1 490 0
 399 0000 014B     		ldr	r3, .L42
 400 0002 1860     		str	r0, [r3]
 401 0004 7047     		bx	lr
 402              	.L43:
 403 0006 00BF     		.align	2
 404              	.L42:
 405 0008 60004742 		.word	1111949408
 406              		.cfi_endproc
 407              	.LFE118:
 409              		.section	.text.RCC_PLLI2SConfig,"ax",%progbits
 410              		.align	2
 411              		.global	RCC_PLLI2SConfig
 412              		.thumb
 413              		.thumb_func
 415              	RCC_PLLI2SConfig:
 416              	.LFB119:
 553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 417              		.loc 1 553 0
 418              		.cfi_startproc
 419              		@ args = 0, pretend = 0, frame = 0
 420              		@ frame_needed = 0, uses_anonymous_args = 0
 421              		@ link register save eliminated.
 422              	.LVL23:
 559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 423              		.loc 1 559 0
 424 0000 1207     		lsls	r2, r2, #28
 425              	.LVL24:
 426 0002 42EA0161 		orr	r1, r2, r1, lsl #24
 427              	.LVL25:
 428 0006 034B     		ldr	r3, .L45
 429 0008 41EA8010 		orr	r0, r1, r0, lsl #6
 430              	.LVL26:
 431 000c C3F88400 		str	r0, [r3, #132]
 432 0010 7047     		bx	lr
 433              	.L46:
 434 0012 00BF     		.align	2
 435              	.L45:
 436 0014 00380240 		.word	1073887232
 437              		.cfi_endproc
 438              	.LFE119:
 440              		.section	.text.RCC_PLLI2SCmd,"ax",%progbits
 441              		.align	2
 442              		.global	RCC_PLLI2SCmd
 443              		.thumb
 444              		.thumb_func
 446              	RCC_PLLI2SCmd:
 447              	.LFB120:
 570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 448              		.loc 1 570 0
 449              		.cfi_startproc
 450              		@ args = 0, pretend = 0, frame = 0
 451              		@ frame_needed = 0, uses_anonymous_args = 0
 452              		@ link register save eliminated.
 453              	.LVL27:
 573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 454              		.loc 1 573 0
 455 0000 014B     		ldr	r3, .L48
 456 0002 1860     		str	r0, [r3]
 457 0004 7047     		bx	lr
 458              	.L49:
 459 0006 00BF     		.align	2
 460              	.L48:
 461 0008 68004742 		.word	1111949416
 462              		.cfi_endproc
 463              	.LFE120:
 465              		.section	.text.RCC_PLLSAIConfig,"ax",%progbits
 466              		.align	2
 467              		.global	RCC_PLLSAIConfig
 468              		.thumb
 469              		.thumb_func
 471              	RCC_PLLSAIConfig:
 472              	.LFB121:
 599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 473              		.loc 1 599 0
 474              		.cfi_startproc
 475              		@ args = 0, pretend = 0, frame = 0
 476              		@ frame_needed = 0, uses_anonymous_args = 0
 477              		@ link register save eliminated.
 478              	.LVL28:
 604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 479              		.loc 1 604 0
 480 0000 1207     		lsls	r2, r2, #28
 481              	.LVL29:
 482 0002 42EA0161 		orr	r1, r2, r1, lsl #24
 483              	.LVL30:
 484 0006 034B     		ldr	r3, .L51
 485 0008 41EA8010 		orr	r0, r1, r0, lsl #6
 486              	.LVL31:
 487 000c C3F88800 		str	r0, [r3, #136]
 488 0010 7047     		bx	lr
 489              	.L52:
 490 0012 00BF     		.align	2
 491              	.L51:
 492 0014 00380240 		.word	1073887232
 493              		.cfi_endproc
 494              	.LFE121:
 496              		.section	.text.RCC_PLLSAICmd,"ax",%progbits
 497              		.align	2
 498              		.global	RCC_PLLSAICmd
 499              		.thumb
 500              		.thumb_func
 502              	RCC_PLLSAICmd:
 503              	.LFB122:
 617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 504              		.loc 1 617 0
 505              		.cfi_startproc
 506              		@ args = 0, pretend = 0, frame = 0
 507              		@ frame_needed = 0, uses_anonymous_args = 0
 508              		@ link register save eliminated.
 509              	.LVL32:
 620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 510              		.loc 1 620 0
 511 0000 014B     		ldr	r3, .L54
 512 0002 1860     		str	r0, [r3]
 513 0004 7047     		bx	lr
 514              	.L55:
 515 0006 00BF     		.align	2
 516              	.L54:
 517 0008 70004742 		.word	1111949424
 518              		.cfi_endproc
 519              	.LFE122:
 521              		.section	.text.RCC_ClockSecuritySystemCmd,"ax",%progbits
 522              		.align	2
 523              		.global	RCC_ClockSecuritySystemCmd
 524              		.thumb
 525              		.thumb_func
 527              	RCC_ClockSecuritySystemCmd:
 528              	.LFB123:
 635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 529              		.loc 1 635 0
 530              		.cfi_startproc
 531              		@ args = 0, pretend = 0, frame = 0
 532              		@ frame_needed = 0, uses_anonymous_args = 0
 533              		@ link register save eliminated.
 534              	.LVL33:
 638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 535              		.loc 1 638 0
 536 0000 014B     		ldr	r3, .L57
 537 0002 1860     		str	r0, [r3]
 538 0004 7047     		bx	lr
 539              	.L58:
 540 0006 00BF     		.align	2
 541              	.L57:
 542 0008 4C004742 		.word	1111949388
 543              		.cfi_endproc
 544              	.LFE123:
 546              		.section	.text.RCC_MCO1Config,"ax",%progbits
 547              		.align	2
 548              		.global	RCC_MCO1Config
 549              		.thumb
 550              		.thumb_func
 552              	RCC_MCO1Config:
 553              	.LFB124:
 660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 554              		.loc 1 660 0
 555              		.cfi_startproc
 556              		@ args = 0, pretend = 0, frame = 0
 557              		@ frame_needed = 0, uses_anonymous_args = 0
 558              		@ link register save eliminated.
 559              	.LVL34:
 667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 560              		.loc 1 667 0
 561 0000 034A     		ldr	r2, .L60
 562 0002 9368     		ldr	r3, [r2, #8]
 563              	.LVL35:
 670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 564              		.loc 1 670 0
 565 0004 23F0EC63 		bic	r3, r3, #123731968
 566              	.LVL36:
 567 0008 1943     		orrs	r1, r1, r3
 568              	.LVL37:
 673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 569              		.loc 1 673 0
 570 000a 0843     		orrs	r0, r0, r1
 571              	.LVL38:
 676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 572              		.loc 1 676 0
 573 000c 9060     		str	r0, [r2, #8]
 574 000e 7047     		bx	lr
 575              	.L61:
 576              		.align	2
 577              	.L60:
 578 0010 00380240 		.word	1073887232
 579              		.cfi_endproc
 580              	.LFE124:
 582              		.section	.text.RCC_MCO2Config,"ax",%progbits
 583              		.align	2
 584              		.global	RCC_MCO2Config
 585              		.thumb
 586              		.thumb_func
 588              	RCC_MCO2Config:
 589              	.LFB125:
 698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 590              		.loc 1 698 0
 591              		.cfi_startproc
 592              		@ args = 0, pretend = 0, frame = 0
 593              		@ frame_needed = 0, uses_anonymous_args = 0
 594              		@ link register save eliminated.
 595              	.LVL39:
 705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 596              		.loc 1 705 0
 597 0000 034A     		ldr	r2, .L63
 598 0002 9368     		ldr	r3, [r2, #8]
 599              	.LVL40:
 708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 600              		.loc 1 708 0
 601 0004 23F07843 		bic	r3, r3, #-134217728
 602              	.LVL41:
 603 0008 1943     		orrs	r1, r1, r3
 604              	.LVL42:
 711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 605              		.loc 1 711 0
 606 000a 0843     		orrs	r0, r0, r1
 607              	.LVL43:
 714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 608              		.loc 1 714 0
 609 000c 9060     		str	r0, [r2, #8]
 610 000e 7047     		bx	lr
 611              	.L64:
 612              		.align	2
 613              	.L63:
 614 0010 00380240 		.word	1073887232
 615              		.cfi_endproc
 616              	.LFE125:
 618              		.section	.text.RCC_SYSCLKConfig,"ax",%progbits
 619              		.align	2
 620              		.global	RCC_SYSCLKConfig
 621              		.thumb
 622              		.thumb_func
 624              	RCC_SYSCLKConfig:
 625              	.LFB126:
 864:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 626              		.loc 1 864 0
 627              		.cfi_startproc
 628              		@ args = 0, pretend = 0, frame = 0
 629              		@ frame_needed = 0, uses_anonymous_args = 0
 630              		@ link register save eliminated.
 631              	.LVL44:
 870:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 632              		.loc 1 870 0
 633 0000 034A     		ldr	r2, .L66
 634 0002 9368     		ldr	r3, [r2, #8]
 635              	.LVL45:
 873:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 636              		.loc 1 873 0
 637 0004 23F00303 		bic	r3, r3, #3
 638              	.LVL46:
 876:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 639              		.loc 1 876 0
 640 0008 1843     		orrs	r0, r0, r3
 641              	.LVL47:
 879:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 642              		.loc 1 879 0
 643 000a 9060     		str	r0, [r2, #8]
 644 000c 7047     		bx	lr
 645              	.L67:
 646 000e 00BF     		.align	2
 647              	.L66:
 648 0010 00380240 		.word	1073887232
 649              		.cfi_endproc
 650              	.LFE126:
 652              		.section	.text.RCC_GetSYSCLKSource,"ax",%progbits
 653              		.align	2
 654              		.global	RCC_GetSYSCLKSource
 655              		.thumb
 656              		.thumb_func
 658              	RCC_GetSYSCLKSource:
 659              	.LFB127:
 892:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 660              		.loc 1 892 0
 661              		.cfi_startproc
 662              		@ args = 0, pretend = 0, frame = 0
 663              		@ frame_needed = 0, uses_anonymous_args = 0
 664              		@ link register save eliminated.
 893:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 665              		.loc 1 893 0
 666 0000 024B     		ldr	r3, .L69
 667 0002 9868     		ldr	r0, [r3, #8]
 894:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 668              		.loc 1 894 0
 669 0004 00F00C00 		and	r0, r0, #12
 670 0008 7047     		bx	lr
 671              	.L70:
 672 000a 00BF     		.align	2
 673              	.L69:
 674 000c 00380240 		.word	1073887232
 675              		.cfi_endproc
 676              	.LFE127:
 678              		.section	.text.RCC_HCLKConfig,"ax",%progbits
 679              		.align	2
 680              		.global	RCC_HCLKConfig
 681              		.thumb
 682              		.thumb_func
 684              	RCC_HCLKConfig:
 685              	.LFB128:
 917:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 686              		.loc 1 917 0
 687              		.cfi_startproc
 688              		@ args = 0, pretend = 0, frame = 0
 689              		@ frame_needed = 0, uses_anonymous_args = 0
 690              		@ link register save eliminated.
 691              	.LVL48:
 923:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 692              		.loc 1 923 0
 693 0000 034A     		ldr	r2, .L72
 694 0002 9368     		ldr	r3, [r2, #8]
 695              	.LVL49:
 926:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 696              		.loc 1 926 0
 697 0004 23F0F003 		bic	r3, r3, #240
 698              	.LVL50:
 929:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 699              		.loc 1 929 0
 700 0008 1843     		orrs	r0, r0, r3
 701              	.LVL51:
 932:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 702              		.loc 1 932 0
 703 000a 9060     		str	r0, [r2, #8]
 704 000c 7047     		bx	lr
 705              	.L73:
 706 000e 00BF     		.align	2
 707              	.L72:
 708 0010 00380240 		.word	1073887232
 709              		.cfi_endproc
 710              	.LFE128:
 712              		.section	.text.RCC_PCLK1Config,"ax",%progbits
 713              		.align	2
 714              		.global	RCC_PCLK1Config
 715              		.thumb
 716              		.thumb_func
 718              	RCC_PCLK1Config:
 719              	.LFB129:
 949:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 720              		.loc 1 949 0
 721              		.cfi_startproc
 722              		@ args = 0, pretend = 0, frame = 0
 723              		@ frame_needed = 0, uses_anonymous_args = 0
 724              		@ link register save eliminated.
 725              	.LVL52:
 955:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 726              		.loc 1 955 0
 727 0000 034A     		ldr	r2, .L75
 728 0002 9368     		ldr	r3, [r2, #8]
 729              	.LVL53:
 958:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 730              		.loc 1 958 0
 731 0004 23F4E053 		bic	r3, r3, #7168
 732              	.LVL54:
 961:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 733              		.loc 1 961 0
 734 0008 1843     		orrs	r0, r0, r3
 735              	.LVL55:
 964:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 736              		.loc 1 964 0
 737 000a 9060     		str	r0, [r2, #8]
 738 000c 7047     		bx	lr
 739              	.L76:
 740 000e 00BF     		.align	2
 741              	.L75:
 742 0010 00380240 		.word	1073887232
 743              		.cfi_endproc
 744              	.LFE129:
 746              		.section	.text.RCC_PCLK2Config,"ax",%progbits
 747              		.align	2
 748              		.global	RCC_PCLK2Config
 749              		.thumb
 750              		.thumb_func
 752              	RCC_PCLK2Config:
 753              	.LFB130:
 980:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 754              		.loc 1 980 0
 755              		.cfi_startproc
 756              		@ args = 0, pretend = 0, frame = 0
 757              		@ frame_needed = 0, uses_anonymous_args = 0
 758              		@ link register save eliminated.
 759              	.LVL56:
 986:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 760              		.loc 1 986 0
 761 0000 034A     		ldr	r2, .L78
 762 0002 9368     		ldr	r3, [r2, #8]
 763              	.LVL57:
 989:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 764              		.loc 1 989 0
 765 0004 23F46043 		bic	r3, r3, #57344
 766              	.LVL58:
 992:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 767              		.loc 1 992 0
 768 0008 43EAC000 		orr	r0, r3, r0, lsl #3
 769              	.LVL59:
 995:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 770              		.loc 1 995 0
 771 000c 9060     		str	r0, [r2, #8]
 772 000e 7047     		bx	lr
 773              	.L79:
 774              		.align	2
 775              	.L78:
 776 0010 00380240 		.word	1073887232
 777              		.cfi_endproc
 778              	.LFE130:
 780              		.section	.text.RCC_GetClocksFreq,"ax",%progbits
 781              		.align	2
 782              		.global	RCC_GetClocksFreq
 783              		.thumb
 784              		.thumb_func
 786              	RCC_GetClocksFreq:
 787              	.LFB131:
1032:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 788              		.loc 1 1032 0
 789              		.cfi_startproc
 790              		@ args = 0, pretend = 0, frame = 0
 791              		@ frame_needed = 0, uses_anonymous_args = 0
 792              		@ link register save eliminated.
 793              	.LVL60:
 794 0000 10B4     		push	{r4}
 795              	.LCFI6:
 796              		.cfi_def_cfa_offset 4
 797              		.cfi_offset 4, -4
1036:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 798              		.loc 1 1036 0
 799 0002 214C     		ldr	r4, .L92
 800 0004 A368     		ldr	r3, [r4, #8]
 801              	.LVL61:
 802 0006 03F00C03 		and	r3, r3, #12
 803              	.LVL62:
1038:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 804              		.loc 1 1038 0
 805 000a 042B     		cmp	r3, #4
 806 000c 1BD0     		beq	.L82
 807 000e 082B     		cmp	r3, #8
 808 0010 1CD0     		beq	.L91
1069:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 809              		.loc 1 1069 0
 810 0012 1E4B     		ldr	r3, .L92+4
 811              	.LVL63:
 812 0014 0360     		str	r3, [r0]
 813              	.LVL64:
 814              	.L85:
1075:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = tmp >> 4;
 815              		.loc 1 1075 0
 816 0016 1C4A     		ldr	r2, .L92
1077:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* HCLK clock frequency */
 817              		.loc 1 1077 0
 818 0018 1D49     		ldr	r1, .L92+8
1075:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = tmp >> 4;
 819              		.loc 1 1075 0
 820 001a 9468     		ldr	r4, [r2, #8]
 821              	.LVL65:
1076:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 822              		.loc 1 1076 0
 823 001c C4F30314 		ubfx	r4, r4, #4, #4
 824              	.LVL66:
1077:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* HCLK clock frequency */
 825              		.loc 1 1077 0
 826 0020 0C5D     		ldrb	r4, [r1, r4]	@ zero_extendqisi2
 827              	.LVL67:
1079:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 828              		.loc 1 1079 0
 829 0022 E340     		lsrs	r3, r3, r4
 830 0024 4360     		str	r3, [r0, #4]
1082:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = tmp >> 10;
 831              		.loc 1 1082 0
 832 0026 9468     		ldr	r4, [r2, #8]
 833              	.LVL68:
1083:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 834              		.loc 1 1083 0
 835 0028 C4F38224 		ubfx	r4, r4, #10, #3
 836              	.LVL69:
1084:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* PCLK1 clock frequency */
 837              		.loc 1 1084 0
 838 002c 0C5D     		ldrb	r4, [r1, r4]	@ zero_extendqisi2
 839              	.LVL70:
1086:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 840              		.loc 1 1086 0
 841 002e 23FA04F4 		lsr	r4, r3, r4
 842              	.LVL71:
 843 0032 8460     		str	r4, [r0, #8]
1089:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = tmp >> 13;
 844              		.loc 1 1089 0
 845 0034 9268     		ldr	r2, [r2, #8]
 846              	.LVL72:
1094:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 847              		.loc 1 1094 0
 848 0036 5DF8044B 		ldr	r4, [sp], #4
 849              	.LCFI7:
 850              		.cfi_remember_state
 851              		.cfi_restore 4
 852              		.cfi_def_cfa_offset 0
1090:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 853              		.loc 1 1090 0
 854 003a C2F34232 		ubfx	r2, r2, #13, #3
 855              	.LVL73:
1091:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* PCLK2 clock frequency */
 856              		.loc 1 1091 0
 857 003e 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
 858              	.LVL74:
1093:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 859              		.loc 1 1093 0
 860 0040 D340     		lsrs	r3, r3, r2
 861 0042 C360     		str	r3, [r0, #12]
1094:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 862              		.loc 1 1094 0
 863 0044 7047     		bx	lr
 864              	.LVL75:
 865              	.L82:
 866              	.LCFI8:
 867              		.cfi_restore_state
1044:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 868              		.loc 1 1044 0
 869 0046 134B     		ldr	r3, .L92+12
 870              	.LVL76:
 871 0048 0360     		str	r3, [r0]
1045:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case 0x08:  /* PLL used as system clock  source */
 872              		.loc 1 1045 0
 873 004a E4E7     		b	.L85
 874              	.LVL77:
 875              	.L91:
1051:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 876              		.loc 1 1051 0
 877 004c 6368     		ldr	r3, [r4, #4]
 878              	.LVL78:
1052:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       
 879              		.loc 1 1052 0
 880 004e 6168     		ldr	r1, [r4, #4]
1054:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       {
 881              		.loc 1 1054 0
 882 0050 13F4800F 		tst	r3, #4194304
1057:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       }
 883              		.loc 1 1057 0
 884 0054 6368     		ldr	r3, [r4, #4]
 885              	.LVL79:
 886 0056 18BF     		it	ne
 887 0058 0E4C     		ldrne	r4, .L92+12
1052:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       
 888              		.loc 1 1052 0
 889 005a 01F03F02 		and	r2, r1, #63
 890              	.LVL80:
1062:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       }
 891              		.loc 1 1062 0
 892 005e 0CBF     		ite	eq
 893 0060 0A49     		ldreq	r1, .L92+4
1057:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       }
 894              		.loc 1 1057 0
 895 0062 B4FBF2F1 		udivne	r1, r4, r2
1062:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       }
 896              		.loc 1 1062 0
 897 0066 C3F38813 		ubfx	r3, r3, #6, #9
 898 006a 08BF     		it	eq
 899 006c B1FBF2F1 		udiveq	r1, r1, r2
 900 0070 01FB03F2 		mul	r2, r1, r3
 901              	.LVL81:
1065:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 902              		.loc 1 1065 0
 903 0074 044B     		ldr	r3, .L92
 904 0076 5B68     		ldr	r3, [r3, #4]
 905              	.LVL82:
 906 0078 C3F30143 		ubfx	r3, r3, #16, #2
 907              	.LVL83:
 908 007c 0133     		adds	r3, r3, #1
 909 007e 5B00     		lsls	r3, r3, #1
1066:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 910              		.loc 1 1066 0
 911 0080 B2FBF3F3 		udiv	r3, r2, r3
 912 0084 0360     		str	r3, [r0]
1067:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     default:
 913              		.loc 1 1067 0
 914 0086 C6E7     		b	.L85
 915              	.L93:
 916              		.align	2
 917              	.L92:
 918 0088 00380240 		.word	1073887232
 919 008c 0024F400 		.word	16000000
 920 0090 00000000 		.word	.LANCHOR0
 921 0094 00127A00 		.word	8000000
 922              		.cfi_endproc
 923              	.LFE131:
 925              		.section	.text.RCC_RTCCLKConfig,"ax",%progbits
 926              		.align	2
 927              		.global	RCC_RTCCLKConfig
 928              		.thumb
 929              		.thumb_func
 931              	RCC_RTCCLKConfig:
 932              	.LFB132:
1157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 933              		.loc 1 1157 0
 934              		.cfi_startproc
 935              		@ args = 0, pretend = 0, frame = 0
 936              		@ frame_needed = 0, uses_anonymous_args = 0
 937              		@ link register save eliminated.
 938              	.LVL84:
1163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
 939              		.loc 1 1163 0
 940 0000 00F44073 		and	r3, r0, #768
 941 0004 B3F5407F 		cmp	r3, #768
 942 0008 09D1     		bne	.L95
1165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 943              		.loc 1 1165 0
 944 000a 0849     		ldr	r1, .L96
 945 000c 8B68     		ldr	r3, [r1, #8]
 946              	.LVL85:
1171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 947              		.loc 1 1171 0
 948 000e 20F07042 		bic	r2, r0, #-268435456
1168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 949              		.loc 1 1168 0
 950 0012 23F4F813 		bic	r3, r3, #2031616
 951              	.LVL86:
1171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 952              		.loc 1 1171 0
 953 0016 22F44072 		bic	r2, r2, #768
 954 001a 1343     		orrs	r3, r3, r2
 955              	.LVL87:
1174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 956              		.loc 1 1174 0
 957 001c 8B60     		str	r3, [r1, #8]
 958              	.LVL88:
 959              	.L95:
1178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 960              		.loc 1 1178 0
 961 001e 034A     		ldr	r2, .L96
 962 0020 136F     		ldr	r3, [r2, #112]
 963 0022 C0F30B00 		ubfx	r0, r0, #0, #12
 964              	.LVL89:
 965 0026 1843     		orrs	r0, r0, r3
 966 0028 1067     		str	r0, [r2, #112]
 967 002a 7047     		bx	lr
 968              	.L97:
 969              		.align	2
 970              	.L96:
 971 002c 00380240 		.word	1073887232
 972              		.cfi_endproc
 973              	.LFE132:
 975              		.section	.text.RCC_RTCCLKCmd,"ax",%progbits
 976              		.align	2
 977              		.global	RCC_RTCCLKCmd
 978              		.thumb
 979              		.thumb_func
 981              	RCC_RTCCLKCmd:
 982              	.LFB133:
1189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 983              		.loc 1 1189 0
 984              		.cfi_startproc
 985              		@ args = 0, pretend = 0, frame = 0
 986              		@ frame_needed = 0, uses_anonymous_args = 0
 987              		@ link register save eliminated.
 988              	.LVL90:
1193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 989              		.loc 1 1193 0
 990 0000 014B     		ldr	r3, .L99
 991 0002 1860     		str	r0, [r3]
 992 0004 7047     		bx	lr
 993              	.L100:
 994 0006 00BF     		.align	2
 995              	.L99:
 996 0008 3C0E4742 		.word	1111952956
 997              		.cfi_endproc
 998              	.LFE133:
 1000              		.section	.text.RCC_BackupResetCmd,"ax",%progbits
 1001              		.align	2
 1002              		.global	RCC_BackupResetCmd
 1003              		.thumb
 1004              		.thumb_func
 1006              	RCC_BackupResetCmd:
 1007              	.LFB134:
1206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 1008              		.loc 1 1206 0
 1009              		.cfi_startproc
 1010              		@ args = 0, pretend = 0, frame = 0
 1011              		@ frame_needed = 0, uses_anonymous_args = 0
 1012              		@ link register save eliminated.
 1013              	.LVL91:
1209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1014              		.loc 1 1209 0
 1015 0000 014B     		ldr	r3, .L102
 1016 0002 1860     		str	r0, [r3]
 1017 0004 7047     		bx	lr
 1018              	.L103:
 1019 0006 00BF     		.align	2
 1020              	.L102:
 1021 0008 400E4742 		.word	1111952960
 1022              		.cfi_endproc
 1023              	.LFE134:
 1025              		.section	.text.RCC_I2SCLKConfig,"ax",%progbits
 1026              		.align	2
 1027              		.global	RCC_I2SCLKConfig
 1028              		.thumb
 1029              		.thumb_func
 1031              	RCC_I2SCLKConfig:
 1032              	.LFB135:
1223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 1033              		.loc 1 1223 0
 1034              		.cfi_startproc
 1035              		@ args = 0, pretend = 0, frame = 0
 1036              		@ frame_needed = 0, uses_anonymous_args = 0
 1037              		@ link register save eliminated.
 1038              	.LVL92:
1227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1039              		.loc 1 1227 0
 1040 0000 014B     		ldr	r3, .L105
 1041 0002 1860     		str	r0, [r3]
 1042 0004 7047     		bx	lr
 1043              	.L106:
 1044 0006 00BF     		.align	2
 1045              	.L105:
 1046 0008 5C014742 		.word	1111949660
 1047              		.cfi_endproc
 1048              	.LFE135:
 1050              		.section	.text.RCC_SAIPLLI2SClkDivConfig,"ax",%progbits
 1051              		.align	2
 1052              		.global	RCC_SAIPLLI2SClkDivConfig
 1053              		.thumb
 1054              		.thumb_func
 1056              	RCC_SAIPLLI2SClkDivConfig:
 1057              	.LFB136:
1244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1058              		.loc 1 1244 0
 1059              		.cfi_startproc
 1060              		@ args = 0, pretend = 0, frame = 0
 1061              		@ frame_needed = 0, uses_anonymous_args = 0
 1062              		@ link register save eliminated.
 1063              	.LVL93:
1250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1064              		.loc 1 1250 0
 1065 0000 044A     		ldr	r2, .L108
 1066 0002 D2F88C30 		ldr	r3, [r2, #140]
 1067              	.LVL94:
1256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1068              		.loc 1 1256 0
 1069 0006 0138     		subs	r0, r0, #1
 1070              	.LVL95:
1253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1071              		.loc 1 1253 0
 1072 0008 23F01F03 		bic	r3, r3, #31
 1073              	.LVL96:
1256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1074              		.loc 1 1256 0
 1075 000c 0343     		orrs	r3, r3, r0
 1076              	.LVL97:
1259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1077              		.loc 1 1259 0
 1078 000e C2F88C30 		str	r3, [r2, #140]
 1079 0012 7047     		bx	lr
 1080              	.L109:
 1081              		.align	2
 1082              	.L108:
 1083 0014 00380240 		.word	1073887232
 1084              		.cfi_endproc
 1085              	.LFE136:
 1087              		.section	.text.RCC_SAIPLLSAIClkDivConfig,"ax",%progbits
 1088              		.align	2
 1089              		.global	RCC_SAIPLLSAIClkDivConfig
 1090              		.thumb
 1091              		.thumb_func
 1093              	RCC_SAIPLLSAIClkDivConfig:
 1094              	.LFB137:
1276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1095              		.loc 1 1276 0
 1096              		.cfi_startproc
 1097              		@ args = 0, pretend = 0, frame = 0
 1098              		@ frame_needed = 0, uses_anonymous_args = 0
 1099              		@ link register save eliminated.
 1100              	.LVL98:
1282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1101              		.loc 1 1282 0
 1102 0000 054A     		ldr	r2, .L111
 1103 0002 D2F88C30 		ldr	r3, [r2, #140]
 1104              	.LVL99:
1288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1105              		.loc 1 1288 0
 1106 0006 0138     		subs	r0, r0, #1
 1107              	.LVL100:
1285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1108              		.loc 1 1285 0
 1109 0008 23F4F853 		bic	r3, r3, #7936
 1110              	.LVL101:
1288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1111              		.loc 1 1288 0
 1112 000c 43EA0023 		orr	r3, r3, r0, lsl #8
 1113              	.LVL102:
1291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1114              		.loc 1 1291 0
 1115 0010 C2F88C30 		str	r3, [r2, #140]
 1116 0014 7047     		bx	lr
 1117              	.L112:
 1118 0016 00BF     		.align	2
 1119              	.L111:
 1120 0018 00380240 		.word	1073887232
 1121              		.cfi_endproc
 1122              	.LFE137:
 1124              		.section	.text.RCC_SAIBlockACLKConfig,"ax",%progbits
 1125              		.align	2
 1126              		.global	RCC_SAIBlockACLKConfig
 1127              		.thumb
 1128              		.thumb_func
 1130              	RCC_SAIBlockACLKConfig:
 1131              	.LFB138:
1312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1132              		.loc 1 1312 0
 1133              		.cfi_startproc
 1134              		@ args = 0, pretend = 0, frame = 0
 1135              		@ frame_needed = 0, uses_anonymous_args = 0
 1136              		@ link register save eliminated.
 1137              	.LVL103:
1318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1138              		.loc 1 1318 0
 1139 0000 044A     		ldr	r2, .L114
 1140 0002 D2F88C30 		ldr	r3, [r2, #140]
 1141              	.LVL104:
1321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1142              		.loc 1 1321 0
 1143 0006 23F44013 		bic	r3, r3, #3145728
 1144              	.LVL105:
1324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1145              		.loc 1 1324 0
 1146 000a 1843     		orrs	r0, r0, r3
 1147              	.LVL106:
1327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1148              		.loc 1 1327 0
 1149 000c C2F88C00 		str	r0, [r2, #140]
 1150 0010 7047     		bx	lr
 1151              	.L115:
 1152 0012 00BF     		.align	2
 1153              	.L114:
 1154 0014 00380240 		.word	1073887232
 1155              		.cfi_endproc
 1156              	.LFE138:
 1158              		.section	.text.RCC_SAIBlockBCLKConfig,"ax",%progbits
 1159              		.align	2
 1160              		.global	RCC_SAIBlockBCLKConfig
 1161              		.thumb
 1162              		.thumb_func
 1164              	RCC_SAIBlockBCLKConfig:
 1165              	.LFB139:
1348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1166              		.loc 1 1348 0
 1167              		.cfi_startproc
 1168              		@ args = 0, pretend = 0, frame = 0
 1169              		@ frame_needed = 0, uses_anonymous_args = 0
 1170              		@ link register save eliminated.
 1171              	.LVL107:
1354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1172              		.loc 1 1354 0
 1173 0000 044A     		ldr	r2, .L117
 1174 0002 D2F88C30 		ldr	r3, [r2, #140]
 1175              	.LVL108:
1357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1176              		.loc 1 1357 0
 1177 0006 23F44003 		bic	r3, r3, #12582912
 1178              	.LVL109:
1360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1179              		.loc 1 1360 0
 1180 000a 1843     		orrs	r0, r0, r3
 1181              	.LVL110:
1363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1182              		.loc 1 1363 0
 1183 000c C2F88C00 		str	r0, [r2, #140]
 1184 0010 7047     		bx	lr
 1185              	.L118:
 1186 0012 00BF     		.align	2
 1187              	.L117:
 1188 0014 00380240 		.word	1073887232
 1189              		.cfi_endproc
 1190              	.LFE139:
 1192              		.section	.text.RCC_LTDCCLKDivConfig,"ax",%progbits
 1193              		.align	2
 1194              		.global	RCC_LTDCCLKDivConfig
 1195              		.thumb
 1196              		.thumb_func
 1198              	RCC_LTDCCLKDivConfig:
 1199              	.LFB140:
1381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1200              		.loc 1 1381 0
 1201              		.cfi_startproc
 1202              		@ args = 0, pretend = 0, frame = 0
 1203              		@ frame_needed = 0, uses_anonymous_args = 0
 1204              		@ link register save eliminated.
 1205              	.LVL111:
1387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1206              		.loc 1 1387 0
 1207 0000 044A     		ldr	r2, .L120
 1208 0002 D2F88C30 		ldr	r3, [r2, #140]
 1209              	.LVL112:
1390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1210              		.loc 1 1390 0
 1211 0006 23F44033 		bic	r3, r3, #196608
 1212              	.LVL113:
1393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 1213              		.loc 1 1393 0
 1214 000a 1843     		orrs	r0, r0, r3
 1215              	.LVL114:
1396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1216              		.loc 1 1396 0
 1217 000c C2F88C00 		str	r0, [r2, #140]
 1218 0010 7047     		bx	lr
 1219              	.L121:
 1220 0012 00BF     		.align	2
 1221              	.L120:
 1222 0014 00380240 		.word	1073887232
 1223              		.cfi_endproc
 1224              	.LFE140:
 1226              		.section	.text.RCC_TIMCLKPresConfig,"ax",%progbits
 1227              		.align	2
 1228              		.global	RCC_TIMCLKPresConfig
 1229              		.thumb
 1230              		.thumb_func
 1232              	RCC_TIMCLKPresConfig:
 1233              	.LFB141:
1418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 1234              		.loc 1 1418 0
 1235              		.cfi_startproc
 1236              		@ args = 0, pretend = 0, frame = 0
 1237              		@ frame_needed = 0, uses_anonymous_args = 0
 1238              		@ link register save eliminated.
 1239              	.LVL115:
1422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 1240              		.loc 1 1422 0
 1241 0000 014B     		ldr	r3, .L123
 1242 0002 1860     		str	r0, [r3]
 1243 0004 7047     		bx	lr
 1244              	.L124:
 1245 0006 00BF     		.align	2
 1246              	.L123:
 1247 0008 E0114742 		.word	1111953888
 1248              		.cfi_endproc
 1249              	.LFE141:
 1251              		.section	.text.RCC_AHB1PeriphClockCmd,"ax",%progbits
 1252              		.align	2
 1253              		.global	RCC_AHB1PeriphClockCmd
 1254              		.thumb
 1255              		.thumb_func
 1257              	RCC_AHB1PeriphClockCmd:
 1258              	.LFB142:
1461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 1259              		.loc 1 1461 0
 1260              		.cfi_startproc
 1261              		@ args = 0, pretend = 0, frame = 0
 1262              		@ frame_needed = 0, uses_anonymous_args = 0
 1263              		@ link register save eliminated.
 1264              	.LVL116:
1468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1265              		.loc 1 1468 0
 1266 0000 044A     		ldr	r2, .L129
 1267 0002 136B     		ldr	r3, [r2, #48]
1466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 1268              		.loc 1 1466 0
 1269 0004 19B9     		cbnz	r1, .L128
1472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1270              		.loc 1 1472 0
 1271 0006 23EA0000 		bic	r0, r3, r0
 1272              	.LVL117:
 1273 000a 1063     		str	r0, [r2, #48]
 1274 000c 7047     		bx	lr
 1275              	.LVL118:
 1276              	.L128:
1468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1277              		.loc 1 1468 0
 1278 000e 1843     		orrs	r0, r0, r3
 1279              	.LVL119:
 1280 0010 1063     		str	r0, [r2, #48]
 1281 0012 7047     		bx	lr
 1282              	.L130:
 1283              		.align	2
 1284              	.L129:
 1285 0014 00380240 		.word	1073887232
 1286              		.cfi_endproc
 1287              	.LFE142:
 1289              		.section	.text.RCC_AHB2PeriphClockCmd,"ax",%progbits
 1290              		.align	2
 1291              		.global	RCC_AHB2PeriphClockCmd
 1292              		.thumb
 1293              		.thumb_func
 1295              	RCC_AHB2PeriphClockCmd:
 1296              	.LFB143:
1493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 1297              		.loc 1 1493 0
 1298              		.cfi_startproc
 1299              		@ args = 0, pretend = 0, frame = 0
 1300              		@ frame_needed = 0, uses_anonymous_args = 0
 1301              		@ link register save eliminated.
 1302              	.LVL120:
1500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1303              		.loc 1 1500 0
 1304 0000 044A     		ldr	r2, .L135
 1305 0002 536B     		ldr	r3, [r2, #52]
1498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 1306              		.loc 1 1498 0
 1307 0004 19B9     		cbnz	r1, .L134
1504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1308              		.loc 1 1504 0
 1309 0006 23EA0000 		bic	r0, r3, r0
 1310              	.LVL121:
 1311 000a 5063     		str	r0, [r2, #52]
 1312 000c 7047     		bx	lr
 1313              	.LVL122:
 1314              	.L134:
1500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1315              		.loc 1 1500 0
 1316 000e 1843     		orrs	r0, r0, r3
 1317              	.LVL123:
 1318 0010 5063     		str	r0, [r2, #52]
 1319 0012 7047     		bx	lr
 1320              	.L136:
 1321              		.align	2
 1322              	.L135:
 1323 0014 00380240 		.word	1073887232
 1324              		.cfi_endproc
 1325              	.LFE143:
 1327              		.section	.text.RCC_AHB3PeriphClockCmd,"ax",%progbits
 1328              		.align	2
 1329              		.global	RCC_AHB3PeriphClockCmd
 1330              		.thumb
 1331              		.thumb_func
 1333              	RCC_AHB3PeriphClockCmd:
 1334              	.LFB144:
1521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 1335              		.loc 1 1521 0
 1336              		.cfi_startproc
 1337              		@ args = 0, pretend = 0, frame = 0
 1338              		@ frame_needed = 0, uses_anonymous_args = 0
 1339              		@ link register save eliminated.
 1340              	.LVL124:
1528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1341              		.loc 1 1528 0
 1342 0000 044A     		ldr	r2, .L141
 1343 0002 936B     		ldr	r3, [r2, #56]
1526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 1344              		.loc 1 1526 0
 1345 0004 19B9     		cbnz	r1, .L140
1532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1346              		.loc 1 1532 0
 1347 0006 23EA0000 		bic	r0, r3, r0
 1348              	.LVL125:
 1349 000a 9063     		str	r0, [r2, #56]
 1350 000c 7047     		bx	lr
 1351              	.LVL126:
 1352              	.L140:
1528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1353              		.loc 1 1528 0
 1354 000e 1843     		orrs	r0, r0, r3
 1355              	.LVL127:
 1356 0010 9063     		str	r0, [r2, #56]
 1357 0012 7047     		bx	lr
 1358              	.L142:
 1359              		.align	2
 1360              	.L141:
 1361 0014 00380240 		.word	1073887232
 1362              		.cfi_endproc
 1363              	.LFE144:
 1365              		.section	.text.RCC_APB1PeriphClockCmd,"ax",%progbits
 1366              		.align	2
 1367              		.global	RCC_APB1PeriphClockCmd
 1368              		.thumb
 1369              		.thumb_func
 1371              	RCC_APB1PeriphClockCmd:
 1372              	.LFB145:
1573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 1373              		.loc 1 1573 0
 1374              		.cfi_startproc
 1375              		@ args = 0, pretend = 0, frame = 0
 1376              		@ frame_needed = 0, uses_anonymous_args = 0
 1377              		@ link register save eliminated.
 1378              	.LVL128:
1580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1379              		.loc 1 1580 0
 1380 0000 044A     		ldr	r2, .L147
 1381 0002 136C     		ldr	r3, [r2, #64]
1578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 1382              		.loc 1 1578 0
 1383 0004 19B9     		cbnz	r1, .L146
1584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1384              		.loc 1 1584 0
 1385 0006 23EA0000 		bic	r0, r3, r0
 1386              	.LVL129:
 1387 000a 1064     		str	r0, [r2, #64]
 1388 000c 7047     		bx	lr
 1389              	.LVL130:
 1390              	.L146:
1580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1391              		.loc 1 1580 0
 1392 000e 1843     		orrs	r0, r0, r3
 1393              	.LVL131:
 1394 0010 1064     		str	r0, [r2, #64]
 1395 0012 7047     		bx	lr
 1396              	.L148:
 1397              		.align	2
 1398              	.L147:
 1399 0014 00380240 		.word	1073887232
 1400              		.cfi_endproc
 1401              	.LFE145:
 1403              		.section	.text.RCC_APB2PeriphClockCmd,"ax",%progbits
 1404              		.align	2
 1405              		.global	RCC_APB2PeriphClockCmd
 1406              		.thumb
 1407              		.thumb_func
 1409              	RCC_APB2PeriphClockCmd:
 1410              	.LFB146:
1618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 1411              		.loc 1 1618 0
 1412              		.cfi_startproc
 1413              		@ args = 0, pretend = 0, frame = 0
 1414              		@ frame_needed = 0, uses_anonymous_args = 0
 1415              		@ link register save eliminated.
 1416              	.LVL132:
1625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1417              		.loc 1 1625 0
 1418 0000 044A     		ldr	r2, .L153
 1419 0002 536C     		ldr	r3, [r2, #68]
1623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 1420              		.loc 1 1623 0
 1421 0004 19B9     		cbnz	r1, .L152
1629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1422              		.loc 1 1629 0
 1423 0006 23EA0000 		bic	r0, r3, r0
 1424              	.LVL133:
 1425 000a 5064     		str	r0, [r2, #68]
 1426 000c 7047     		bx	lr
 1427              	.LVL134:
 1428              	.L152:
1625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1429              		.loc 1 1625 0
 1430 000e 1843     		orrs	r0, r0, r3
 1431              	.LVL135:
 1432 0010 5064     		str	r0, [r2, #68]
 1433 0012 7047     		bx	lr
 1434              	.L154:
 1435              		.align	2
 1436              	.L153:
 1437 0014 00380240 		.word	1073887232
 1438              		.cfi_endproc
 1439              	.LFE146:
 1441              		.section	.text.RCC_AHB1PeriphResetCmd,"ax",%progbits
 1442              		.align	2
 1443              		.global	RCC_AHB1PeriphResetCmd
 1444              		.thumb
 1445              		.thumb_func
 1447              	RCC_AHB1PeriphResetCmd:
 1448              	.LFB147:
1660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 1449              		.loc 1 1660 0
 1450              		.cfi_startproc
 1451              		@ args = 0, pretend = 0, frame = 0
 1452              		@ frame_needed = 0, uses_anonymous_args = 0
 1453              		@ link register save eliminated.
 1454              	.LVL136:
1667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1455              		.loc 1 1667 0
 1456 0000 044A     		ldr	r2, .L159
 1457 0002 1369     		ldr	r3, [r2, #16]
1665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 1458              		.loc 1 1665 0
 1459 0004 19B9     		cbnz	r1, .L158
1671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1460              		.loc 1 1671 0
 1461 0006 23EA0000 		bic	r0, r3, r0
 1462              	.LVL137:
 1463 000a 1061     		str	r0, [r2, #16]
 1464 000c 7047     		bx	lr
 1465              	.LVL138:
 1466              	.L158:
1667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1467              		.loc 1 1667 0
 1468 000e 1843     		orrs	r0, r0, r3
 1469              	.LVL139:
 1470 0010 1061     		str	r0, [r2, #16]
 1471 0012 7047     		bx	lr
 1472              	.L160:
 1473              		.align	2
 1474              	.L159:
 1475 0014 00380240 		.word	1073887232
 1476              		.cfi_endproc
 1477              	.LFE147:
 1479              		.section	.text.RCC_AHB2PeriphResetCmd,"ax",%progbits
 1480              		.align	2
 1481              		.global	RCC_AHB2PeriphResetCmd
 1482              		.thumb
 1483              		.thumb_func
 1485              	RCC_AHB2PeriphResetCmd:
 1486              	.LFB148:
1689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 1487              		.loc 1 1689 0
 1488              		.cfi_startproc
 1489              		@ args = 0, pretend = 0, frame = 0
 1490              		@ frame_needed = 0, uses_anonymous_args = 0
 1491              		@ link register save eliminated.
 1492              	.LVL140:
1696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1493              		.loc 1 1696 0
 1494 0000 044A     		ldr	r2, .L165
 1495 0002 5369     		ldr	r3, [r2, #20]
1694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 1496              		.loc 1 1694 0
 1497 0004 19B9     		cbnz	r1, .L164
1700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1498              		.loc 1 1700 0
 1499 0006 23EA0000 		bic	r0, r3, r0
 1500              	.LVL141:
 1501 000a 5061     		str	r0, [r2, #20]
 1502 000c 7047     		bx	lr
 1503              	.LVL142:
 1504              	.L164:
1696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1505              		.loc 1 1696 0
 1506 000e 1843     		orrs	r0, r0, r3
 1507              	.LVL143:
 1508 0010 5061     		str	r0, [r2, #20]
 1509 0012 7047     		bx	lr
 1510              	.L166:
 1511              		.align	2
 1512              	.L165:
 1513 0014 00380240 		.word	1073887232
 1514              		.cfi_endproc
 1515              	.LFE148:
 1517              		.section	.text.RCC_AHB3PeriphResetCmd,"ax",%progbits
 1518              		.align	2
 1519              		.global	RCC_AHB3PeriphResetCmd
 1520              		.thumb
 1521              		.thumb_func
 1523              	RCC_AHB3PeriphResetCmd:
 1524              	.LFB149:
1714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 1525              		.loc 1 1714 0
 1526              		.cfi_startproc
 1527              		@ args = 0, pretend = 0, frame = 0
 1528              		@ frame_needed = 0, uses_anonymous_args = 0
 1529              		@ link register save eliminated.
 1530              	.LVL144:
1721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1531              		.loc 1 1721 0
 1532 0000 044A     		ldr	r2, .L171
 1533 0002 9369     		ldr	r3, [r2, #24]
1719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 1534              		.loc 1 1719 0
 1535 0004 19B9     		cbnz	r1, .L170
1725:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1536              		.loc 1 1725 0
 1537 0006 23EA0000 		bic	r0, r3, r0
 1538              	.LVL145:
 1539 000a 9061     		str	r0, [r2, #24]
 1540 000c 7047     		bx	lr
 1541              	.LVL146:
 1542              	.L170:
1721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1543              		.loc 1 1721 0
 1544 000e 1843     		orrs	r0, r0, r3
 1545              	.LVL147:
 1546 0010 9061     		str	r0, [r2, #24]
 1547 0012 7047     		bx	lr
 1548              	.L172:
 1549              		.align	2
 1550              	.L171:
 1551 0014 00380240 		.word	1073887232
 1552              		.cfi_endproc
 1553              	.LFE149:
 1555              		.section	.text.RCC_APB1PeriphResetCmd,"ax",%progbits
 1556              		.align	2
 1557              		.global	RCC_APB1PeriphResetCmd
 1558              		.thumb
 1559              		.thumb_func
 1561              	RCC_APB1PeriphResetCmd:
 1562              	.LFB150:
1763:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 1563              		.loc 1 1763 0
 1564              		.cfi_startproc
 1565              		@ args = 0, pretend = 0, frame = 0
 1566              		@ frame_needed = 0, uses_anonymous_args = 0
 1567              		@ link register save eliminated.
 1568              	.LVL148:
1769:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1569              		.loc 1 1769 0
 1570 0000 044A     		ldr	r2, .L177
 1571 0002 136A     		ldr	r3, [r2, #32]
1767:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 1572              		.loc 1 1767 0
 1573 0004 19B9     		cbnz	r1, .L176
1773:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1574              		.loc 1 1773 0
 1575 0006 23EA0000 		bic	r0, r3, r0
 1576              	.LVL149:
 1577 000a 1062     		str	r0, [r2, #32]
 1578 000c 7047     		bx	lr
 1579              	.LVL150:
 1580              	.L176:
1769:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1581              		.loc 1 1769 0
 1582 000e 1843     		orrs	r0, r0, r3
 1583              	.LVL151:
 1584 0010 1062     		str	r0, [r2, #32]
 1585 0012 7047     		bx	lr
 1586              	.L178:
 1587              		.align	2
 1588              	.L177:
 1589 0014 00380240 		.word	1073887232
 1590              		.cfi_endproc
 1591              	.LFE150:
 1593              		.section	.text.RCC_APB2PeriphResetCmd,"ax",%progbits
 1594              		.align	2
 1595              		.global	RCC_APB2PeriphResetCmd
 1596              		.thumb
 1597              		.thumb_func
 1599              	RCC_APB2PeriphResetCmd:
 1600              	.LFB151:
1804:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 1601              		.loc 1 1804 0
 1602              		.cfi_startproc
 1603              		@ args = 0, pretend = 0, frame = 0
 1604              		@ frame_needed = 0, uses_anonymous_args = 0
 1605              		@ link register save eliminated.
 1606              	.LVL152:
1810:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1607              		.loc 1 1810 0
 1608 0000 044A     		ldr	r2, .L183
 1609 0002 536A     		ldr	r3, [r2, #36]
1808:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 1610              		.loc 1 1808 0
 1611 0004 19B9     		cbnz	r1, .L182
1814:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1612              		.loc 1 1814 0
 1613 0006 23EA0000 		bic	r0, r3, r0
 1614              	.LVL153:
 1615 000a 5062     		str	r0, [r2, #36]
 1616 000c 7047     		bx	lr
 1617              	.LVL154:
 1618              	.L182:
1810:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1619              		.loc 1 1810 0
 1620 000e 1843     		orrs	r0, r0, r3
 1621              	.LVL155:
 1622 0010 5062     		str	r0, [r2, #36]
 1623 0012 7047     		bx	lr
 1624              	.L184:
 1625              		.align	2
 1626              	.L183:
 1627 0014 00380240 		.word	1073887232
 1628              		.cfi_endproc
 1629              	.LFE151:
 1631              		.section	.text.RCC_AHB1PeriphClockLPModeCmd,"ax",%progbits
 1632              		.align	2
 1633              		.global	RCC_AHB1PeriphClockLPModeCmd
 1634              		.thumb
 1635              		.thumb_func
 1637              	RCC_AHB1PeriphClockLPModeCmd:
 1638              	.LFB152:
1853:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 1639              		.loc 1 1853 0
 1640              		.cfi_startproc
 1641              		@ args = 0, pretend = 0, frame = 0
 1642              		@ frame_needed = 0, uses_anonymous_args = 0
 1643              		@ link register save eliminated.
 1644              	.LVL156:
1859:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1645              		.loc 1 1859 0
 1646 0000 044A     		ldr	r2, .L189
 1647 0002 136D     		ldr	r3, [r2, #80]
1857:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 1648              		.loc 1 1857 0
 1649 0004 19B9     		cbnz	r1, .L188
1863:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1650              		.loc 1 1863 0
 1651 0006 23EA0000 		bic	r0, r3, r0
 1652              	.LVL157:
 1653 000a 1065     		str	r0, [r2, #80]
 1654 000c 7047     		bx	lr
 1655              	.LVL158:
 1656              	.L188:
1859:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1657              		.loc 1 1859 0
 1658 000e 1843     		orrs	r0, r0, r3
 1659              	.LVL159:
 1660 0010 1065     		str	r0, [r2, #80]
 1661 0012 7047     		bx	lr
 1662              	.L190:
 1663              		.align	2
 1664              	.L189:
 1665 0014 00380240 		.word	1073887232
 1666              		.cfi_endproc
 1667              	.LFE152:
 1669              		.section	.text.RCC_AHB2PeriphClockLPModeCmd,"ax",%progbits
 1670              		.align	2
 1671              		.global	RCC_AHB2PeriphClockLPModeCmd
 1672              		.thumb
 1673              		.thumb_func
 1675              	RCC_AHB2PeriphClockLPModeCmd:
 1676              	.LFB153:
1885:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 1677              		.loc 1 1885 0
 1678              		.cfi_startproc
 1679              		@ args = 0, pretend = 0, frame = 0
 1680              		@ frame_needed = 0, uses_anonymous_args = 0
 1681              		@ link register save eliminated.
 1682              	.LVL160:
1891:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1683              		.loc 1 1891 0
 1684 0000 044A     		ldr	r2, .L195
 1685 0002 536D     		ldr	r3, [r2, #84]
1889:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 1686              		.loc 1 1889 0
 1687 0004 19B9     		cbnz	r1, .L194
1895:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1688              		.loc 1 1895 0
 1689 0006 23EA0000 		bic	r0, r3, r0
 1690              	.LVL161:
 1691 000a 5065     		str	r0, [r2, #84]
 1692 000c 7047     		bx	lr
 1693              	.LVL162:
 1694              	.L194:
1891:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1695              		.loc 1 1891 0
 1696 000e 1843     		orrs	r0, r0, r3
 1697              	.LVL163:
 1698 0010 5065     		str	r0, [r2, #84]
 1699 0012 7047     		bx	lr
 1700              	.L196:
 1701              		.align	2
 1702              	.L195:
 1703 0014 00380240 		.word	1073887232
 1704              		.cfi_endproc
 1705              	.LFE153:
 1707              		.section	.text.RCC_AHB3PeriphClockLPModeCmd,"ax",%progbits
 1708              		.align	2
 1709              		.global	RCC_AHB3PeriphClockLPModeCmd
 1710              		.thumb
 1711              		.thumb_func
 1713              	RCC_AHB3PeriphClockLPModeCmd:
 1714              	.LFB154:
1913:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 1715              		.loc 1 1913 0
 1716              		.cfi_startproc
 1717              		@ args = 0, pretend = 0, frame = 0
 1718              		@ frame_needed = 0, uses_anonymous_args = 0
 1719              		@ link register save eliminated.
 1720              	.LVL164:
1919:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1721              		.loc 1 1919 0
 1722 0000 044A     		ldr	r2, .L201
 1723 0002 936D     		ldr	r3, [r2, #88]
1917:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 1724              		.loc 1 1917 0
 1725 0004 19B9     		cbnz	r1, .L200
1923:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1726              		.loc 1 1923 0
 1727 0006 23EA0000 		bic	r0, r3, r0
 1728              	.LVL165:
 1729 000a 9065     		str	r0, [r2, #88]
 1730 000c 7047     		bx	lr
 1731              	.LVL166:
 1732              	.L200:
1919:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1733              		.loc 1 1919 0
 1734 000e 1843     		orrs	r0, r0, r3
 1735              	.LVL167:
 1736 0010 9065     		str	r0, [r2, #88]
 1737 0012 7047     		bx	lr
 1738              	.L202:
 1739              		.align	2
 1740              	.L201:
 1741 0014 00380240 		.word	1073887232
 1742              		.cfi_endproc
 1743              	.LFE154:
 1745              		.section	.text.RCC_APB1PeriphClockLPModeCmd,"ax",%progbits
 1746              		.align	2
 1747              		.global	RCC_APB1PeriphClockLPModeCmd
 1748              		.thumb
 1749              		.thumb_func
 1751              	RCC_APB1PeriphClockLPModeCmd:
 1752              	.LFB155:
1965:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 1753              		.loc 1 1965 0
 1754              		.cfi_startproc
 1755              		@ args = 0, pretend = 0, frame = 0
 1756              		@ frame_needed = 0, uses_anonymous_args = 0
 1757              		@ link register save eliminated.
 1758              	.LVL168:
1971:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1759              		.loc 1 1971 0
 1760 0000 044A     		ldr	r2, .L207
 1761 0002 136E     		ldr	r3, [r2, #96]
1969:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 1762              		.loc 1 1969 0
 1763 0004 19B9     		cbnz	r1, .L206
1975:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1764              		.loc 1 1975 0
 1765 0006 23EA0000 		bic	r0, r3, r0
 1766              	.LVL169:
 1767 000a 1066     		str	r0, [r2, #96]
 1768 000c 7047     		bx	lr
 1769              	.LVL170:
 1770              	.L206:
1971:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1771              		.loc 1 1971 0
 1772 000e 1843     		orrs	r0, r0, r3
 1773              	.LVL171:
 1774 0010 1066     		str	r0, [r2, #96]
 1775 0012 7047     		bx	lr
 1776              	.L208:
 1777              		.align	2
 1778              	.L207:
 1779 0014 00380240 		.word	1073887232
 1780              		.cfi_endproc
 1781              	.LFE155:
 1783              		.section	.text.RCC_APB2PeriphClockLPModeCmd,"ax",%progbits
 1784              		.align	2
 1785              		.global	RCC_APB2PeriphClockLPModeCmd
 1786              		.thumb
 1787              		.thumb_func
 1789              	RCC_APB2PeriphClockLPModeCmd:
 1790              	.LFB156:
2010:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 1791              		.loc 1 2010 0
 1792              		.cfi_startproc
 1793              		@ args = 0, pretend = 0, frame = 0
 1794              		@ frame_needed = 0, uses_anonymous_args = 0
 1795              		@ link register save eliminated.
 1796              	.LVL172:
2016:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1797              		.loc 1 2016 0
 1798 0000 044A     		ldr	r2, .L213
 1799 0002 536E     		ldr	r3, [r2, #100]
2014:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 1800              		.loc 1 2014 0
 1801 0004 19B9     		cbnz	r1, .L212
2020:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1802              		.loc 1 2020 0
 1803 0006 23EA0000 		bic	r0, r3, r0
 1804              	.LVL173:
 1805 000a 5066     		str	r0, [r2, #100]
 1806 000c 7047     		bx	lr
 1807              	.LVL174:
 1808              	.L212:
2016:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1809              		.loc 1 2016 0
 1810 000e 1843     		orrs	r0, r0, r3
 1811              	.LVL175:
 1812 0010 5066     		str	r0, [r2, #100]
 1813 0012 7047     		bx	lr
 1814              	.L214:
 1815              		.align	2
 1816              	.L213:
 1817 0014 00380240 		.word	1073887232
 1818              		.cfi_endproc
 1819              	.LFE156:
 1821              		.section	.text.RCC_ITConfig,"ax",%progbits
 1822              		.align	2
 1823              		.global	RCC_ITConfig
 1824              		.thumb
 1825              		.thumb_func
 1827              	RCC_ITConfig:
 1828              	.LFB157:
2056:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 1829              		.loc 1 2056 0
 1830              		.cfi_startproc
 1831              		@ args = 0, pretend = 0, frame = 0
 1832              		@ frame_needed = 0, uses_anonymous_args = 0
 1833              		@ link register save eliminated.
 1834              	.LVL176:
2063:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1835              		.loc 1 2063 0
 1836 0000 044A     		ldr	r2, .L219
 1837 0002 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
2060:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 1838              		.loc 1 2060 0
 1839 0004 19B9     		cbnz	r1, .L218
2068:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1840              		.loc 1 2068 0
 1841 0006 23EA0000 		bic	r0, r3, r0
 1842              	.LVL177:
 1843 000a 1070     		strb	r0, [r2]
 1844 000c 7047     		bx	lr
 1845              	.LVL178:
 1846              	.L218:
2063:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1847              		.loc 1 2063 0
 1848 000e 1843     		orrs	r0, r0, r3
 1849              	.LVL179:
 1850 0010 1070     		strb	r0, [r2]
 1851 0012 7047     		bx	lr
 1852              	.L220:
 1853              		.align	2
 1854              	.L219:
 1855 0014 0D380240 		.word	1073887245
 1856              		.cfi_endproc
 1857              	.LFE157:
 1859              		.section	.text.RCC_GetFlagStatus,"ax",%progbits
 1860              		.align	2
 1861              		.global	RCC_GetFlagStatus
 1862              		.thumb
 1863              		.thumb_func
 1865              	RCC_GetFlagStatus:
 1866              	.LFB158:
2093:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmp = 0;
 1867              		.loc 1 2093 0
 1868              		.cfi_startproc
 1869              		@ args = 0, pretend = 0, frame = 0
 1870              		@ frame_needed = 0, uses_anonymous_args = 0
 1871              		@ link register save eliminated.
 1872              	.LVL180:
2102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (tmp == 1)               /* The flag to check is in CR register */
 1873              		.loc 1 2102 0
 1874 0000 4309     		lsrs	r3, r0, #5
 1875              	.LVL181:
2103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 1876              		.loc 1 2103 0
 1877 0002 012B     		cmp	r3, #1
 1878 0004 0BD0     		beq	.L225
2107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 1879              		.loc 1 2107 0
 1880 0006 022B     		cmp	r3, #2
2109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1881              		.loc 1 2109 0
 1882 0008 094B     		ldr	r3, .L226
 1883              	.LVL182:
 1884 000a 0CBF     		ite	eq
 1885 000c 1A6F     		ldreq	r2, [r3, #112]
 1886              	.LVL183:
2113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1887              		.loc 1 2113 0
 1888 000e 5A6F     		ldrne	r2, [r3, #116]
 1889              	.LVL184:
 1890              		.loc 1 2118 0
 1891 0010 00F01F03 		and	r3, r0, #31
 1892 0014 22FA03F0 		lsr	r0, r2, r3
 1893              	.LVL185:
2119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     bitstatus = SET;
2121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
2123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     bitstatus = RESET;
2125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Return the flag status */
2127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return bitstatus;
2128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1894              		.loc 1 2128 0
 1895 0018 00F00100 		and	r0, r0, #1
 1896 001c 7047     		bx	lr
 1897              	.LVL186:
 1898              	.L225:
2105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 1899              		.loc 1 2105 0
 1900 001e 044B     		ldr	r3, .L226
 1901              	.LVL187:
 1902 0020 1A68     		ldr	r2, [r3]
 1903              	.LVL188:
2118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 1904              		.loc 1 2118 0
 1905 0022 00F01F03 		and	r3, r0, #31
 1906 0026 22FA03F0 		lsr	r0, r2, r3
 1907              	.LVL189:
 1908              		.loc 1 2128 0
 1909 002a 00F00100 		and	r0, r0, #1
 1910 002e 7047     		bx	lr
 1911              	.L227:
 1912              		.align	2
 1913              	.L226:
 1914 0030 00380240 		.word	1073887232
 1915              		.cfi_endproc
 1916              	.LFE158:
 1918              		.section	.text.RCC_ClearFlag,"ax",%progbits
 1919              		.align	2
 1920              		.global	RCC_ClearFlag
 1921              		.thumb
 1922              		.thumb_func
 1924              	RCC_ClearFlag:
 1925              	.LFB159:
2129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
2131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Clears the RCC reset flags.
2132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         The reset flags are: RCC_FLAG_PINRST, RCC_FLAG_PORRST,  RCC_FLAG_SFTRST,
2133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
2134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  None
2135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
2136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
2137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_ClearFlag(void)
2138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1926              		.loc 1 2138 0
 1927              		.cfi_startproc
 1928              		@ args = 0, pretend = 0, frame = 0
 1929              		@ frame_needed = 0, uses_anonymous_args = 0
 1930              		@ link register save eliminated.
2139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set RMVF bit to clear the reset flags */
2140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CSR |= RCC_CSR_RMVF;
 1931              		.loc 1 2140 0
 1932 0000 024A     		ldr	r2, .L229
 1933 0002 536F     		ldr	r3, [r2, #116]
 1934 0004 43F08073 		orr	r3, r3, #16777216
 1935 0008 5367     		str	r3, [r2, #116]
 1936 000a 7047     		bx	lr
 1937              	.L230:
 1938              		.align	2
 1939              	.L229:
 1940 000c 00380240 		.word	1073887232
 1941              		.cfi_endproc
 1942              	.LFE159:
 1944              		.section	.text.RCC_GetITStatus,"ax",%progbits
 1945              		.align	2
 1946              		.global	RCC_GetITStatus
 1947              		.thumb
 1948              		.thumb_func
 1950              	RCC_GetITStatus:
 1951              	.LFB160:
2141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
2142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
2144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Checks whether the specified RCC interrupt has occurred or not.
2145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt source to check.
2146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
2147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
2148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
2149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
2150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
2151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
2152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt           
2153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLSAIRDY: PLLSAI clock ready interrupt (only for STM32F42xxx/43xxx devi
2154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_CSS: Clock Security System interrupt
2155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval The new state of RCC_IT (SET or RESET).
2156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
2157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** ITStatus RCC_GetITStatus(uint8_t RCC_IT)
2158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1952              		.loc 1 2158 0
 1953              		.cfi_startproc
 1954              		@ args = 0, pretend = 0, frame = 0
 1955              		@ frame_needed = 0, uses_anonymous_args = 0
 1956              		@ link register save eliminated.
 1957              	.LVL190:
2159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ITStatus bitstatus = RESET;
2160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_GET_IT(RCC_IT));
2163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the status of the specified RCC interrupt */
2165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 1958              		.loc 1 2165 0
 1959 0000 034B     		ldr	r3, .L232
 1960 0002 DB68     		ldr	r3, [r3, #12]
 1961              	.LVL191:
 1962 0004 1842     		tst	r0, r3
2166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     bitstatus = SET;
2168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
2170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
2171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     bitstatus = RESET;
2172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
2173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Return the RCC_IT status */
2174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return  bitstatus;
2175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1963              		.loc 1 2175 0
 1964 0006 14BF     		ite	ne
 1965 0008 0120     		movne	r0, #1
 1966              	.LVL192:
 1967 000a 0020     		moveq	r0, #0
 1968 000c 7047     		bx	lr
 1969              	.L233:
 1970 000e 00BF     		.align	2
 1971              	.L232:
 1972 0010 00380240 		.word	1073887232
 1973              		.cfi_endproc
 1974              	.LFE160:
 1976              		.section	.text.RCC_ClearITPendingBit,"ax",%progbits
 1977              		.align	2
 1978              		.global	RCC_ClearITPendingBit
 1979              		.thumb
 1980              		.thumb_func
 1982              	RCC_ClearITPendingBit:
 1983              	.LFB161:
2176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
2178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Clears the RCC's interrupt pending bits.
2179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the interrupt pending bit to clear.
2180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
2181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
2182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
2183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
2184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
2185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
2186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
2187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLSAIRDY: PLLSAI ready interrupt (only for STM32F42xxx/43xxx devices)  
2188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_CSS: Clock Security System interrupt
2189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
2190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
2191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_ClearITPendingBit(uint8_t RCC_IT)
2192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1984              		.loc 1 2192 0
 1985              		.cfi_startproc
 1986              		@ args = 0, pretend = 0, frame = 0
 1987              		@ frame_needed = 0, uses_anonymous_args = 0
 1988              		@ link register save eliminated.
 1989              	.LVL193:
2193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
2194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CLEAR_IT(RCC_IT));
2195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
2196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
2197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      pending bits */
2198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 1990              		.loc 1 2198 0
 1991 0000 014B     		ldr	r3, .L235
 1992 0002 1870     		strb	r0, [r3]
 1993 0004 7047     		bx	lr
 1994              	.L236:
 1995 0006 00BF     		.align	2
 1996              	.L235:
 1997 0008 0E380240 		.word	1073887246
 1998              		.cfi_endproc
 1999              	.LFE161:
 2001              		.section	.data.APBAHBPrescTable,"aw",%progbits
 2002              		.align	2
 2003              		.set	.LANCHOR0,. + 0
 2006              	APBAHBPrescTable:
 2007 0000 00       		.byte	0
 2008 0001 00       		.byte	0
 2009 0002 00       		.byte	0
 2010 0003 00       		.byte	0
 2011 0004 01       		.byte	1
 2012 0005 02       		.byte	2
 2013 0006 03       		.byte	3
 2014 0007 04       		.byte	4
 2015 0008 01       		.byte	1
 2016 0009 02       		.byte	2
 2017 000a 03       		.byte	3
 2018 000b 04       		.byte	4
 2019 000c 06       		.byte	6
 2020 000d 07       		.byte	7
 2021 000e 08       		.byte	8
 2022 000f 09       		.byte	9
 2023              		.text
 2024              	.Letext0:
 2025              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\4.9 2014q4\\arm-none-eabi\\include\\mach
 2026              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\4.9 2014q4\\arm-none-eabi\\include\\stdi
 2027              		.file 4 "libs/Device/STM32F4xx/Include/stm32f4xx.h"
 2028              		.file 5 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rcc.h"
 2029              		.file 6 "libs/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_rcc.c
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:20     .text.RCC_DeInit:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:25     .text.RCC_DeInit:00000000 RCC_DeInit
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:88     .text.RCC_DeInit:00000040 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:96     .text.RCC_HSEConfig:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:101    .text.RCC_HSEConfig:00000000 RCC_HSEConfig
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:119    .text.RCC_HSEConfig:0000000c $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:124    .text.RCC_WaitForHSEStartUp:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:129    .text.RCC_WaitForHSEStartUp:00000000 RCC_WaitForHSEStartUp
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:202    .text.RCC_WaitForHSEStartUp:00000030 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:207    .text.RCC_AdjustHSICalibrationValue:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:212    .text.RCC_AdjustHSICalibrationValue:00000000 RCC_AdjustHSICalibrationValue
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:236    .text.RCC_AdjustHSICalibrationValue:00000010 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:241    .text.RCC_HSICmd:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:246    .text.RCC_HSICmd:00000000 RCC_HSICmd
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:261    .text.RCC_HSICmd:00000008 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:266    .text.RCC_LSEConfig:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:271    .text.RCC_LSEConfig:00000000 RCC_LSEConfig
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:306    .text.RCC_LSEConfig:0000001c $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:311    .text.RCC_LSICmd:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:316    .text.RCC_LSICmd:00000000 RCC_LSICmd
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:331    .text.RCC_LSICmd:00000008 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:336    .text.RCC_PLLConfig:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:341    .text.RCC_PLLConfig:00000000 RCC_PLLConfig
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:380    .text.RCC_PLLConfig:00000020 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:385    .text.RCC_PLLCmd:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:390    .text.RCC_PLLCmd:00000000 RCC_PLLCmd
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:405    .text.RCC_PLLCmd:00000008 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:410    .text.RCC_PLLI2SConfig:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:415    .text.RCC_PLLI2SConfig:00000000 RCC_PLLI2SConfig
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:436    .text.RCC_PLLI2SConfig:00000014 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:441    .text.RCC_PLLI2SCmd:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:446    .text.RCC_PLLI2SCmd:00000000 RCC_PLLI2SCmd
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:461    .text.RCC_PLLI2SCmd:00000008 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:466    .text.RCC_PLLSAIConfig:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:471    .text.RCC_PLLSAIConfig:00000000 RCC_PLLSAIConfig
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:492    .text.RCC_PLLSAIConfig:00000014 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:497    .text.RCC_PLLSAICmd:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:502    .text.RCC_PLLSAICmd:00000000 RCC_PLLSAICmd
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:517    .text.RCC_PLLSAICmd:00000008 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:522    .text.RCC_ClockSecuritySystemCmd:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:527    .text.RCC_ClockSecuritySystemCmd:00000000 RCC_ClockSecuritySystemCmd
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:542    .text.RCC_ClockSecuritySystemCmd:00000008 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:547    .text.RCC_MCO1Config:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:552    .text.RCC_MCO1Config:00000000 RCC_MCO1Config
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:578    .text.RCC_MCO1Config:00000010 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:583    .text.RCC_MCO2Config:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:588    .text.RCC_MCO2Config:00000000 RCC_MCO2Config
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:614    .text.RCC_MCO2Config:00000010 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:619    .text.RCC_SYSCLKConfig:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:624    .text.RCC_SYSCLKConfig:00000000 RCC_SYSCLKConfig
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:648    .text.RCC_SYSCLKConfig:00000010 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:653    .text.RCC_GetSYSCLKSource:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:658    .text.RCC_GetSYSCLKSource:00000000 RCC_GetSYSCLKSource
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:674    .text.RCC_GetSYSCLKSource:0000000c $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:679    .text.RCC_HCLKConfig:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:684    .text.RCC_HCLKConfig:00000000 RCC_HCLKConfig
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:708    .text.RCC_HCLKConfig:00000010 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:713    .text.RCC_PCLK1Config:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:718    .text.RCC_PCLK1Config:00000000 RCC_PCLK1Config
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:742    .text.RCC_PCLK1Config:00000010 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:747    .text.RCC_PCLK2Config:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:752    .text.RCC_PCLK2Config:00000000 RCC_PCLK2Config
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:776    .text.RCC_PCLK2Config:00000010 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:781    .text.RCC_GetClocksFreq:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:786    .text.RCC_GetClocksFreq:00000000 RCC_GetClocksFreq
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:918    .text.RCC_GetClocksFreq:00000088 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:926    .text.RCC_RTCCLKConfig:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:931    .text.RCC_RTCCLKConfig:00000000 RCC_RTCCLKConfig
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:971    .text.RCC_RTCCLKConfig:0000002c $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:976    .text.RCC_RTCCLKCmd:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:981    .text.RCC_RTCCLKCmd:00000000 RCC_RTCCLKCmd
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:996    .text.RCC_RTCCLKCmd:00000008 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1001   .text.RCC_BackupResetCmd:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1006   .text.RCC_BackupResetCmd:00000000 RCC_BackupResetCmd
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1021   .text.RCC_BackupResetCmd:00000008 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1026   .text.RCC_I2SCLKConfig:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1031   .text.RCC_I2SCLKConfig:00000000 RCC_I2SCLKConfig
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1046   .text.RCC_I2SCLKConfig:00000008 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1051   .text.RCC_SAIPLLI2SClkDivConfig:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1056   .text.RCC_SAIPLLI2SClkDivConfig:00000000 RCC_SAIPLLI2SClkDivConfig
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1083   .text.RCC_SAIPLLI2SClkDivConfig:00000014 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1088   .text.RCC_SAIPLLSAIClkDivConfig:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1093   .text.RCC_SAIPLLSAIClkDivConfig:00000000 RCC_SAIPLLSAIClkDivConfig
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1120   .text.RCC_SAIPLLSAIClkDivConfig:00000018 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1125   .text.RCC_SAIBlockACLKConfig:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1130   .text.RCC_SAIBlockACLKConfig:00000000 RCC_SAIBlockACLKConfig
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1154   .text.RCC_SAIBlockACLKConfig:00000014 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1159   .text.RCC_SAIBlockBCLKConfig:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1164   .text.RCC_SAIBlockBCLKConfig:00000000 RCC_SAIBlockBCLKConfig
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1188   .text.RCC_SAIBlockBCLKConfig:00000014 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1193   .text.RCC_LTDCCLKDivConfig:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1198   .text.RCC_LTDCCLKDivConfig:00000000 RCC_LTDCCLKDivConfig
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1222   .text.RCC_LTDCCLKDivConfig:00000014 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1227   .text.RCC_TIMCLKPresConfig:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1232   .text.RCC_TIMCLKPresConfig:00000000 RCC_TIMCLKPresConfig
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1247   .text.RCC_TIMCLKPresConfig:00000008 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1252   .text.RCC_AHB1PeriphClockCmd:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1257   .text.RCC_AHB1PeriphClockCmd:00000000 RCC_AHB1PeriphClockCmd
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1285   .text.RCC_AHB1PeriphClockCmd:00000014 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1290   .text.RCC_AHB2PeriphClockCmd:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1295   .text.RCC_AHB2PeriphClockCmd:00000000 RCC_AHB2PeriphClockCmd
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1323   .text.RCC_AHB2PeriphClockCmd:00000014 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1328   .text.RCC_AHB3PeriphClockCmd:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1333   .text.RCC_AHB3PeriphClockCmd:00000000 RCC_AHB3PeriphClockCmd
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1361   .text.RCC_AHB3PeriphClockCmd:00000014 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1366   .text.RCC_APB1PeriphClockCmd:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1371   .text.RCC_APB1PeriphClockCmd:00000000 RCC_APB1PeriphClockCmd
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1399   .text.RCC_APB1PeriphClockCmd:00000014 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1404   .text.RCC_APB2PeriphClockCmd:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1409   .text.RCC_APB2PeriphClockCmd:00000000 RCC_APB2PeriphClockCmd
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1437   .text.RCC_APB2PeriphClockCmd:00000014 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1442   .text.RCC_AHB1PeriphResetCmd:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1447   .text.RCC_AHB1PeriphResetCmd:00000000 RCC_AHB1PeriphResetCmd
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1475   .text.RCC_AHB1PeriphResetCmd:00000014 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1480   .text.RCC_AHB2PeriphResetCmd:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1485   .text.RCC_AHB2PeriphResetCmd:00000000 RCC_AHB2PeriphResetCmd
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1513   .text.RCC_AHB2PeriphResetCmd:00000014 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1518   .text.RCC_AHB3PeriphResetCmd:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1523   .text.RCC_AHB3PeriphResetCmd:00000000 RCC_AHB3PeriphResetCmd
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1551   .text.RCC_AHB3PeriphResetCmd:00000014 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1556   .text.RCC_APB1PeriphResetCmd:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1561   .text.RCC_APB1PeriphResetCmd:00000000 RCC_APB1PeriphResetCmd
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1589   .text.RCC_APB1PeriphResetCmd:00000014 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1594   .text.RCC_APB2PeriphResetCmd:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1599   .text.RCC_APB2PeriphResetCmd:00000000 RCC_APB2PeriphResetCmd
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1627   .text.RCC_APB2PeriphResetCmd:00000014 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1632   .text.RCC_AHB1PeriphClockLPModeCmd:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1637   .text.RCC_AHB1PeriphClockLPModeCmd:00000000 RCC_AHB1PeriphClockLPModeCmd
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1665   .text.RCC_AHB1PeriphClockLPModeCmd:00000014 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1670   .text.RCC_AHB2PeriphClockLPModeCmd:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1675   .text.RCC_AHB2PeriphClockLPModeCmd:00000000 RCC_AHB2PeriphClockLPModeCmd
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1703   .text.RCC_AHB2PeriphClockLPModeCmd:00000014 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1708   .text.RCC_AHB3PeriphClockLPModeCmd:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1713   .text.RCC_AHB3PeriphClockLPModeCmd:00000000 RCC_AHB3PeriphClockLPModeCmd
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1741   .text.RCC_AHB3PeriphClockLPModeCmd:00000014 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1746   .text.RCC_APB1PeriphClockLPModeCmd:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1751   .text.RCC_APB1PeriphClockLPModeCmd:00000000 RCC_APB1PeriphClockLPModeCmd
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1779   .text.RCC_APB1PeriphClockLPModeCmd:00000014 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1784   .text.RCC_APB2PeriphClockLPModeCmd:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1789   .text.RCC_APB2PeriphClockLPModeCmd:00000000 RCC_APB2PeriphClockLPModeCmd
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1817   .text.RCC_APB2PeriphClockLPModeCmd:00000014 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1822   .text.RCC_ITConfig:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1827   .text.RCC_ITConfig:00000000 RCC_ITConfig
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1855   .text.RCC_ITConfig:00000014 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1860   .text.RCC_GetFlagStatus:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1865   .text.RCC_GetFlagStatus:00000000 RCC_GetFlagStatus
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1914   .text.RCC_GetFlagStatus:00000030 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1919   .text.RCC_ClearFlag:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1924   .text.RCC_ClearFlag:00000000 RCC_ClearFlag
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1940   .text.RCC_ClearFlag:0000000c $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1945   .text.RCC_GetITStatus:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1950   .text.RCC_GetITStatus:00000000 RCC_GetITStatus
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1972   .text.RCC_GetITStatus:00000010 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1977   .text.RCC_ClearITPendingBit:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1982   .text.RCC_ClearITPendingBit:00000000 RCC_ClearITPendingBit
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:1997   .text.RCC_ClearITPendingBit:00000008 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:2002   .data.APBAHBPrescTable:00000000 $d
C:\Users\Student\AppData\Local\Temp\ccRwyQd1.s:2006   .data.APBAHBPrescTable:00000000 APBAHBPrescTable
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
