
obj/STM32F4_Proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013a8  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000008  08001530  08001530  00009530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08001538  08001538  00009538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000844  20000000  0800153c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000000f4  20000848  08001d80  00010848  2**3
                  ALLOC
  6 ._user_heap_stack 00000400  2000093c  08001d80  0001093c  2**0
                  ALLOC
  7 .ARM.attributes 0000002e  00000000  00000000  00010844  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000829c  00000000  00000000  00010872  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001a76  00000000  00000000  00018b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000526a  00000000  00000000  0001a584  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000730  00000000  00000000  0001f7ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008e0  00000000  00000000  0001ff1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002ebf  00000000  00000000  000207fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002714  00000000  00000000  000236bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000070  00000000  00000000  00025dd1  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001628  00000000  00000000  00025e44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000848 	.word	0x20000848
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001518 	.word	0x08001518

080001ac <frame_dummy>:
 80001ac:	4b08      	ldr	r3, [pc, #32]	; (80001d0 <frame_dummy+0x24>)
 80001ae:	b510      	push	{r4, lr}
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4808      	ldr	r0, [pc, #32]	; (80001d4 <frame_dummy+0x28>)
 80001b4:	4908      	ldr	r1, [pc, #32]	; (80001d8 <frame_dummy+0x2c>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4808      	ldr	r0, [pc, #32]	; (80001dc <frame_dummy+0x30>)
 80001bc:	6803      	ldr	r3, [r0, #0]
 80001be:	b903      	cbnz	r3, 80001c2 <frame_dummy+0x16>
 80001c0:	bd10      	pop	{r4, pc}
 80001c2:	4b07      	ldr	r3, [pc, #28]	; (80001e0 <frame_dummy+0x34>)
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d0fb      	beq.n	80001c0 <frame_dummy+0x14>
 80001c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80001cc:	4718      	bx	r3
 80001ce:	bf00      	nop
 80001d0:	00000000 	.word	0x00000000
 80001d4:	08001518 	.word	0x08001518
 80001d8:	2000084c 	.word	0x2000084c
 80001dc:	20000844 	.word	0x20000844
 80001e0:	00000000 	.word	0x00000000

080001e4 <leds_init>:
#include <stdio.h>
#include <stdlib.h>



void leds_init(){
 80001e4:	b530      	push	{r4, r5, lr}

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 80001e6:	2040      	movs	r0, #64	; 0x40
#include <stdio.h>
#include <stdlib.h>



void leds_init(){
 80001e8:	b083      	sub	sp, #12

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 80001ea:	2101      	movs	r1, #1
 80001ec:	f000 fcb4 	bl	8000b58 <RCC_AHB1PeriphClockCmd>
	GPIO_InitDef.GPIO_OType= GPIO_OType_PP;
	GPIO_InitDef.GPIO_PuPd= GPIO_PuPd_NOPULL;
	GPIO_InitDef.GPIO_Speed= GPIO_Speed_50MHz;
	
	
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN;
 80001f0:	4a0e      	ldr	r2, [pc, #56]	; (800022c <leds_init+0x48>)
	GPIO_DeInit(GPIOG);
 80001f2:	4c0f      	ldr	r4, [pc, #60]	; (8000230 <leds_init+0x4c>)
void leds_init(){

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
	GPIO_InitTypeDef GPIO_InitDef;
	GPIO_InitDef.GPIO_Mode=GPIO_Mode_OUT;
	GPIO_InitDef.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14;
 80001f4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80001f8:	9300      	str	r3, [sp, #0]
	GPIO_InitDef.GPIO_OType= GPIO_OType_PP;
	GPIO_InitDef.GPIO_PuPd= GPIO_PuPd_NOPULL;
	GPIO_InitDef.GPIO_Speed= GPIO_Speed_50MHz;
	
	
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN;
 80001fa:	6b13      	ldr	r3, [r2, #48]	; 0x30

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
	GPIO_InitTypeDef GPIO_InitDef;
	GPIO_InitDef.GPIO_Mode=GPIO_Mode_OUT;
	GPIO_InitDef.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14;
	GPIO_InitDef.GPIO_OType= GPIO_OType_PP;
 80001fc:	2100      	movs	r1, #0
	GPIO_InitDef.GPIO_PuPd= GPIO_PuPd_NOPULL;
	GPIO_InitDef.GPIO_Speed= GPIO_Speed_50MHz;
	
	
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN;
 80001fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40

void leds_init(){

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
	GPIO_InitTypeDef GPIO_InitDef;
	GPIO_InitDef.GPIO_Mode=GPIO_Mode_OUT;
 8000202:	2501      	movs	r5, #1
	GPIO_InitDef.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14;
	GPIO_InitDef.GPIO_OType= GPIO_OType_PP;
	GPIO_InitDef.GPIO_PuPd= GPIO_PuPd_NOPULL;
	GPIO_InitDef.GPIO_Speed= GPIO_Speed_50MHz;
 8000204:	2002      	movs	r0, #2

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
	GPIO_InitTypeDef GPIO_InitDef;
	GPIO_InitDef.GPIO_Mode=GPIO_Mode_OUT;
	GPIO_InitDef.GPIO_Pin = GPIO_Pin_13 | GPIO_Pin_14;
	GPIO_InitDef.GPIO_OType= GPIO_OType_PP;
 8000206:	f88d 1006 	strb.w	r1, [sp, #6]
	GPIO_InitDef.GPIO_PuPd= GPIO_PuPd_NOPULL;
 800020a:	f88d 1007 	strb.w	r1, [sp, #7]
	GPIO_InitDef.GPIO_Speed= GPIO_Speed_50MHz;
 800020e:	f88d 0005 	strb.w	r0, [sp, #5]

void leds_init(){

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
	GPIO_InitTypeDef GPIO_InitDef;
	GPIO_InitDef.GPIO_Mode=GPIO_Mode_OUT;
 8000212:	f88d 5004 	strb.w	r5, [sp, #4]
	GPIO_InitDef.GPIO_PuPd= GPIO_PuPd_NOPULL;
	GPIO_InitDef.GPIO_Speed= GPIO_Speed_50MHz;
	
	
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN;
	GPIO_DeInit(GPIOG);
 8000216:	4620      	mov	r0, r4
	GPIO_InitDef.GPIO_OType= GPIO_OType_PP;
	GPIO_InitDef.GPIO_PuPd= GPIO_PuPd_NOPULL;
	GPIO_InitDef.GPIO_Speed= GPIO_Speed_50MHz;
	
	
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN;
 8000218:	6313      	str	r3, [r2, #48]	; 0x30
	GPIO_DeInit(GPIOG);
 800021a:	f000 fb95 	bl	8000948 <GPIO_DeInit>
	GPIO_Init(GPIOG, &GPIO_InitDef);
 800021e:	4620      	mov	r0, r4
 8000220:	4669      	mov	r1, sp
 8000222:	f000 fc3f 	bl	8000aa4 <GPIO_Init>


  
}
 8000226:	b003      	add	sp, #12
 8000228:	bd30      	pop	{r4, r5, pc}
 800022a:	bf00      	nop
 800022c:	40023800 	.word	0x40023800
 8000230:	40021800 	.word	0x40021800

08000234 <main>:
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
}


int main(void)
{
 8000234:	b508      	push	{r3, lr}
	//init();
	leds_init();
 8000236:	f7ff ffd5 	bl	80001e4 <leds_init>
	
	while(1)
	{
		char key = debug_inkey();
 800023a:	f000 f81d 	bl	8000278 <debug_inkey>
		
		if(key)
 800023e:	2800      	cmp	r0, #0
 8000240:	d0fb      	beq.n	800023a <main+0x6>
		{
			switch(key)
 8000242:	2861      	cmp	r0, #97	; 0x61
			{
				case 'a':
					xprintf("Wyslano znak \"a\"\n");
					break;
				default:
					xprintf("nie rozpoznane polecenie\n");
 8000244:	4802      	ldr	r0, [pc, #8]	; (8000250 <main+0x1c>)
		if(key)
		{
			switch(key)
			{
				case 'a':
					xprintf("Wyslano znak \"a\"\n");
 8000246:	bf08      	it	eq
 8000248:	4802      	ldreq	r0, [pc, #8]	; (8000254 <main+0x20>)
					break;
				default:
					xprintf("nie rozpoznane polecenie\n");
 800024a:	f000 f87f 	bl	800034c <xprintf>
					break;
 800024e:	e7f4      	b.n	800023a <main+0x6>
 8000250:	080014f4 	.word	0x080014f4
 8000254:	080014e0 	.word	0x080014e0

08000258 <debug_chr>:
}


//send chr via UART (platform dependent)
void debug_chr(char chr)
{
 8000258:	b510      	push	{r4, lr}
 800025a:	4604      	mov	r4, r0
	while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET) { ; }
 800025c:	4805      	ldr	r0, [pc, #20]	; (8000274 <debug_chr+0x1c>)
 800025e:	2180      	movs	r1, #128	; 0x80
 8000260:	f000 fc9a 	bl	8000b98 <USART_GetFlagStatus>
 8000264:	2800      	cmp	r0, #0
 8000266:	d0f9      	beq.n	800025c <debug_chr+0x4>
	USART_SendData(USART1, (uint16_t)chr);
 8000268:	4621      	mov	r1, r4
 800026a:	4802      	ldr	r0, [pc, #8]	; (8000274 <debug_chr+0x1c>)
}
 800026c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

//send chr via UART (platform dependent)
void debug_chr(char chr)
{
	while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET) { ; }
	USART_SendData(USART1, (uint16_t)chr);
 8000270:	f000 bc8a 	b.w	8000b88 <USART_SendData>
 8000274:	40011000 	.word	0x40011000

08000278 <debug_inkey>:

//returns ascii value of last char received
//returns 0 if no char was received since last debug_inkey call
//(platform dependent)
char debug_inkey(void)
{
 8000278:	b508      	push	{r3, lr}
	if(USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == RESET)
 800027a:	4805      	ldr	r0, [pc, #20]	; (8000290 <debug_inkey+0x18>)
 800027c:	2120      	movs	r1, #32
 800027e:	f000 fc8b 	bl	8000b98 <USART_GetFlagStatus>
 8000282:	b118      	cbz	r0, 800028c <debug_inkey+0x14>
		return(0);
	else
		return (unsigned char)USART_ReceiveData(USART1);
 8000284:	4802      	ldr	r0, [pc, #8]	; (8000290 <debug_inkey+0x18>)
 8000286:	f000 fc83 	bl	8000b90 <USART_ReceiveData>
 800028a:	b2c0      	uxtb	r0, r0
}
 800028c:	bd08      	pop	{r3, pc}
 800028e:	bf00      	nop
 8000290:	40011000 	.word	0x40011000

08000294 <xputc>:



void xputc (char c)
{
	if (c == '\n') debug_chr('\r');
 8000294:	280a      	cmp	r0, #10




void xputc (char c)
{
 8000296:	b510      	push	{r4, lr}
 8000298:	4604      	mov	r4, r0
	if (c == '\n') debug_chr('\r');
 800029a:	d004      	beq.n	80002a6 <xputc+0x12>
	debug_chr(c);
 800029c:	4620      	mov	r0, r4
}
 800029e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}


void xputc (char c)
{
	if (c == '\n') debug_chr('\r');
	debug_chr(c);
 80002a2:	f7ff bfd9 	b.w	8000258 <debug_chr>



void xputc (char c)
{
	if (c == '\n') debug_chr('\r');
 80002a6:	200d      	movs	r0, #13
 80002a8:	f7ff ffd6 	bl	8000258 <debug_chr>
	debug_chr(c);
 80002ac:	4620      	mov	r0, r4
}
 80002ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}


void xputc (char c)
{
	if (c == '\n') debug_chr('\r');
	debug_chr(c);
 80002b2:	f7ff bfd1 	b.w	8000258 <debug_chr>
 80002b6:	bf00      	nop

080002b8 <xitoa>:




void xitoa (long val, int radix, int len)
{
 80002b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t c, r, sgn = 0, pad = ' ';
	uint8_t s[20], i = 0;
	uint32_t v;


	if (radix < 0) {
 80002ba:	2900      	cmp	r1, #0




void xitoa (long val, int radix, int len)
{
 80002bc:	b087      	sub	sp, #28
	uint8_t c, r, sgn = 0, pad = ' ';
	uint8_t s[20], i = 0;
	uint32_t v;


	if (radix < 0) {
 80002be:	db3d      	blt.n	800033c <xitoa+0x84>



void xitoa (long val, int radix, int len)
{
	uint8_t c, r, sgn = 0, pad = ' ';
 80002c0:	2600      	movs	r6, #0
			sgn = '-';
		}
	}
	v = val;
	r = radix;
	if (len < 0) {
 80002c2:	2a00      	cmp	r2, #0
		len = -len;
 80002c4:	bfba      	itte	lt
 80002c6:	4252      	neglt	r2, r2
		pad = '0';
 80002c8:	2530      	movlt	r5, #48	; 0x30



void xitoa (long val, int radix, int len)
{
	uint8_t c, r, sgn = 0, pad = ' ';
 80002ca:	2520      	movge	r5, #32
	r = radix;
	if (len < 0) {
		len = -len;
		pad = '0';
	}
	if (len > 20) return;
 80002cc:	2a14      	cmp	r2, #20
 80002ce:	dc33      	bgt.n	8000338 <xitoa+0x80>
 80002d0:	b2c9      	uxtb	r1, r1
		if (val < 0) {
			val = -val;
			sgn = '-';
		}
	}
	v = val;
 80002d2:	2400      	movs	r4, #0
		len = -len;
		pad = '0';
	}
	if (len > 20) return;
	do {
		c = (uint8_t)(v % r);
 80002d4:	fbb0 f3f1 	udiv	r3, r0, r1
 80002d8:	fb01 0013 	mls	r0, r1, r3, r0
 80002dc:	b2c0      	uxtb	r0, r0
		if (c >= 10) c += 7;
 80002de:	2809      	cmp	r0, #9
 80002e0:	bf88      	it	hi
 80002e2:	3007      	addhi	r0, #7
		c += '0';
		s[i++] = c;
 80002e4:	af06      	add	r7, sp, #24
 80002e6:	4427      	add	r7, r4
		pad = '0';
	}
	if (len > 20) return;
	do {
		c = (uint8_t)(v % r);
		if (c >= 10) c += 7;
 80002e8:	bf88      	it	hi
 80002ea:	b2c0      	uxtbhi	r0, r0
		c += '0';
 80002ec:	3030      	adds	r0, #48	; 0x30
		s[i++] = c;
 80002ee:	3401      	adds	r4, #1
 80002f0:	f807 0c14 	strb.w	r0, [r7, #-20]
 80002f4:	b2e4      	uxtb	r4, r4
		v /= r;
 80002f6:	4618      	mov	r0, r3
	} while (v);
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d1eb      	bne.n	80002d4 <xitoa+0x1c>
	if (len > 20) return;
	do {
		c = (uint8_t)(v % r);
		if (c >= 10) c += 7;
		c += '0';
		s[i++] = c;
 80002fc:	4623      	mov	r3, r4
		v /= r;
	} while (v);
	if (sgn) s[i++] = sgn;
 80002fe:	b176      	cbz	r6, 800031e <xitoa+0x66>
 8000300:	a906      	add	r1, sp, #24
 8000302:	3401      	adds	r4, #1
 8000304:	440b      	add	r3, r1
 8000306:	b2e4      	uxtb	r4, r4
	while (i < len)
 8000308:	42a2      	cmp	r2, r4
		if (c >= 10) c += 7;
		c += '0';
		s[i++] = c;
		v /= r;
	} while (v);
	if (sgn) s[i++] = sgn;
 800030a:	f803 6c14 	strb.w	r6, [r3, #-20]
	while (i < len)
 800030e:	4623      	mov	r3, r4
 8000310:	dd08      	ble.n	8000324 <xitoa+0x6c>
		s[i++] = pad;
 8000312:	a906      	add	r1, sp, #24
 8000314:	440b      	add	r3, r1
 8000316:	3401      	adds	r4, #1
 8000318:	b2e4      	uxtb	r4, r4
 800031a:	f803 5c14 	strb.w	r5, [r3, #-20]
		c += '0';
		s[i++] = c;
		v /= r;
	} while (v);
	if (sgn) s[i++] = sgn;
	while (i < len)
 800031e:	42a2      	cmp	r2, r4
 8000320:	4623      	mov	r3, r4
 8000322:	dcf6      	bgt.n	8000312 <xitoa+0x5a>
		s[i++] = pad;
	do
		xputc(s[--i]);
 8000324:	3c01      	subs	r4, #1
 8000326:	b2e4      	uxtb	r4, r4
 8000328:	ab06      	add	r3, sp, #24
 800032a:	4423      	add	r3, r4
 800032c:	f813 0c14 	ldrb.w	r0, [r3, #-20]
 8000330:	f7ff ffb0 	bl	8000294 <xputc>
	while (i);
 8000334:	2c00      	cmp	r4, #0
 8000336:	d1f5      	bne.n	8000324 <xitoa+0x6c>
}
 8000338:	b007      	add	sp, #28
 800033a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t v;


	if (radix < 0) {
		radix = -radix;
		if (val < 0) {
 800033c:	2800      	cmp	r0, #0
	uint8_t s[20], i = 0;
	uint32_t v;


	if (radix < 0) {
		radix = -radix;
 800033e:	f1c1 0100 	rsb	r1, r1, #0
		if (val < 0) {
 8000342:	dabd      	bge.n	80002c0 <xitoa+0x8>
			val = -val;
 8000344:	4240      	negs	r0, r0
			sgn = '-';
 8000346:	262d      	movs	r6, #45	; 0x2d
 8000348:	e7bb      	b.n	80002c2 <xitoa+0xa>
 800034a:	bf00      	nop

0800034c <xprintf>:
		xputc(s[--i]);
	while (i);
}

void xprintf (const char* str, ...)
{
 800034c:	b40f      	push	{r0, r1, r2, r3}
 800034e:	b570      	push	{r4, r5, r6, lr}
 8000350:	b082      	sub	sp, #8
 8000352:	ab06      	add	r3, sp, #24
 8000354:	f853 5b04 	ldr.w	r5, [r3], #4
	va_list arp;
	int d, r, w, s, l;


	va_start(arp, str);
 8000358:	9301      	str	r3, [sp, #4]

	while ((d = *str++) != 0) {
 800035a:	7828      	ldrb	r0, [r5, #0]
 800035c:	b138      	cbz	r0, 800036e <xprintf+0x22>
		if (d != '%') {
 800035e:	2825      	cmp	r0, #37	; 0x25
 8000360:	d00a      	beq.n	8000378 <xprintf+0x2c>
	int d, r, w, s, l;


	va_start(arp, str);

	while ((d = *str++) != 0) {
 8000362:	3501      	adds	r5, #1
		if (d != '%') {
			xputc(d); continue;
 8000364:	f7ff ff96 	bl	8000294 <xputc>
	int d, r, w, s, l;


	va_start(arp, str);

	while ((d = *str++) != 0) {
 8000368:	7828      	ldrb	r0, [r5, #0]
 800036a:	2800      	cmp	r0, #0
 800036c:	d1f7      	bne.n	800035e <xprintf+0x12>
				xitoa((long)va_arg(arp, int), r, w);
		}
	}

	va_end(arp);
}
 800036e:	b002      	add	sp, #8
 8000370:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000374:	b004      	add	sp, #16
 8000376:	4770      	bx	lr

	while ((d = *str++) != 0) {
		if (d != '%') {
			xputc(d); continue;
		}
		d = *str++; w = r = s = l = 0;
 8000378:	786c      	ldrb	r4, [r5, #1]
		if (d == '0') {
 800037a:	2c30      	cmp	r4, #48	; 0x30
 800037c:	d02f      	beq.n	80003de <xprintf+0x92>

	while ((d = *str++) != 0) {
		if (d != '%') {
			xputc(d); continue;
		}
		d = *str++; w = r = s = l = 0;
 800037e:	2600      	movs	r6, #0
 8000380:	3502      	adds	r5, #2
 8000382:	4632      	mov	r2, r6
		if (d == '0') {
			d = *str++; s = 1;
		}
		while ((d >= '0')&&(d <= '9')) {
 8000384:	f1a4 0030 	sub.w	r0, r4, #48	; 0x30
 8000388:	2809      	cmp	r0, #9
 800038a:	f04f 0300 	mov.w	r3, #0
 800038e:	d80a      	bhi.n	80003a6 <xprintf+0x5a>
			w += w * 10 + (d - '0');
			d = *str++;
 8000390:	f815 4b01 	ldrb.w	r4, [r5], #1
		d = *str++; w = r = s = l = 0;
		if (d == '0') {
			d = *str++; s = 1;
		}
		while ((d >= '0')&&(d <= '9')) {
			w += w * 10 + (d - '0');
 8000394:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8000398:	eb00 0141 	add.w	r1, r0, r1, lsl #1
		}
		d = *str++; w = r = s = l = 0;
		if (d == '0') {
			d = *str++; s = 1;
		}
		while ((d >= '0')&&(d <= '9')) {
 800039c:	f1a4 0030 	sub.w	r0, r4, #48	; 0x30
 80003a0:	2809      	cmp	r0, #9
			w += w * 10 + (d - '0');
 80003a2:	440b      	add	r3, r1
		}
		d = *str++; w = r = s = l = 0;
		if (d == '0') {
			d = *str++; s = 1;
		}
		while ((d >= '0')&&(d <= '9')) {
 80003a4:	d9f4      	bls.n	8000390 <xprintf+0x44>
			w += w * 10 + (d - '0');
			d = *str++;
		}
		if (s) w = -w;
		if (d == 'l') {
 80003a6:	2c6c      	cmp	r4, #108	; 0x6c
 80003a8:	d015      	beq.n	80003d6 <xprintf+0x8a>
			l = 1;
			d = *str++;
		}
		if (!d) break;
 80003aa:	2c00      	cmp	r4, #0
 80003ac:	d0df      	beq.n	800036e <xprintf+0x22>
		if (d == 's') {
 80003ae:	2c73      	cmp	r4, #115	; 0x73
 80003b0:	d01b      	beq.n	80003ea <xprintf+0x9e>
			xputs(va_arg(arp, char*));
			continue;
		}
		if (d == 'c') {
 80003b2:	2c63      	cmp	r4, #99	; 0x63
 80003b4:	d032      	beq.n	800041c <xprintf+0xd0>
 80003b6:	4073      	eors	r3, r6
			xputc((char)va_arg(arp, int));
			continue;
		}
		if (d == 'u') r = 10;
 80003b8:	2c75      	cmp	r4, #117	; 0x75
 80003ba:	441a      	add	r2, r3
 80003bc:	d026      	beq.n	800040c <xprintf+0xc0>
		if (d == 'd') r = -10;
 80003be:	2c64      	cmp	r4, #100	; 0x64
 80003c0:	d021      	beq.n	8000406 <xprintf+0xba>
		if (d == 'X' || d == 'x') r = 16; // 'x' added by mthomas in increase compatibility
 80003c2:	2c58      	cmp	r4, #88	; 0x58
 80003c4:	d124      	bne.n	8000410 <xprintf+0xc4>
 80003c6:	2110      	movs	r1, #16
			xitoa((long)va_arg(arp, long), r, w);
		} else {
			if (r > 0)
				xitoa((unsigned long)va_arg(arp, int), r, w);
			else
				xitoa((long)va_arg(arp, int), r, w);
 80003c8:	9b01      	ldr	r3, [sp, #4]
 80003ca:	1d1c      	adds	r4, r3, #4
 80003cc:	6818      	ldr	r0, [r3, #0]
 80003ce:	9401      	str	r4, [sp, #4]
 80003d0:	f7ff ff72 	bl	80002b8 <xitoa>
 80003d4:	e7c1      	b.n	800035a <xprintf+0xe>
			w += w * 10 + (d - '0');
			d = *str++;
		}
		if (s) w = -w;
		if (d == 'l') {
			l = 1;
 80003d6:	2001      	movs	r0, #1
			d = *str++;
 80003d8:	782c      	ldrb	r4, [r5, #0]
 80003da:	4405      	add	r5, r0
 80003dc:	e7e5      	b.n	80003aa <xprintf+0x5e>
		if (d != '%') {
			xputc(d); continue;
		}
		d = *str++; w = r = s = l = 0;
		if (d == '0') {
			d = *str++; s = 1;
 80003de:	78ac      	ldrb	r4, [r5, #2]
 80003e0:	f04f 36ff 	mov.w	r6, #4294967295
 80003e4:	3503      	adds	r5, #3
 80003e6:	2201      	movs	r2, #1
 80003e8:	e7cc      	b.n	8000384 <xprintf+0x38>
			l = 1;
			d = *str++;
		}
		if (!d) break;
		if (d == 's') {
			xputs(va_arg(arp, char*));
 80003ea:	9b01      	ldr	r3, [sp, #4]
 80003ec:	681c      	ldr	r4, [r3, #0]



void xputs (const char* str)
{
	while (*str)
 80003ee:	7820      	ldrb	r0, [r4, #0]
			l = 1;
			d = *str++;
		}
		if (!d) break;
		if (d == 's') {
			xputs(va_arg(arp, char*));
 80003f0:	3304      	adds	r3, #4
 80003f2:	9301      	str	r3, [sp, #4]



void xputs (const char* str)
{
	while (*str)
 80003f4:	2800      	cmp	r0, #0
 80003f6:	d0b0      	beq.n	800035a <xprintf+0xe>
		xputc(*str++);
 80003f8:	f7ff ff4c 	bl	8000294 <xputc>



void xputs (const char* str)
{
	while (*str)
 80003fc:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000400:	2800      	cmp	r0, #0
 8000402:	d1f9      	bne.n	80003f8 <xprintf+0xac>
 8000404:	e7a9      	b.n	800035a <xprintf+0xe>
		if (d == 'c') {
			xputc((char)va_arg(arp, int));
			continue;
		}
		if (d == 'u') r = 10;
		if (d == 'd') r = -10;
 8000406:	f06f 0109 	mvn.w	r1, #9
 800040a:	e7dd      	b.n	80003c8 <xprintf+0x7c>
		}
		if (d == 'c') {
			xputc((char)va_arg(arp, int));
			continue;
		}
		if (d == 'u') r = 10;
 800040c:	210a      	movs	r1, #10
 800040e:	e7db      	b.n	80003c8 <xprintf+0x7c>
		if (d == 'd') r = -10;
		if (d == 'X' || d == 'x') r = 16; // 'x' added by mthomas in increase compatibility
 8000410:	2c78      	cmp	r4, #120	; 0x78
 8000412:	d0d8      	beq.n	80003c6 <xprintf+0x7a>
		if (d == 'b') r = 2;
 8000414:	2c62      	cmp	r4, #98	; 0x62
 8000416:	d1aa      	bne.n	800036e <xprintf+0x22>
 8000418:	2102      	movs	r1, #2
 800041a:	e7d5      	b.n	80003c8 <xprintf+0x7c>
		if (d == 's') {
			xputs(va_arg(arp, char*));
			continue;
		}
		if (d == 'c') {
			xputc((char)va_arg(arp, int));
 800041c:	9b01      	ldr	r3, [sp, #4]
 800041e:	1d1a      	adds	r2, r3, #4
 8000420:	7818      	ldrb	r0, [r3, #0]
 8000422:	9201      	str	r2, [sp, #4]
 8000424:	f7ff ff36 	bl	8000294 <xputc>
			continue;
 8000428:	e797      	b.n	800035a <xprintf+0xe>
 800042a:	bf00      	nop

0800042c <get_us_time>:
 *   this function must be called at least
 *   once every 65ms to work correctly.
 *
 */
uint64_t get_us_time()
{
 800042c:	b510      	push	{r4, lr}
    static uint16_t t0;
    static uint64_t tickcount;

    vPortEnterCritical();
 800042e:	f000 fa33 	bl	8000898 <vPortEnterCritical>

    int t = TIM7->CNT;
    if (t < t0)
 8000432:	490b      	ldr	r1, [pc, #44]	; (8000460 <get_us_time+0x34>)
    static uint16_t t0;
    static uint64_t tickcount;

    vPortEnterCritical();

    int t = TIM7->CNT;
 8000434:	4b0b      	ldr	r3, [pc, #44]	; (8000464 <get_us_time+0x38>)
    if (t < t0)
 8000436:	880a      	ldrh	r2, [r1, #0]
    static uint16_t t0;
    static uint64_t tickcount;

    vPortEnterCritical();

    int t = TIM7->CNT;
 8000438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    if (t < t0)
        t += 0x10000;

    tickcount += t - t0;
 800043a:	4c0b      	ldr	r4, [pc, #44]	; (8000468 <get_us_time+0x3c>)
    static uint64_t tickcount;

    vPortEnterCritical();

    int t = TIM7->CNT;
    if (t < t0)
 800043c:	4293      	cmp	r3, r2
        t += 0x10000;
 800043e:	bfb8      	it	lt
 8000440:	f503 3380 	addlt.w	r3, r3, #65536	; 0x10000

    tickcount += t - t0;
    t0 = t;
 8000444:	800b      	strh	r3, [r1, #0]

    int t = TIM7->CNT;
    if (t < t0)
        t += 0x10000;

    tickcount += t - t0;
 8000446:	e9d4 0100 	ldrd	r0, r1, [r4]
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	18c0      	adds	r0, r0, r3
 800044e:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 8000452:	e9c4 0100 	strd	r0, r1, [r4]
    t0 = t;

    vPortExitCritical();
 8000456:	f000 fa2b 	bl	80008b0 <vPortExitCritical>

    return tickcount;
}
 800045a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800045e:	bd10      	pop	{r4, pc}
 8000460:	20000864 	.word	0x20000864
 8000464:	40001400 	.word	0x40001400
 8000468:	20000868 	.word	0x20000868

0800046c <Reset_Handler>:
 800046c:	2100      	movs	r1, #0
 800046e:	e003      	b.n	8000478 <LoopCopyDataInit>

08000470 <CopyDataInit>:
 8000470:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <LoopFillZerobss+0x20>)
 8000472:	585b      	ldr	r3, [r3, r1]
 8000474:	5043      	str	r3, [r0, r1]
 8000476:	3104      	adds	r1, #4

08000478 <LoopCopyDataInit>:
 8000478:	480d      	ldr	r0, [pc, #52]	; (80004b0 <LoopFillZerobss+0x24>)
 800047a:	4b0e      	ldr	r3, [pc, #56]	; (80004b4 <LoopFillZerobss+0x28>)
 800047c:	1842      	adds	r2, r0, r1
 800047e:	429a      	cmp	r2, r3
 8000480:	d3f6      	bcc.n	8000470 <CopyDataInit>
 8000482:	4a0d      	ldr	r2, [pc, #52]	; (80004b8 <LoopFillZerobss+0x2c>)
 8000484:	e002      	b.n	800048c <LoopFillZerobss>

08000486 <FillZerobss>:
 8000486:	2300      	movs	r3, #0
 8000488:	f842 3b04 	str.w	r3, [r2], #4

0800048c <LoopFillZerobss>:
 800048c:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <LoopFillZerobss+0x30>)
 800048e:	429a      	cmp	r2, r3
 8000490:	d3f9      	bcc.n	8000486 <FillZerobss>
 8000492:	480b      	ldr	r0, [pc, #44]	; (80004c0 <LoopFillZerobss+0x34>)
 8000494:	6801      	ldr	r1, [r0, #0]
 8000496:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800049a:	6001      	str	r1, [r0, #0]
 800049c:	f000 f814 	bl	80004c8 <SystemInit>
 80004a0:	f000 fb80 	bl	8000ba4 <__libc_init_array>
 80004a4:	f7ff fec6 	bl	8000234 <main>
 80004a8:	4770      	bx	lr
 80004aa:	0000      	.short	0x0000
 80004ac:	0800153c 	.word	0x0800153c
 80004b0:	20000000 	.word	0x20000000
 80004b4:	20000844 	.word	0x20000844
 80004b8:	20000848 	.word	0x20000848
 80004bc:	2000093c 	.word	0x2000093c
 80004c0:	e000ed88 	.word	0xe000ed88

080004c4 <ADC_IRQHandler>:
 80004c4:	e7fe      	b.n	80004c4 <ADC_IRQHandler>
 80004c6:	0000      	movs	r0, r0

080004c8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004c8:	4941      	ldr	r1, [pc, #260]	; (80005d0 <SystemInit+0x108>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80004ca:	4b42      	ldr	r3, [pc, #264]	; (80005d4 <SystemInit+0x10c>)
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004cc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80004d0:	4841      	ldr	r0, [pc, #260]	; (80005d8 <SystemInit+0x110>)
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004d2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80004d6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80004da:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80004dc:	2100      	movs	r1, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80004de:	f042 0201 	orr.w	r2, r2, #1
 80004e2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80004e4:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80004e6:	681a      	ldr	r2, [r3, #0]
 80004e8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80004ec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80004f0:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80004f2:	6058      	str	r0, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80004f4:	681a      	ldr	r2, [r3, #0]
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004f6:	b082      	sub	sp, #8

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80004f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80004fc:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80004fe:	60d9      	str	r1, [r3, #12]
static void SetSysClock(void)
{
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000500:	9100      	str	r1, [sp, #0]
 8000502:	9101      	str	r1, [sp, #4]
                   (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

#else /* PLL_SOURCE_HSE_BYPASS or PLL_SOURCE_HSE */

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800050a:	601a      	str	r2, [r3, #0]
  RCC->CR |= ((uint32_t)RCC_CR_HSEBYP);
#endif   /* PLL_SOURCE_HSE_BYPASS */
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800050c:	461a      	mov	r2, r3
 800050e:	e003      	b.n	8000518 <SystemInit+0x50>
    StartUpCounter++;
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000510:	9b00      	ldr	r3, [sp, #0]
 8000512:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8000516:	d009      	beq.n	800052c <SystemInit+0x64>
  RCC->CR |= ((uint32_t)RCC_CR_HSEBYP);
#endif   /* PLL_SOURCE_HSE_BYPASS */
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000518:	6813      	ldr	r3, [r2, #0]
 800051a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800051e:	9301      	str	r3, [sp, #4]
    StartUpCounter++;
 8000520:	9b00      	ldr	r3, [sp, #0]
 8000522:	3301      	adds	r3, #1
 8000524:	9300      	str	r3, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000526:	9b01      	ldr	r3, [sp, #4]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d0f1      	beq.n	8000510 <SystemInit+0x48>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800052c:	4b29      	ldr	r3, [pc, #164]	; (80005d4 <SystemInit+0x10c>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
  {
    HSEStatus = (uint32_t)0x01;
 8000534:	bf18      	it	ne
 8000536:	2301      	movne	r3, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000538:	9301      	str	r3, [sp, #4]
  }

  if (HSEStatus == (uint32_t)0x01)
 800053a:	9b01      	ldr	r3, [sp, #4]
 800053c:	2b01      	cmp	r3, #1
 800053e:	d042      	beq.n	80005c6 <SystemInit+0xfe>
         configuration. User can add here some code to deal with this error */
  }
#endif /*PLL_SOURCE_HSI*/
  
      /* Select regulator voltage output Scale 1 mode, System frequency up to 180 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000540:	4b24      	ldr	r3, [pc, #144]	; (80005d4 <SystemInit+0x10c>)
    PWR->CR |= PWR_CR_VOS;
 8000542:	4926      	ldr	r1, [pc, #152]	; (80005dc <SystemInit+0x114>)
         configuration. User can add here some code to deal with this error */
  }
#endif /*PLL_SOURCE_HSI*/
  
      /* Select regulator voltage output Scale 1 mode, System frequency up to 180 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000544:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000546:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800054a:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800054c:	680a      	ldr	r2, [r1, #0]
 800054e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000552:	600a      	str	r2, [r1, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000554:	689a      	ldr	r2, [r3, #8]
 8000556:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000558:	689a      	ldr	r2, [r3, #8]
 800055a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800055e:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000560:	689a      	ldr	r2, [r3, #8]
 8000562:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8000566:	609a      	str	r2, [r3, #8]

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800056e:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	0192      	lsls	r2, r2, #6
 8000574:	d5fc      	bpl.n	8000570 <SystemInit+0xa8>
    {
    }

    /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
    PWR->CR |= PWR_CR_ODEN;
 8000576:	4919      	ldr	r1, [pc, #100]	; (80005dc <SystemInit+0x114>)
 8000578:	680b      	ldr	r3, [r1, #0]
 800057a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800057e:	600b      	str	r3, [r1, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0)
 8000580:	684a      	ldr	r2, [r1, #4]
 8000582:	4b16      	ldr	r3, [pc, #88]	; (80005dc <SystemInit+0x114>)
 8000584:	03d0      	lsls	r0, r2, #15
 8000586:	d5fb      	bpl.n	8000580 <SystemInit+0xb8>
    {
    }
    PWR->CR |= PWR_CR_ODSWEN;
 8000588:	681a      	ldr	r2, [r3, #0]
 800058a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800058e:	601a      	str	r2, [r3, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
 8000590:	685a      	ldr	r2, [r3, #4]
 8000592:	0392      	lsls	r2, r2, #14
 8000594:	d5fc      	bpl.n	8000590 <SystemInit+0xc8>
    {
    } 
     
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000596:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <SystemInit+0x118>)

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000598:	4a0e      	ldr	r2, [pc, #56]	; (80005d4 <SystemInit+0x10c>)
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
    {
    } 
     
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800059a:	f240 7105 	movw	r1, #1797	; 0x705
 800059e:	6019      	str	r1, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80005a0:	6893      	ldr	r3, [r2, #8]
 80005a2:	f023 0303 	bic.w	r3, r3, #3
 80005a6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80005a8:	6893      	ldr	r3, [r2, #8]
 80005aa:	f043 0302 	orr.w	r3, r3, #2
 80005ae:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80005b0:	6893      	ldr	r3, [r2, #8]
 80005b2:	f003 030c 	and.w	r3, r3, #12
 80005b6:	2b08      	cmp	r3, #8
 80005b8:	d1fa      	bne.n	80005b0 <SystemInit+0xe8>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80005ba:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <SystemInit+0x108>)
 80005bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005c0:	609a      	str	r2, [r3, #8]
#endif
}
 80005c2:	b002      	add	sp, #8
 80005c4:	4770      	bx	lr
  }

  if (HSEStatus == (uint32_t)0x01)
  {
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80005c6:	4b03      	ldr	r3, [pc, #12]	; (80005d4 <SystemInit+0x10c>)
 80005c8:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <SystemInit+0x11c>)
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	e7b8      	b.n	8000540 <SystemInit+0x78>
 80005ce:	bf00      	nop
 80005d0:	e000ed00 	.word	0xe000ed00
 80005d4:	40023800 	.word	0x40023800
 80005d8:	24003010 	.word	0x24003010
 80005dc:	40007000 	.word	0x40007000
 80005e0:	40023c00 	.word	0x40023c00
 80005e4:	07405a08 	.word	0x07405a08

080005e8 <_sbrk_r>:
    return 1;
}


void *_sbrk_r(struct _reent *r, ptrdiff_t incr)
{
 80005e8:	b430      	push	{r4, r5}
    extern char end;   // provided by the linker script

    if (__brkval == 0)
 80005ea:	4c0c      	ldr	r4, [pc, #48]	; (800061c <_sbrk_r+0x34>)
 80005ec:	6823      	ldr	r3, [r4, #0]
 80005ee:	b18b      	cbz	r3, 8000614 <_sbrk_r+0x2c>
        __brkval = &end;

    if (__brkval + incr > (char*)__get_MSP() - __malloc_margin) {
 80005f0:	4419      	add	r1, r3
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 80005f2:	f3ef 8208 	mrs	r2, MSP
 80005f6:	4d0a      	ldr	r5, [pc, #40]	; (8000620 <_sbrk_r+0x38>)
 80005f8:	682d      	ldr	r5, [r5, #0]
 80005fa:	1b52      	subs	r2, r2, r5
 80005fc:	4291      	cmp	r1, r2
 80005fe:	d803      	bhi.n	8000608 <_sbrk_r+0x20>
        r->_errno = ENOMEM;
        return (void*)-1;
    }

    void *ret = __brkval;
    __brkval += incr;
 8000600:	6021      	str	r1, [r4, #0]

    return ret;
 8000602:	4618      	mov	r0, r3
}
 8000604:	bc30      	pop	{r4, r5}
 8000606:	4770      	bx	lr

    if (__brkval == 0)
        __brkval = &end;

    if (__brkval + incr > (char*)__get_MSP() - __malloc_margin) {
        r->_errno = ENOMEM;
 8000608:	230c      	movs	r3, #12
 800060a:	6003      	str	r3, [r0, #0]

    void *ret = __brkval;
    __brkval += incr;

    return ret;
}
 800060c:	bc30      	pop	{r4, r5}
    if (__brkval == 0)
        __brkval = &end;

    if (__brkval + incr > (char*)__get_MSP() - __malloc_margin) {
        r->_errno = ENOMEM;
        return (void*)-1;
 800060e:	f04f 30ff 	mov.w	r0, #4294967295

    void *ret = __brkval;
    __brkval += incr;

    return ret;
}
 8000612:	4770      	bx	lr
void *_sbrk_r(struct _reent *r, ptrdiff_t incr)
{
    extern char end;   // provided by the linker script

    if (__brkval == 0)
        __brkval = &end;
 8000614:	4b03      	ldr	r3, [pc, #12]	; (8000624 <_sbrk_r+0x3c>)
 8000616:	6023      	str	r3, [r4, #0]
 8000618:	e7ea      	b.n	80005f0 <_sbrk_r+0x8>
 800061a:	bf00      	nop
 800061c:	20000938 	.word	0x20000938
 8000620:	20000000 	.word	0x20000000
 8000624:	2000093c 	.word	0x2000093c

08000628 <__malloc_lock>:
}


void __malloc_lock(struct _reent *r)
{
    vPortEnterCritical();
 8000628:	f000 b936 	b.w	8000898 <vPortEnterCritical>

0800062c <__malloc_unlock>:
}


void __malloc_unlock(struct _reent *r)
{
    vPortExitCritical();
 800062c:	f000 b940 	b.w	80008b0 <vPortExitCritical>

08000630 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000630:	4b07      	ldr	r3, [pc, #28]	; (8000650 <prvResetNextTaskUnblockTime+0x20>)
 8000632:	681a      	ldr	r2, [r3, #0]
 8000634:	6812      	ldr	r2, [r2, #0]
 8000636:	b922      	cbnz	r2, 8000642 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <prvResetNextTaskUnblockTime+0x24>)
 800063a:	f04f 32ff 	mov.w	r2, #4294967295
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000642:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 8000644:	4b03      	ldr	r3, [pc, #12]	; (8000654 <prvResetNextTaskUnblockTime+0x24>)
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000646:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 8000648:	68d2      	ldr	r2, [r2, #12]
 800064a:	6852      	ldr	r2, [r2, #4]
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	4770      	bx	lr
 8000650:	20000878 	.word	0x20000878
 8000654:	200008e8 	.word	0x200008e8

08000658 <vTaskSwitchContext.part.4>:
	}

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
 8000658:	b538      	push	{r3, r4, r5, lr}
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 800065a:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <vTaskSwitchContext.part.4+0x78>)
				stored in ulTaskSwitchedInTime.  Note that there is no overflow
				protection here	so count values are only valid until the timer
				overflows.  The guard against negative values is to protect
				against suspect run time stat counter implementations - which
				are provided by the application, not the kernel. */
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800065c:	4d1d      	ldr	r5, [pc, #116]	; (80006d4 <vTaskSwitchContext.part.4+0x7c>)
				{
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800065e:	4c1e      	ldr	r4, [pc, #120]	; (80006d8 <vTaskSwitchContext.part.4+0x80>)
		switch. */
		xYieldPending = pdTRUE;
	}
	else
	{
		xYieldPending = pdFALSE;
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
				#else
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8000664:	f7ff fee2 	bl	800042c <get_us_time>
				stored in ulTaskSwitchedInTime.  Note that there is no overflow
				protection here	so count values are only valid until the timer
				overflows.  The guard against negative values is to protect
				against suspect run time stat counter implementations - which
				are provided by the application, not the kernel. */
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8000668:	682a      	ldr	r2, [r5, #0]
		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
				#else
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <vTaskSwitchContext.part.4+0x84>)
				stored in ulTaskSwitchedInTime.  Note that there is no overflow
				protection here	so count values are only valid until the timer
				overflows.  The guard against negative values is to protect
				against suspect run time stat counter implementations - which
				are provided by the application, not the kernel. */
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800066c:	4290      	cmp	r0, r2
		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
				#else
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800066e:	6018      	str	r0, [r3, #0]
				stored in ulTaskSwitchedInTime.  Note that there is no overflow
				protection here	so count values are only valid until the timer
				overflows.  The guard against negative values is to protect
				against suspect run time stat counter implementations - which
				are provided by the application, not the kernel. */
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8000670:	d904      	bls.n	800067c <vTaskSwitchContext.part.4+0x24>
				{
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8000672:	6821      	ldr	r1, [r4, #0]
 8000674:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8000676:	1a9b      	subs	r3, r3, r2
 8000678:	4403      	add	r3, r0
 800067a:	650b      	str	r3, [r1, #80]	; 0x50
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800067c:	4a18      	ldr	r2, [pc, #96]	; (80006e0 <vTaskSwitchContext.part.4+0x88>)
 800067e:	4919      	ldr	r1, [pc, #100]	; (80006e4 <vTaskSwitchContext.part.4+0x8c>)
 8000680:	6813      	ldr	r3, [r2, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				ulTaskSwitchedInTime = ulTotalRunTime;
 8000682:	6028      	str	r0, [r5, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8000684:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000688:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800068c:	b94b      	cbnz	r3, 80006a2 <vTaskSwitchContext.part.4+0x4a>
 800068e:	6813      	ldr	r3, [r2, #0]
 8000690:	3b01      	subs	r3, #1
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	6813      	ldr	r3, [r2, #0]
 8000696:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800069a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d0f5      	beq.n	800068e <vTaskSwitchContext.part.4+0x36>
 80006a2:	6813      	ldr	r3, [r2, #0]
 80006a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80006a8:	009b      	lsls	r3, r3, #2
 80006aa:	18c8      	adds	r0, r1, r3
 80006ac:	3308      	adds	r3, #8
 80006ae:	6842      	ldr	r2, [r0, #4]
 80006b0:	6852      	ldr	r2, [r2, #4]
 80006b2:	6042      	str	r2, [r0, #4]
 80006b4:	4419      	add	r1, r3
 80006b6:	428a      	cmp	r2, r1
 80006b8:	d006      	beq.n	80006c8 <vTaskSwitchContext.part.4+0x70>
 80006ba:	68d3      	ldr	r3, [r2, #12]
 80006bc:	6023      	str	r3, [r4, #0]
		traceTASK_SWITCHED_IN();
 80006be:	6822      	ldr	r2, [r4, #0]
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <vTaskSwitchContext.part.4+0x90>)
 80006c2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	bd38      	pop	{r3, r4, r5, pc}
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80006c8:	6852      	ldr	r2, [r2, #4]
 80006ca:	6042      	str	r2, [r0, #4]
 80006cc:	e7f5      	b.n	80006ba <vTaskSwitchContext.part.4+0x62>
 80006ce:	bf00      	nop
 80006d0:	20000900 	.word	0x20000900
 80006d4:	20000870 	.word	0x20000870
 80006d8:	200008e4 	.word	0x200008e4
 80006dc:	200008f8 	.word	0x200008f8
 80006e0:	200008fc 	.word	0x200008fc
 80006e4:	20000880 	.word	0x20000880
 80006e8:	40007400 	.word	0x40007400

080006ec <xTaskIncrementTick>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80006ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80006f0:	4b3d      	ldr	r3, [pc, #244]	; (80007e8 <xTaskIncrementTick+0xfc>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d145      	bne.n	8000784 <xTaskIncrementTick+0x98>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 80006f8:	4b3c      	ldr	r3, [pc, #240]	; (80007ec <xTaskIncrementTick+0x100>)
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	3201      	adds	r2, #1
 80006fe:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8000700:	681e      	ldr	r6, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
 8000702:	2e00      	cmp	r6, #0
 8000704:	d05b      	beq.n	80007be <xTaskIncrementTick+0xd2>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 8000706:	4b3a      	ldr	r3, [pc, #232]	; (80007f0 <xTaskIncrementTick+0x104>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	429e      	cmp	r6, r3
 800070c:	d347      	bcc.n	800079e <xTaskIncrementTick+0xb2>
 800070e:	4f39      	ldr	r7, [pc, #228]	; (80007f4 <xTaskIncrementTick+0x108>)
 8000710:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800080c <xTaskIncrementTick+0x120>
 8000714:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8000810 <xTaskIncrementTick+0x124>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8000718:	4d37      	ldr	r5, [pc, #220]	; (80007f8 <xTaskIncrementTick+0x10c>)
 800071a:	2400      	movs	r4, #0
 800071c:	e029      	b.n	8000772 <xTaskIncrementTick+0x86>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800071e:	4b35      	ldr	r3, [pc, #212]	; (80007f4 <xTaskIncrementTick+0x108>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	f8d3 a00c 	ldr.w	sl, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8000728:	f8da 2004 	ldr.w	r2, [sl, #4]
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800072c:	f10a 0b04 	add.w	fp, sl, #4
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );

						if( xConstTickCount < xItemValue )
 8000730:	4296      	cmp	r6, r2
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8000732:	4658      	mov	r0, fp
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );

						if( xConstTickCount < xItemValue )
 8000734:	d354      	bcc.n	80007e0 <xTaskIncrementTick+0xf4>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8000736:	f000 f88b 	bl	8000850 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800073a:	f8da 2028 	ldr.w	r2, [sl, #40]	; 0x28
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800073e:	f10a 0018 	add.w	r0, sl, #24
						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000742:	b10a      	cbz	r2, 8000748 <xTaskIncrementTick+0x5c>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000744:	f000 f884 	bl	8000850 <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8000748:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 800074c:	682b      	ldr	r3, [r5, #0]
 800074e:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 8000752:	429a      	cmp	r2, r3
 8000754:	4659      	mov	r1, fp
 8000756:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 800075a:	bf88      	it	hi
 800075c:	602a      	strhi	r2, [r5, #0]
 800075e:	f000 f867 	bl	8000830 <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000762:	f8d8 1000 	ldr.w	r1, [r8]
 8000766:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 800076a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							{
								xSwitchRequired = pdTRUE;
 800076c:	429a      	cmp	r2, r3
 800076e:	bf28      	it	cs
 8000770:	2401      	movcs	r4, #1
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d1d1      	bne.n	800071e <xTaskIncrementTick+0x32>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 800077a:	4a1d      	ldr	r2, [pc, #116]	; (80007f0 <xTaskIncrementTick+0x104>)
 800077c:	f04f 33ff 	mov.w	r3, #4294967295
 8000780:	6013      	str	r3, [r2, #0]
						break;
 8000782:	e011      	b.n	80007a8 <xTaskIncrementTick+0xbc>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8000784:	4a1d      	ldr	r2, [pc, #116]	; (80007fc <xTaskIncrementTick+0x110>)
 8000786:	6813      	ldr	r3, [r2, #0]
 8000788:	3301      	adds	r3, #1
 800078a:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800078c:	2400      	movs	r4, #0
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800078e:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <xTaskIncrementTick+0x114>)
 8000790:	681b      	ldr	r3, [r3, #0]
		{
			xSwitchRequired = pdTRUE;
 8000792:	2b00      	cmp	r3, #0
 8000794:	bf18      	it	ne
 8000796:	2401      	movne	r4, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
 8000798:	4620      	mov	r0, r4
 800079a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800079e:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800080c <xTaskIncrementTick+0x120>
 80007a2:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8000810 <xTaskIncrementTick+0x124>

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80007a6:	2400      	movs	r4, #0
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80007a8:	f8d8 3000 	ldr.w	r3, [r8]
 80007ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80007b2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
			{
				xSwitchRequired = pdTRUE;
 80007b6:	2b02      	cmp	r3, #2
 80007b8:	bf28      	it	cs
 80007ba:	2401      	movcs	r4, #1
 80007bc:	e7e7      	b.n	800078e <xTaskIncrementTick+0xa2>
			block. */
			const TickType_t xConstTickCount = xTickCount;

			if( xConstTickCount == ( TickType_t ) 0U )
			{
				taskSWITCH_DELAYED_LISTS();
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <xTaskIncrementTick+0x118>)
 80007c0:	4f0c      	ldr	r7, [pc, #48]	; (80007f4 <xTaskIncrementTick+0x108>)
 80007c2:	4a11      	ldr	r2, [pc, #68]	; (8000808 <xTaskIncrementTick+0x11c>)
 80007c4:	6839      	ldr	r1, [r7, #0]
 80007c6:	6818      	ldr	r0, [r3, #0]
 80007c8:	6038      	str	r0, [r7, #0]
 80007ca:	6019      	str	r1, [r3, #0]
 80007cc:	6813      	ldr	r3, [r2, #0]
 80007ce:	3301      	adds	r3, #1
 80007d0:	6013      	str	r3, [r2, #0]
 80007d2:	f7ff ff2d 	bl	8000630 <prvResetNextTaskUnblockTime>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <xTaskIncrementTick+0x104>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	429e      	cmp	r6, r3
 80007dc:	d297      	bcs.n	800070e <xTaskIncrementTick+0x22>
 80007de:	e7de      	b.n	800079e <xTaskIncrementTick+0xb2>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 80007e0:	4b03      	ldr	r3, [pc, #12]	; (80007f0 <xTaskIncrementTick+0x104>)
 80007e2:	601a      	str	r2, [r3, #0]
							break;
 80007e4:	e7e0      	b.n	80007a8 <xTaskIncrementTick+0xbc>
 80007e6:	bf00      	nop
 80007e8:	200008ec 	.word	0x200008ec
 80007ec:	200008f0 	.word	0x200008f0
 80007f0:	200008e8 	.word	0x200008e8
 80007f4:	20000878 	.word	0x20000878
 80007f8:	200008fc 	.word	0x200008fc
 80007fc:	2000087c 	.word	0x2000087c
 8000800:	20000900 	.word	0x20000900
 8000804:	200008f4 	.word	0x200008f4
 8000808:	20000874 	.word	0x20000874
 800080c:	20000880 	.word	0x20000880
 8000810:	200008e4 	.word	0x200008e4

08000814 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000814:	4b04      	ldr	r3, [pc, #16]	; (8000828 <vTaskSwitchContext+0x14>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	b11b      	cbz	r3, 8000822 <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800081a:	4b04      	ldr	r3, [pc, #16]	; (800082c <vTaskSwitchContext+0x18>)
 800081c:	2201      	movs	r2, #1
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	4770      	bx	lr
 8000822:	f7ff bf19 	b.w	8000658 <vTaskSwitchContext.part.4>
 8000826:	bf00      	nop
 8000828:	200008ec 	.word	0x200008ec
 800082c:	20000900 	.word	0x20000900

08000830 <vListInsertEnd>:
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8000830:	e890 000c 	ldmia.w	r0, {r2, r3}
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000834:	b410      	push	{r4}

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000836:	689c      	ldr	r4, [r3, #8]
 8000838:	608c      	str	r4, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800083a:	689c      	ldr	r4, [r3, #8]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800083c:	604b      	str	r3, [r1, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800083e:	3201      	adds	r2, #1
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000840:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000842:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
}
 8000844:	f85d 4b04 	ldr.w	r4, [sp], #4

	pxIndex->pxPrevious->pxNext = pxNewListItem;
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000848:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800084a:	6002      	str	r2, [r0, #0]
}
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop

08000850 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000850:	6843      	ldr	r3, [r0, #4]
 8000852:	6881      	ldr	r1, [r0, #8]

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8000854:	6902      	ldr	r2, [r0, #16]
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000856:	b410      	push	{r4}
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000858:	6099      	str	r1, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800085a:	6881      	ldr	r1, [r0, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800085c:	6854      	ldr	r4, [r2, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800085e:	604b      	str	r3, [r1, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8000860:	6813      	ldr	r3, [r2, #0]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000862:	4284      	cmp	r4, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000864:	bf08      	it	eq
 8000866:	6051      	streq	r1, [r2, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8000868:	3b01      	subs	r3, #1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800086a:	2100      	movs	r1, #0
 800086c:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 800086e:	f85d 4b04 	ldr.w	r4, [sp], #4
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8000872:	6013      	str	r3, [r2, #0]

	return pxList->uxNumberOfItems;
}
 8000874:	4618      	mov	r0, r3
 8000876:	4770      	bx	lr

08000878 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <pxCurrentTCBConst2>)
 800087a:	6819      	ldr	r1, [r3, #0]
 800087c:	6808      	ldr	r0, [r1, #0]
 800087e:	f850 eb04 	ldr.w	lr, [r0], #4
 8000882:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000886:	f380 8809 	msr	PSP, r0
 800088a:	f04f 0000 	mov.w	r0, #0
 800088e:	f380 8811 	msr	BASEPRI, r0
 8000892:	4770      	bx	lr

08000894 <pxCurrentTCBConst2>:
 8000894:	200008e4 	.word	0x200008e4

08000898 <vPortEnterCritical>:
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
 8000898:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 800089c:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
 80008a0:	4a02      	ldr	r2, [pc, #8]	; (80008ac <vPortEnterCritical+0x14>)
 80008a2:	6813      	ldr	r3, [r2, #0]
 80008a4:	3301      	adds	r3, #1
 80008a6:	6013      	str	r3, [r2, #0]
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	20000004 	.word	0x20000004

080008b0 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	uxCriticalNesting--;
 80008b0:	4a04      	ldr	r2, [pc, #16]	; (80008c4 <vPortExitCritical+0x14>)
 80008b2:	6813      	ldr	r3, [r2, #0]
 80008b4:	3b01      	subs	r3, #1
 80008b6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80008b8:	b91b      	cbnz	r3, 80008c2 <vPortExitCritical+0x12>
	{
		portENABLE_INTERRUPTS();
 80008ba:	f04f 0000 	mov.w	r0, #0
 80008be:	f380 8811 	msr	BASEPRI, r0
 80008c2:	4770      	bx	lr
 80008c4:	20000004 	.word	0x20000004

080008c8 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80008c8:	f3ef 8009 	mrs	r0, PSP
 80008cc:	4b13      	ldr	r3, [pc, #76]	; (800091c <pxCurrentTCBConst>)
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80008d4:	f01e 0f10 	tst.w	lr, #16
 80008d8:	bf08      	it	eq
 80008da:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80008de:	f840 ed04 	str.w	lr, [r0, #-4]!
 80008e2:	6010      	str	r0, [r2, #0]
 80008e4:	e92d 4008 	stmdb	sp!, {r3, lr}
 80008e8:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80008ec:	f380 8811 	msr	BASEPRI, r0
 80008f0:	f7ff ff90 	bl	8000814 <vTaskSwitchContext>
 80008f4:	f04f 0000 	mov.w	r0, #0
 80008f8:	f380 8811 	msr	BASEPRI, r0
 80008fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000900:	6819      	ldr	r1, [r3, #0]
 8000902:	6808      	ldr	r0, [r1, #0]
 8000904:	f850 eb04 	ldr.w	lr, [r0], #4
 8000908:	f01e 0f10 	tst.w	lr, #16
 800090c:	bf08      	it	eq
 800090e:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000912:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000916:	f380 8809 	msr	PSP, r0
 800091a:	4770      	bx	lr

0800091c <pxCurrentTCBConst>:
 800091c:	200008e4 	.word	0x200008e4

08000920 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000920:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	/*#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
	#endif*/

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8000922:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8000926:	f380 8811 	msr	BASEPRI, r0
	{
		//vTaskIncrementTick();
		
		if( xTaskIncrementTick() != pdFALSE )
 800092a:	f7ff fedf 	bl	80006ec <xTaskIncrementTick>
 800092e:	b118      	cbz	r0, 8000938 <SysTick_Handler+0x18>
		{
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8000930:	4b04      	ldr	r3, [pc, #16]	; (8000944 <SysTick_Handler+0x24>)
 8000932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000936:	601a      	str	r2, [r3, #0]
		}
		
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
 8000938:	f04f 0000 	mov.w	r0, #0
 800093c:	f380 8811 	msr	BASEPRI, r0
 8000940:	bd08      	pop	{r3, pc}
 8000942:	bf00      	nop
 8000944:	e000ed04 	.word	0xe000ed04

08000948 <GPIO_DeInit>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F42xxx/43xxx devices.
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices.  
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8000948:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 800094a:	4b4b      	ldr	r3, [pc, #300]	; (8000a78 <GPIO_DeInit+0x130>)
 800094c:	4298      	cmp	r0, r3
 800094e:	d02a      	beq.n	80009a6 <GPIO_DeInit+0x5e>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
 8000950:	4b4a      	ldr	r3, [pc, #296]	; (8000a7c <GPIO_DeInit+0x134>)
 8000952:	4298      	cmp	r0, r3
 8000954:	d031      	beq.n	80009ba <GPIO_DeInit+0x72>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
 8000956:	4b4a      	ldr	r3, [pc, #296]	; (8000a80 <GPIO_DeInit+0x138>)
 8000958:	4298      	cmp	r0, r3
 800095a:	d038      	beq.n	80009ce <GPIO_DeInit+0x86>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
 800095c:	4b49      	ldr	r3, [pc, #292]	; (8000a84 <GPIO_DeInit+0x13c>)
 800095e:	4298      	cmp	r0, r3
 8000960:	d03f      	beq.n	80009e2 <GPIO_DeInit+0x9a>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
 8000962:	4b49      	ldr	r3, [pc, #292]	; (8000a88 <GPIO_DeInit+0x140>)
 8000964:	4298      	cmp	r0, r3
 8000966:	d046      	beq.n	80009f6 <GPIO_DeInit+0xae>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
 8000968:	4b48      	ldr	r3, [pc, #288]	; (8000a8c <GPIO_DeInit+0x144>)
 800096a:	4298      	cmp	r0, r3
 800096c:	d04d      	beq.n	8000a0a <GPIO_DeInit+0xc2>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
 800096e:	4b48      	ldr	r3, [pc, #288]	; (8000a90 <GPIO_DeInit+0x148>)
 8000970:	4298      	cmp	r0, r3
 8000972:	d054      	beq.n	8000a1e <GPIO_DeInit+0xd6>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
 8000974:	4b47      	ldr	r3, [pc, #284]	; (8000a94 <GPIO_DeInit+0x14c>)
 8000976:	4298      	cmp	r0, r3
 8000978:	d05b      	beq.n	8000a32 <GPIO_DeInit+0xea>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
  }

  else if (GPIOx == GPIOI)
 800097a:	4b47      	ldr	r3, [pc, #284]	; (8000a98 <GPIO_DeInit+0x150>)
 800097c:	4298      	cmp	r0, r3
 800097e:	d062      	beq.n	8000a46 <GPIO_DeInit+0xfe>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
  }
  else if (GPIOx == GPIOJ)
 8000980:	4b46      	ldr	r3, [pc, #280]	; (8000a9c <GPIO_DeInit+0x154>)
 8000982:	4298      	cmp	r0, r3
 8000984:	d06b      	beq.n	8000a5e <GPIO_DeInit+0x116>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
  }
  else
  {
    if (GPIOx == GPIOK)
 8000986:	4b46      	ldr	r3, [pc, #280]	; (8000aa0 <GPIO_DeInit+0x158>)
 8000988:	4298      	cmp	r0, r3
 800098a:	d000      	beq.n	800098e <GPIO_DeInit+0x46>
 800098c:	bd08      	pop	{r3, pc}
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
 800098e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000992:	2101      	movs	r1, #1
 8000994:	f000 f8ec 	bl	8000b70 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
 8000998:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800099c:	2100      	movs	r1, #0
    }
  }
}
 800099e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  else
  {
    if (GPIOx == GPIOK)
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
 80009a2:	f000 b8e5 	b.w	8000b70 <RCC_AHB1PeriphResetCmd>
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80009a6:	2001      	movs	r0, #1
 80009a8:	4601      	mov	r1, r0
 80009aa:	f000 f8e1 	bl	8000b70 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 80009ae:	2001      	movs	r0, #1
 80009b0:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 80009b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 80009b6:	f000 b8db 	b.w	8000b70 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80009ba:	2002      	movs	r0, #2
 80009bc:	2101      	movs	r1, #1
 80009be:	f000 f8d7 	bl	8000b70 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 80009c2:	2002      	movs	r0, #2
 80009c4:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 80009c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
  }
  else if (GPIOx == GPIOB)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 80009ca:	f000 b8d1 	b.w	8000b70 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80009ce:	2004      	movs	r0, #4
 80009d0:	2101      	movs	r1, #1
 80009d2:	f000 f8cd 	bl	8000b70 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 80009d6:	2004      	movs	r0, #4
 80009d8:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 80009da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
  }
  else if (GPIOx == GPIOC)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 80009de:	f000 b8c7 	b.w	8000b70 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80009e2:	2008      	movs	r0, #8
 80009e4:	2101      	movs	r1, #1
 80009e6:	f000 f8c3 	bl	8000b70 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 80009ea:	2008      	movs	r0, #8
 80009ec:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 80009ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
  }
  else if (GPIOx == GPIOD)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 80009f2:	f000 b8bd 	b.w	8000b70 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 80009f6:	2010      	movs	r0, #16
 80009f8:	2101      	movs	r1, #1
 80009fa:	f000 f8b9 	bl	8000b70 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 80009fe:	2010      	movs	r0, #16
 8000a00:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000a02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
  }
  else if (GPIOx == GPIOE)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8000a06:	f000 b8b3 	b.w	8000b70 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8000a0a:	2020      	movs	r0, #32
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	f000 f8af 	bl	8000b70 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 8000a12:	2020      	movs	r0, #32
 8000a14:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000a16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
  }
  else if (GPIOx == GPIOF)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 8000a1a:	f000 b8a9 	b.w	8000b70 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8000a1e:	2040      	movs	r0, #64	; 0x40
 8000a20:	2101      	movs	r1, #1
 8000a22:	f000 f8a5 	bl	8000b70 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8000a26:	2040      	movs	r0, #64	; 0x40
 8000a28:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000a2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
  }
  else if (GPIOx == GPIOG)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8000a2e:	f000 b89f 	b.w	8000b70 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 8000a32:	2080      	movs	r0, #128	; 0x80
 8000a34:	2101      	movs	r1, #1
 8000a36:	f000 f89b 	bl	8000b70 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8000a3a:	2080      	movs	r0, #128	; 0x80
 8000a3c:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000a3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
  }
  else if (GPIOx == GPIOH)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8000a42:	f000 b895 	b.w	8000b70 <RCC_AHB1PeriphResetCmd>
  }

  else if (GPIOx == GPIOI)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 8000a46:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	f000 f890 	bl	8000b70 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8000a50:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000a54:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000a56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  }

  else if (GPIOx == GPIOI)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8000a5a:	f000 b889 	b.w	8000b70 <RCC_AHB1PeriphResetCmd>
  }
  else if (GPIOx == GPIOJ)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
 8000a5e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a62:	2101      	movs	r1, #1
 8000a64:	f000 f884 	bl	8000b70 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
 8000a68:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a6c:	2100      	movs	r1, #0
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
    }
  }
}
 8000a6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
  }
  else if (GPIOx == GPIOJ)
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
 8000a72:	f000 b87d 	b.w	8000b70 <RCC_AHB1PeriphResetCmd>
 8000a76:	bf00      	nop
 8000a78:	40020000 	.word	0x40020000
 8000a7c:	40020400 	.word	0x40020400
 8000a80:	40020800 	.word	0x40020800
 8000a84:	40020c00 	.word	0x40020c00
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	40021400 	.word	0x40021400
 8000a90:	40021800 	.word	0x40021800
 8000a94:	40021c00 	.word	0x40021c00
 8000a98:	40022000 	.word	0x40022000
 8000a9c:	40022400 	.word	0x40022400
 8000aa0:	40022800 	.word	0x40022800

08000aa4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000aaa:	4613      	mov	r3, r2
 8000aac:	f8d1 e000 	ldr.w	lr, [r1]
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000ab0:	2701      	movs	r7, #1
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000ab2:	f04f 0c03 	mov.w	ip, #3
 8000ab6:	e004      	b.n	8000ac2 <GPIO_Init+0x1e>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000ab8:	3301      	adds	r3, #1
 8000aba:	2b10      	cmp	r3, #16
 8000abc:	f102 0202 	add.w	r2, r2, #2
 8000ac0:	d028      	beq.n	8000b14 <GPIO_Init+0x70>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000ac2:	fa07 f403 	lsl.w	r4, r7, r3
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000ac6:	ea04 050e 	and.w	r5, r4, lr

    if (currentpin == pos)
 8000aca:	42a5      	cmp	r5, r4
 8000acc:	d1f4      	bne.n	8000ab8 <GPIO_Init+0x14>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000ace:	f8d0 8000 	ldr.w	r8, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000ad2:	790e      	ldrb	r6, [r1, #4]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000ad4:	fa0c f402 	lsl.w	r4, ip, r2
 8000ad8:	43e4      	mvns	r4, r4
 8000ada:	ea04 0808 	and.w	r8, r4, r8
 8000ade:	f8c0 8000 	str.w	r8, [r0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000ae2:	f8d0 8000 	ldr.w	r8, [r0]
 8000ae6:	fa06 f902 	lsl.w	r9, r6, r2

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000aea:	3e01      	subs	r6, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000aec:	ea49 0808 	orr.w	r8, r9, r8

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000af0:	2e01      	cmp	r6, #1
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;

    if (currentpin == pos)
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000af2:	f8c0 8000 	str.w	r8, [r0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000af6:	d90f      	bls.n	8000b18 <GPIO_Init+0x74>
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000af8:	68c5      	ldr	r5, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000afa:	79ce      	ldrb	r6, [r1, #7]
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000afc:	402c      	ands	r4, r5
 8000afe:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000b00:	68c5      	ldr	r5, [r0, #12]
 8000b02:	fa06 f402 	lsl.w	r4, r6, r2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000b06:	3301      	adds	r3, #1
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000b08:	432c      	orrs	r4, r5
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000b0a:	2b10      	cmp	r3, #16
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000b0c:	60c4      	str	r4, [r0, #12]
 8000b0e:	f102 0202 	add.w	r2, r2, #2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000b12:	d1d6      	bne.n	8000ac2 <GPIO_Init+0x1e>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000b14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000b18:	f8d0 9008 	ldr.w	r9, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000b1c:	f891 8005 	ldrb.w	r8, [r1, #5]
        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000b20:	798e      	ldrb	r6, [r1, #6]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000b22:	ea04 0909 	and.w	r9, r4, r9
 8000b26:	f8c0 9008 	str.w	r9, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000b2a:	f8d0 9008 	ldr.w	r9, [r0, #8]
 8000b2e:	fa08 f802 	lsl.w	r8, r8, r2
 8000b32:	ea48 0809 	orr.w	r8, r8, r9
 8000b36:	f8c0 8008 	str.w	r8, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000b3a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8000b3e:	ea28 0505 	bic.w	r5, r8, r5
 8000b42:	6045      	str	r5, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000b44:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8000b48:	fa06 f503 	lsl.w	r5, r6, r3
 8000b4c:	b2ad      	uxth	r5, r5
 8000b4e:	ea45 0508 	orr.w	r5, r5, r8
 8000b52:	6045      	str	r5, [r0, #4]
 8000b54:	e7d0      	b.n	8000af8 <GPIO_Init+0x54>
 8000b56:	bf00      	nop

08000b58 <RCC_AHB1PeriphClockCmd>:
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000b58:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <RCC_AHB1PeriphClockCmd+0x14>)
 8000b5a:	6b13      	ldr	r3, [r2, #48]	; 0x30
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000b5c:	b919      	cbnz	r1, 8000b66 <RCC_AHB1PeriphClockCmd+0xe>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000b5e:	ea23 0000 	bic.w	r0, r3, r0
 8000b62:	6310      	str	r0, [r2, #48]	; 0x30
 8000b64:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000b66:	4318      	orrs	r0, r3
 8000b68:	6310      	str	r0, [r2, #48]	; 0x30
 8000b6a:	4770      	bx	lr
 8000b6c:	40023800 	.word	0x40023800

08000b70 <RCC_AHB1PeriphResetCmd>:
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8000b70:	4a04      	ldr	r2, [pc, #16]	; (8000b84 <RCC_AHB1PeriphResetCmd+0x14>)
 8000b72:	6913      	ldr	r3, [r2, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b74:	b919      	cbnz	r1, 8000b7e <RCC_AHB1PeriphResetCmd+0xe>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8000b76:	ea23 0000 	bic.w	r0, r3, r0
 8000b7a:	6110      	str	r0, [r2, #16]
 8000b7c:	4770      	bx	lr
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8000b7e:	4318      	orrs	r0, r3
 8000b80:	6110      	str	r0, [r2, #16]
 8000b82:	4770      	bx	lr
 8000b84:	40023800 	.word	0x40023800

08000b88 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000b88:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8000b8c:	8081      	strh	r1, [r0, #4]
 8000b8e:	4770      	bx	lr

08000b90 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000b90:	8880      	ldrh	r0, [r0, #4]
}
 8000b92:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8000b96:	4770      	bx	lr

08000b98 <USART_GetFlagStatus>:
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000b98:	8803      	ldrh	r3, [r0, #0]
 8000b9a:	4219      	tst	r1, r3
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
}
 8000b9c:	bf14      	ite	ne
 8000b9e:	2001      	movne	r0, #1
 8000ba0:	2000      	moveq	r0, #0
 8000ba2:	4770      	bx	lr

08000ba4 <__libc_init_array>:
 8000ba4:	b570      	push	{r4, r5, r6, lr}
 8000ba6:	4e0f      	ldr	r6, [pc, #60]	; (8000be4 <__libc_init_array+0x40>)
 8000ba8:	4d0f      	ldr	r5, [pc, #60]	; (8000be8 <__libc_init_array+0x44>)
 8000baa:	1b76      	subs	r6, r6, r5
 8000bac:	10b6      	asrs	r6, r6, #2
 8000bae:	bf18      	it	ne
 8000bb0:	2400      	movne	r4, #0
 8000bb2:	d005      	beq.n	8000bc0 <__libc_init_array+0x1c>
 8000bb4:	3401      	adds	r4, #1
 8000bb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bba:	4798      	blx	r3
 8000bbc:	42a6      	cmp	r6, r4
 8000bbe:	d1f9      	bne.n	8000bb4 <__libc_init_array+0x10>
 8000bc0:	4e0a      	ldr	r6, [pc, #40]	; (8000bec <__libc_init_array+0x48>)
 8000bc2:	4d0b      	ldr	r5, [pc, #44]	; (8000bf0 <__libc_init_array+0x4c>)
 8000bc4:	1b76      	subs	r6, r6, r5
 8000bc6:	f000 fca7 	bl	8001518 <_init>
 8000bca:	10b6      	asrs	r6, r6, #2
 8000bcc:	bf18      	it	ne
 8000bce:	2400      	movne	r4, #0
 8000bd0:	d006      	beq.n	8000be0 <__libc_init_array+0x3c>
 8000bd2:	3401      	adds	r4, #1
 8000bd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bd8:	4798      	blx	r3
 8000bda:	42a6      	cmp	r6, r4
 8000bdc:	d1f9      	bne.n	8000bd2 <__libc_init_array+0x2e>
 8000bde:	bd70      	pop	{r4, r5, r6, pc}
 8000be0:	bd70      	pop	{r4, r5, r6, pc}
 8000be2:	bf00      	nop
 8000be4:	08001530 	.word	0x08001530
 8000be8:	08001530 	.word	0x08001530
 8000bec:	08001538 	.word	0x08001538
 8000bf0:	08001530 	.word	0x08001530

08000bf4 <malloc>:
 8000bf4:	4b02      	ldr	r3, [pc, #8]	; (8000c00 <malloc+0xc>)
 8000bf6:	4601      	mov	r1, r0
 8000bf8:	6818      	ldr	r0, [r3, #0]
 8000bfa:	f000 b803 	b.w	8000c04 <_malloc_r>
 8000bfe:	bf00      	nop
 8000c00:	20000430 	.word	0x20000430

08000c04 <_malloc_r>:
 8000c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c08:	f101 050b 	add.w	r5, r1, #11
 8000c0c:	2d16      	cmp	r5, #22
 8000c0e:	b083      	sub	sp, #12
 8000c10:	4606      	mov	r6, r0
 8000c12:	d927      	bls.n	8000c64 <_malloc_r+0x60>
 8000c14:	f035 0507 	bics.w	r5, r5, #7
 8000c18:	f100 80b6 	bmi.w	8000d88 <_malloc_r+0x184>
 8000c1c:	42a9      	cmp	r1, r5
 8000c1e:	f200 80b3 	bhi.w	8000d88 <_malloc_r+0x184>
 8000c22:	f7ff fd01 	bl	8000628 <__malloc_lock>
 8000c26:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8000c2a:	d222      	bcs.n	8000c72 <_malloc_r+0x6e>
 8000c2c:	4fc2      	ldr	r7, [pc, #776]	; (8000f38 <_malloc_r+0x334>)
 8000c2e:	08e8      	lsrs	r0, r5, #3
 8000c30:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
 8000c34:	68dc      	ldr	r4, [r3, #12]
 8000c36:	429c      	cmp	r4, r3
 8000c38:	f000 81c9 	beq.w	8000fce <_malloc_r+0x3ca>
 8000c3c:	6863      	ldr	r3, [r4, #4]
 8000c3e:	68e1      	ldr	r1, [r4, #12]
 8000c40:	68a5      	ldr	r5, [r4, #8]
 8000c42:	f023 0303 	bic.w	r3, r3, #3
 8000c46:	4423      	add	r3, r4
 8000c48:	4630      	mov	r0, r6
 8000c4a:	685a      	ldr	r2, [r3, #4]
 8000c4c:	60e9      	str	r1, [r5, #12]
 8000c4e:	f042 0201 	orr.w	r2, r2, #1
 8000c52:	608d      	str	r5, [r1, #8]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	f7ff fce9 	bl	800062c <__malloc_unlock>
 8000c5a:	3408      	adds	r4, #8
 8000c5c:	4620      	mov	r0, r4
 8000c5e:	b003      	add	sp, #12
 8000c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c64:	2910      	cmp	r1, #16
 8000c66:	f200 808f 	bhi.w	8000d88 <_malloc_r+0x184>
 8000c6a:	f7ff fcdd 	bl	8000628 <__malloc_lock>
 8000c6e:	2510      	movs	r5, #16
 8000c70:	e7dc      	b.n	8000c2c <_malloc_r+0x28>
 8000c72:	0a68      	lsrs	r0, r5, #9
 8000c74:	f000 808f 	beq.w	8000d96 <_malloc_r+0x192>
 8000c78:	2804      	cmp	r0, #4
 8000c7a:	f200 8154 	bhi.w	8000f26 <_malloc_r+0x322>
 8000c7e:	09a8      	lsrs	r0, r5, #6
 8000c80:	3038      	adds	r0, #56	; 0x38
 8000c82:	0041      	lsls	r1, r0, #1
 8000c84:	4fac      	ldr	r7, [pc, #688]	; (8000f38 <_malloc_r+0x334>)
 8000c86:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8000c8a:	68cc      	ldr	r4, [r1, #12]
 8000c8c:	42a1      	cmp	r1, r4
 8000c8e:	d106      	bne.n	8000c9e <_malloc_r+0x9a>
 8000c90:	e00c      	b.n	8000cac <_malloc_r+0xa8>
 8000c92:	2a00      	cmp	r2, #0
 8000c94:	f280 8082 	bge.w	8000d9c <_malloc_r+0x198>
 8000c98:	68e4      	ldr	r4, [r4, #12]
 8000c9a:	42a1      	cmp	r1, r4
 8000c9c:	d006      	beq.n	8000cac <_malloc_r+0xa8>
 8000c9e:	6863      	ldr	r3, [r4, #4]
 8000ca0:	f023 0303 	bic.w	r3, r3, #3
 8000ca4:	1b5a      	subs	r2, r3, r5
 8000ca6:	2a0f      	cmp	r2, #15
 8000ca8:	ddf3      	ble.n	8000c92 <_malloc_r+0x8e>
 8000caa:	3801      	subs	r0, #1
 8000cac:	3001      	adds	r0, #1
 8000cae:	49a2      	ldr	r1, [pc, #648]	; (8000f38 <_malloc_r+0x334>)
 8000cb0:	693c      	ldr	r4, [r7, #16]
 8000cb2:	f101 0e08 	add.w	lr, r1, #8
 8000cb6:	4574      	cmp	r4, lr
 8000cb8:	f000 817e 	beq.w	8000fb8 <_malloc_r+0x3b4>
 8000cbc:	6863      	ldr	r3, [r4, #4]
 8000cbe:	f023 0303 	bic.w	r3, r3, #3
 8000cc2:	1b5a      	subs	r2, r3, r5
 8000cc4:	2a0f      	cmp	r2, #15
 8000cc6:	f300 8164 	bgt.w	8000f92 <_malloc_r+0x38e>
 8000cca:	2a00      	cmp	r2, #0
 8000ccc:	f8c1 e014 	str.w	lr, [r1, #20]
 8000cd0:	f8c1 e010 	str.w	lr, [r1, #16]
 8000cd4:	da73      	bge.n	8000dbe <_malloc_r+0x1ba>
 8000cd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cda:	f080 8139 	bcs.w	8000f50 <_malloc_r+0x34c>
 8000cde:	08db      	lsrs	r3, r3, #3
 8000ce0:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 8000ce4:	ea4f 0ca3 	mov.w	ip, r3, asr #2
 8000ce8:	684a      	ldr	r2, [r1, #4]
 8000cea:	f8d8 9008 	ldr.w	r9, [r8, #8]
 8000cee:	f8c4 9008 	str.w	r9, [r4, #8]
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	fa03 f30c 	lsl.w	r3, r3, ip
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	f8c4 800c 	str.w	r8, [r4, #12]
 8000cfe:	604b      	str	r3, [r1, #4]
 8000d00:	f8c8 4008 	str.w	r4, [r8, #8]
 8000d04:	f8c9 400c 	str.w	r4, [r9, #12]
 8000d08:	1082      	asrs	r2, r0, #2
 8000d0a:	2401      	movs	r4, #1
 8000d0c:	4094      	lsls	r4, r2
 8000d0e:	429c      	cmp	r4, r3
 8000d10:	d862      	bhi.n	8000dd8 <_malloc_r+0x1d4>
 8000d12:	4223      	tst	r3, r4
 8000d14:	d106      	bne.n	8000d24 <_malloc_r+0x120>
 8000d16:	f020 0003 	bic.w	r0, r0, #3
 8000d1a:	0064      	lsls	r4, r4, #1
 8000d1c:	4223      	tst	r3, r4
 8000d1e:	f100 0004 	add.w	r0, r0, #4
 8000d22:	d0fa      	beq.n	8000d1a <_malloc_r+0x116>
 8000d24:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
 8000d28:	46c4      	mov	ip, r8
 8000d2a:	4681      	mov	r9, r0
 8000d2c:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8000d30:	459c      	cmp	ip, r3
 8000d32:	d107      	bne.n	8000d44 <_malloc_r+0x140>
 8000d34:	e142      	b.n	8000fbc <_malloc_r+0x3b8>
 8000d36:	2900      	cmp	r1, #0
 8000d38:	f280 8152 	bge.w	8000fe0 <_malloc_r+0x3dc>
 8000d3c:	68db      	ldr	r3, [r3, #12]
 8000d3e:	459c      	cmp	ip, r3
 8000d40:	f000 813c 	beq.w	8000fbc <_malloc_r+0x3b8>
 8000d44:	685a      	ldr	r2, [r3, #4]
 8000d46:	f022 0203 	bic.w	r2, r2, #3
 8000d4a:	1b51      	subs	r1, r2, r5
 8000d4c:	290f      	cmp	r1, #15
 8000d4e:	ddf2      	ble.n	8000d36 <_malloc_r+0x132>
 8000d50:	461c      	mov	r4, r3
 8000d52:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8000d56:	f854 8f08 	ldr.w	r8, [r4, #8]!
 8000d5a:	195a      	adds	r2, r3, r5
 8000d5c:	f045 0901 	orr.w	r9, r5, #1
 8000d60:	f041 0501 	orr.w	r5, r1, #1
 8000d64:	f8c3 9004 	str.w	r9, [r3, #4]
 8000d68:	4630      	mov	r0, r6
 8000d6a:	f8c8 c00c 	str.w	ip, [r8, #12]
 8000d6e:	f8cc 8008 	str.w	r8, [ip, #8]
 8000d72:	617a      	str	r2, [r7, #20]
 8000d74:	613a      	str	r2, [r7, #16]
 8000d76:	f8c2 e00c 	str.w	lr, [r2, #12]
 8000d7a:	f8c2 e008 	str.w	lr, [r2, #8]
 8000d7e:	6055      	str	r5, [r2, #4]
 8000d80:	5051      	str	r1, [r2, r1]
 8000d82:	f7ff fc53 	bl	800062c <__malloc_unlock>
 8000d86:	e769      	b.n	8000c5c <_malloc_r+0x58>
 8000d88:	2400      	movs	r4, #0
 8000d8a:	230c      	movs	r3, #12
 8000d8c:	4620      	mov	r0, r4
 8000d8e:	6033      	str	r3, [r6, #0]
 8000d90:	b003      	add	sp, #12
 8000d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d96:	217e      	movs	r1, #126	; 0x7e
 8000d98:	203f      	movs	r0, #63	; 0x3f
 8000d9a:	e773      	b.n	8000c84 <_malloc_r+0x80>
 8000d9c:	4423      	add	r3, r4
 8000d9e:	68e1      	ldr	r1, [r4, #12]
 8000da0:	685a      	ldr	r2, [r3, #4]
 8000da2:	68a5      	ldr	r5, [r4, #8]
 8000da4:	f042 0201 	orr.w	r2, r2, #1
 8000da8:	60e9      	str	r1, [r5, #12]
 8000daa:	4630      	mov	r0, r6
 8000dac:	608d      	str	r5, [r1, #8]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	f7ff fc3c 	bl	800062c <__malloc_unlock>
 8000db4:	3408      	adds	r4, #8
 8000db6:	4620      	mov	r0, r4
 8000db8:	b003      	add	sp, #12
 8000dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dbe:	4423      	add	r3, r4
 8000dc0:	4630      	mov	r0, r6
 8000dc2:	685a      	ldr	r2, [r3, #4]
 8000dc4:	f042 0201 	orr.w	r2, r2, #1
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	f7ff fc2f 	bl	800062c <__malloc_unlock>
 8000dce:	3408      	adds	r4, #8
 8000dd0:	4620      	mov	r0, r4
 8000dd2:	b003      	add	sp, #12
 8000dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dd8:	68bc      	ldr	r4, [r7, #8]
 8000dda:	6863      	ldr	r3, [r4, #4]
 8000ddc:	f023 0803 	bic.w	r8, r3, #3
 8000de0:	4545      	cmp	r5, r8
 8000de2:	d804      	bhi.n	8000dee <_malloc_r+0x1ea>
 8000de4:	ebc5 0308 	rsb	r3, r5, r8
 8000de8:	2b0f      	cmp	r3, #15
 8000dea:	f300 808c 	bgt.w	8000f06 <_malloc_r+0x302>
 8000dee:	4b53      	ldr	r3, [pc, #332]	; (8000f3c <_malloc_r+0x338>)
 8000df0:	f8df a158 	ldr.w	sl, [pc, #344]	; 8000f4c <_malloc_r+0x348>
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	f8da 3000 	ldr.w	r3, [sl]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	442a      	add	r2, r5
 8000dfe:	eb04 0b08 	add.w	fp, r4, r8
 8000e02:	f000 8150 	beq.w	80010a6 <_malloc_r+0x4a2>
 8000e06:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8000e0a:	320f      	adds	r2, #15
 8000e0c:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8000e10:	f022 020f 	bic.w	r2, r2, #15
 8000e14:	4611      	mov	r1, r2
 8000e16:	4630      	mov	r0, r6
 8000e18:	9201      	str	r2, [sp, #4]
 8000e1a:	f7ff fbe5 	bl	80005e8 <_sbrk_r>
 8000e1e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8000e22:	4681      	mov	r9, r0
 8000e24:	9a01      	ldr	r2, [sp, #4]
 8000e26:	f000 80f5 	beq.w	8001014 <_malloc_r+0x410>
 8000e2a:	4583      	cmp	fp, r0
 8000e2c:	f200 80ef 	bhi.w	800100e <_malloc_r+0x40a>
 8000e30:	4b43      	ldr	r3, [pc, #268]	; (8000f40 <_malloc_r+0x33c>)
 8000e32:	6819      	ldr	r1, [r3, #0]
 8000e34:	45cb      	cmp	fp, r9
 8000e36:	4411      	add	r1, r2
 8000e38:	6019      	str	r1, [r3, #0]
 8000e3a:	f000 813d 	beq.w	80010b8 <_malloc_r+0x4b4>
 8000e3e:	f8da 0000 	ldr.w	r0, [sl]
 8000e42:	f8df e108 	ldr.w	lr, [pc, #264]	; 8000f4c <_malloc_r+0x348>
 8000e46:	3001      	adds	r0, #1
 8000e48:	bf1b      	ittet	ne
 8000e4a:	ebcb 0b09 	rsbne	fp, fp, r9
 8000e4e:	4459      	addne	r1, fp
 8000e50:	f8ce 9000 	streq.w	r9, [lr]
 8000e54:	6019      	strne	r1, [r3, #0]
 8000e56:	f019 0107 	ands.w	r1, r9, #7
 8000e5a:	f000 8107 	beq.w	800106c <_malloc_r+0x468>
 8000e5e:	f1c1 0008 	rsb	r0, r1, #8
 8000e62:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 8000e66:	4481      	add	r9, r0
 8000e68:	3108      	adds	r1, #8
 8000e6a:	444a      	add	r2, r9
 8000e6c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8000e70:	ebc2 0a01 	rsb	sl, r2, r1
 8000e74:	4651      	mov	r1, sl
 8000e76:	4630      	mov	r0, r6
 8000e78:	9301      	str	r3, [sp, #4]
 8000e7a:	f7ff fbb5 	bl	80005e8 <_sbrk_r>
 8000e7e:	1c43      	adds	r3, r0, #1
 8000e80:	9b01      	ldr	r3, [sp, #4]
 8000e82:	f000 8127 	beq.w	80010d4 <_malloc_r+0x4d0>
 8000e86:	ebc9 0200 	rsb	r2, r9, r0
 8000e8a:	4452      	add	r2, sl
 8000e8c:	f042 0201 	orr.w	r2, r2, #1
 8000e90:	6819      	ldr	r1, [r3, #0]
 8000e92:	f8c7 9008 	str.w	r9, [r7, #8]
 8000e96:	4451      	add	r1, sl
 8000e98:	42bc      	cmp	r4, r7
 8000e9a:	f8c9 2004 	str.w	r2, [r9, #4]
 8000e9e:	6019      	str	r1, [r3, #0]
 8000ea0:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8000f40 <_malloc_r+0x33c>
 8000ea4:	d016      	beq.n	8000ed4 <_malloc_r+0x2d0>
 8000ea6:	f1b8 0f0f 	cmp.w	r8, #15
 8000eaa:	f240 80e2 	bls.w	8001072 <_malloc_r+0x46e>
 8000eae:	6862      	ldr	r2, [r4, #4]
 8000eb0:	f1a8 030c 	sub.w	r3, r8, #12
 8000eb4:	f023 0307 	bic.w	r3, r3, #7
 8000eb8:	18e0      	adds	r0, r4, r3
 8000eba:	f002 0201 	and.w	r2, r2, #1
 8000ebe:	f04f 0e05 	mov.w	lr, #5
 8000ec2:	431a      	orrs	r2, r3
 8000ec4:	2b0f      	cmp	r3, #15
 8000ec6:	6062      	str	r2, [r4, #4]
 8000ec8:	f8c0 e004 	str.w	lr, [r0, #4]
 8000ecc:	f8c0 e008 	str.w	lr, [r0, #8]
 8000ed0:	f200 8104 	bhi.w	80010dc <_malloc_r+0x4d8>
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <_malloc_r+0x340>)
 8000ed6:	68bc      	ldr	r4, [r7, #8]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	4291      	cmp	r1, r2
 8000edc:	bf88      	it	hi
 8000ede:	6019      	strhi	r1, [r3, #0]
 8000ee0:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <_malloc_r+0x344>)
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	6862      	ldr	r2, [r4, #4]
 8000ee8:	bf88      	it	hi
 8000eea:	6019      	strhi	r1, [r3, #0]
 8000eec:	f022 0203 	bic.w	r2, r2, #3
 8000ef0:	4295      	cmp	r5, r2
 8000ef2:	eba2 0305 	sub.w	r3, r2, r5
 8000ef6:	d801      	bhi.n	8000efc <_malloc_r+0x2f8>
 8000ef8:	2b0f      	cmp	r3, #15
 8000efa:	dc04      	bgt.n	8000f06 <_malloc_r+0x302>
 8000efc:	4630      	mov	r0, r6
 8000efe:	f7ff fb95 	bl	800062c <__malloc_unlock>
 8000f02:	2400      	movs	r4, #0
 8000f04:	e6aa      	b.n	8000c5c <_malloc_r+0x58>
 8000f06:	1962      	adds	r2, r4, r5
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	f045 0501 	orr.w	r5, r5, #1
 8000f10:	6065      	str	r5, [r4, #4]
 8000f12:	4630      	mov	r0, r6
 8000f14:	60ba      	str	r2, [r7, #8]
 8000f16:	6053      	str	r3, [r2, #4]
 8000f18:	f7ff fb88 	bl	800062c <__malloc_unlock>
 8000f1c:	3408      	adds	r4, #8
 8000f1e:	4620      	mov	r0, r4
 8000f20:	b003      	add	sp, #12
 8000f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f26:	2814      	cmp	r0, #20
 8000f28:	d969      	bls.n	8000ffe <_malloc_r+0x3fa>
 8000f2a:	2854      	cmp	r0, #84	; 0x54
 8000f2c:	f200 8097 	bhi.w	800105e <_malloc_r+0x45a>
 8000f30:	0b28      	lsrs	r0, r5, #12
 8000f32:	306e      	adds	r0, #110	; 0x6e
 8000f34:	0041      	lsls	r1, r0, #1
 8000f36:	e6a5      	b.n	8000c84 <_malloc_r+0x80>
 8000f38:	20000434 	.word	0x20000434
 8000f3c:	2000090c 	.word	0x2000090c
 8000f40:	20000910 	.word	0x20000910
 8000f44:	20000908 	.word	0x20000908
 8000f48:	20000904 	.word	0x20000904
 8000f4c:	20000840 	.word	0x20000840
 8000f50:	0a5a      	lsrs	r2, r3, #9
 8000f52:	2a04      	cmp	r2, #4
 8000f54:	d956      	bls.n	8001004 <_malloc_r+0x400>
 8000f56:	2a14      	cmp	r2, #20
 8000f58:	f200 80a7 	bhi.w	80010aa <_malloc_r+0x4a6>
 8000f5c:	325b      	adds	r2, #91	; 0x5b
 8000f5e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8000f62:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
 8000f66:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 800111c <_malloc_r+0x518>
 8000f6a:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8000f6e:	4561      	cmp	r1, ip
 8000f70:	f000 8085 	beq.w	800107e <_malloc_r+0x47a>
 8000f74:	684a      	ldr	r2, [r1, #4]
 8000f76:	f022 0203 	bic.w	r2, r2, #3
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d202      	bcs.n	8000f84 <_malloc_r+0x380>
 8000f7e:	6889      	ldr	r1, [r1, #8]
 8000f80:	458c      	cmp	ip, r1
 8000f82:	d1f7      	bne.n	8000f74 <_malloc_r+0x370>
 8000f84:	68ca      	ldr	r2, [r1, #12]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	60e2      	str	r2, [r4, #12]
 8000f8a:	60a1      	str	r1, [r4, #8]
 8000f8c:	6094      	str	r4, [r2, #8]
 8000f8e:	60cc      	str	r4, [r1, #12]
 8000f90:	e6ba      	b.n	8000d08 <_malloc_r+0x104>
 8000f92:	1963      	adds	r3, r4, r5
 8000f94:	f042 0701 	orr.w	r7, r2, #1
 8000f98:	f045 0501 	orr.w	r5, r5, #1
 8000f9c:	6065      	str	r5, [r4, #4]
 8000f9e:	4630      	mov	r0, r6
 8000fa0:	614b      	str	r3, [r1, #20]
 8000fa2:	610b      	str	r3, [r1, #16]
 8000fa4:	f8c3 e00c 	str.w	lr, [r3, #12]
 8000fa8:	f8c3 e008 	str.w	lr, [r3, #8]
 8000fac:	605f      	str	r7, [r3, #4]
 8000fae:	509a      	str	r2, [r3, r2]
 8000fb0:	3408      	adds	r4, #8
 8000fb2:	f7ff fb3b 	bl	800062c <__malloc_unlock>
 8000fb6:	e651      	b.n	8000c5c <_malloc_r+0x58>
 8000fb8:	684b      	ldr	r3, [r1, #4]
 8000fba:	e6a5      	b.n	8000d08 <_malloc_r+0x104>
 8000fbc:	f109 0901 	add.w	r9, r9, #1
 8000fc0:	f019 0f03 	tst.w	r9, #3
 8000fc4:	f10c 0c08 	add.w	ip, ip, #8
 8000fc8:	f47f aeb0 	bne.w	8000d2c <_malloc_r+0x128>
 8000fcc:	e02b      	b.n	8001026 <_malloc_r+0x422>
 8000fce:	f104 0308 	add.w	r3, r4, #8
 8000fd2:	6964      	ldr	r4, [r4, #20]
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	bf08      	it	eq
 8000fd8:	3002      	addeq	r0, #2
 8000fda:	f43f ae68 	beq.w	8000cae <_malloc_r+0xaa>
 8000fde:	e62d      	b.n	8000c3c <_malloc_r+0x38>
 8000fe0:	441a      	add	r2, r3
 8000fe2:	461c      	mov	r4, r3
 8000fe4:	6851      	ldr	r1, [r2, #4]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	f854 5f08 	ldr.w	r5, [r4, #8]!
 8000fec:	f041 0101 	orr.w	r1, r1, #1
 8000ff0:	6051      	str	r1, [r2, #4]
 8000ff2:	4630      	mov	r0, r6
 8000ff4:	60eb      	str	r3, [r5, #12]
 8000ff6:	609d      	str	r5, [r3, #8]
 8000ff8:	f7ff fb18 	bl	800062c <__malloc_unlock>
 8000ffc:	e62e      	b.n	8000c5c <_malloc_r+0x58>
 8000ffe:	305b      	adds	r0, #91	; 0x5b
 8001000:	0041      	lsls	r1, r0, #1
 8001002:	e63f      	b.n	8000c84 <_malloc_r+0x80>
 8001004:	099a      	lsrs	r2, r3, #6
 8001006:	3238      	adds	r2, #56	; 0x38
 8001008:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 800100c:	e7a9      	b.n	8000f62 <_malloc_r+0x35e>
 800100e:	42bc      	cmp	r4, r7
 8001010:	f43f af0e 	beq.w	8000e30 <_malloc_r+0x22c>
 8001014:	68bc      	ldr	r4, [r7, #8]
 8001016:	6862      	ldr	r2, [r4, #4]
 8001018:	f022 0203 	bic.w	r2, r2, #3
 800101c:	e768      	b.n	8000ef0 <_malloc_r+0x2ec>
 800101e:	f8d8 8000 	ldr.w	r8, [r8]
 8001022:	4598      	cmp	r8, r3
 8001024:	d177      	bne.n	8001116 <_malloc_r+0x512>
 8001026:	f010 0f03 	tst.w	r0, #3
 800102a:	f1a8 0308 	sub.w	r3, r8, #8
 800102e:	f100 30ff 	add.w	r0, r0, #4294967295
 8001032:	d1f4      	bne.n	800101e <_malloc_r+0x41a>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	ea23 0304 	bic.w	r3, r3, r4
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	0064      	lsls	r4, r4, #1
 800103e:	429c      	cmp	r4, r3
 8001040:	f63f aeca 	bhi.w	8000dd8 <_malloc_r+0x1d4>
 8001044:	2c00      	cmp	r4, #0
 8001046:	f43f aec7 	beq.w	8000dd8 <_malloc_r+0x1d4>
 800104a:	4223      	tst	r3, r4
 800104c:	4648      	mov	r0, r9
 800104e:	f47f ae69 	bne.w	8000d24 <_malloc_r+0x120>
 8001052:	0064      	lsls	r4, r4, #1
 8001054:	4223      	tst	r3, r4
 8001056:	f100 0004 	add.w	r0, r0, #4
 800105a:	d0fa      	beq.n	8001052 <_malloc_r+0x44e>
 800105c:	e662      	b.n	8000d24 <_malloc_r+0x120>
 800105e:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
 8001062:	d818      	bhi.n	8001096 <_malloc_r+0x492>
 8001064:	0be8      	lsrs	r0, r5, #15
 8001066:	3077      	adds	r0, #119	; 0x77
 8001068:	0041      	lsls	r1, r0, #1
 800106a:	e60b      	b.n	8000c84 <_malloc_r+0x80>
 800106c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001070:	e6fb      	b.n	8000e6a <_malloc_r+0x266>
 8001072:	2301      	movs	r3, #1
 8001074:	f8c9 3004 	str.w	r3, [r9, #4]
 8001078:	464c      	mov	r4, r9
 800107a:	2200      	movs	r2, #0
 800107c:	e738      	b.n	8000ef0 <_malloc_r+0x2ec>
 800107e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001082:	1092      	asrs	r2, r2, #2
 8001084:	f04f 0c01 	mov.w	ip, #1
 8001088:	fa0c f202 	lsl.w	r2, ip, r2
 800108c:	4313      	orrs	r3, r2
 800108e:	f8c8 3004 	str.w	r3, [r8, #4]
 8001092:	460a      	mov	r2, r1
 8001094:	e778      	b.n	8000f88 <_malloc_r+0x384>
 8001096:	f240 5354 	movw	r3, #1364	; 0x554
 800109a:	4298      	cmp	r0, r3
 800109c:	d817      	bhi.n	80010ce <_malloc_r+0x4ca>
 800109e:	0ca8      	lsrs	r0, r5, #18
 80010a0:	307c      	adds	r0, #124	; 0x7c
 80010a2:	0041      	lsls	r1, r0, #1
 80010a4:	e5ee      	b.n	8000c84 <_malloc_r+0x80>
 80010a6:	3210      	adds	r2, #16
 80010a8:	e6b4      	b.n	8000e14 <_malloc_r+0x210>
 80010aa:	2a54      	cmp	r2, #84	; 0x54
 80010ac:	d81e      	bhi.n	80010ec <_malloc_r+0x4e8>
 80010ae:	0b1a      	lsrs	r2, r3, #12
 80010b0:	326e      	adds	r2, #110	; 0x6e
 80010b2:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 80010b6:	e754      	b.n	8000f62 <_malloc_r+0x35e>
 80010b8:	f3cb 000b 	ubfx	r0, fp, #0, #12
 80010bc:	2800      	cmp	r0, #0
 80010be:	f47f aebe 	bne.w	8000e3e <_malloc_r+0x23a>
 80010c2:	4442      	add	r2, r8
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	f042 0201 	orr.w	r2, r2, #1
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	e702      	b.n	8000ed4 <_malloc_r+0x2d0>
 80010ce:	21fc      	movs	r1, #252	; 0xfc
 80010d0:	207e      	movs	r0, #126	; 0x7e
 80010d2:	e5d7      	b.n	8000c84 <_malloc_r+0x80>
 80010d4:	2201      	movs	r2, #1
 80010d6:	f04f 0a00 	mov.w	sl, #0
 80010da:	e6d9      	b.n	8000e90 <_malloc_r+0x28c>
 80010dc:	f104 0108 	add.w	r1, r4, #8
 80010e0:	4630      	mov	r0, r6
 80010e2:	f000 f891 	bl	8001208 <_free_r>
 80010e6:	f8da 1000 	ldr.w	r1, [sl]
 80010ea:	e6f3      	b.n	8000ed4 <_malloc_r+0x2d0>
 80010ec:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80010f0:	d804      	bhi.n	80010fc <_malloc_r+0x4f8>
 80010f2:	0bda      	lsrs	r2, r3, #15
 80010f4:	3277      	adds	r2, #119	; 0x77
 80010f6:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 80010fa:	e732      	b.n	8000f62 <_malloc_r+0x35e>
 80010fc:	f240 5154 	movw	r1, #1364	; 0x554
 8001100:	428a      	cmp	r2, r1
 8001102:	d804      	bhi.n	800110e <_malloc_r+0x50a>
 8001104:	0c9a      	lsrs	r2, r3, #18
 8001106:	327c      	adds	r2, #124	; 0x7c
 8001108:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 800110c:	e729      	b.n	8000f62 <_malloc_r+0x35e>
 800110e:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
 8001112:	227e      	movs	r2, #126	; 0x7e
 8001114:	e725      	b.n	8000f62 <_malloc_r+0x35e>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	e790      	b.n	800103c <_malloc_r+0x438>
 800111a:	bf00      	nop
 800111c:	20000434 	.word	0x20000434

08001120 <register_fini>:
 8001120:	4b02      	ldr	r3, [pc, #8]	; (800112c <register_fini+0xc>)
 8001122:	b113      	cbz	r3, 800112a <register_fini+0xa>
 8001124:	4802      	ldr	r0, [pc, #8]	; (8001130 <register_fini+0x10>)
 8001126:	f000 b805 	b.w	8001134 <atexit>
 800112a:	4770      	bx	lr
 800112c:	00000000 	.word	0x00000000
 8001130:	08001141 	.word	0x08001141

08001134 <atexit>:
 8001134:	4601      	mov	r1, r0
 8001136:	2000      	movs	r0, #0
 8001138:	4602      	mov	r2, r0
 800113a:	4603      	mov	r3, r0
 800113c:	f000 b93c 	b.w	80013b8 <__register_exitproc>

08001140 <__libc_fini_array>:
 8001140:	b538      	push	{r3, r4, r5, lr}
 8001142:	4b08      	ldr	r3, [pc, #32]	; (8001164 <__libc_fini_array+0x24>)
 8001144:	4d08      	ldr	r5, [pc, #32]	; (8001168 <__libc_fini_array+0x28>)
 8001146:	1aed      	subs	r5, r5, r3
 8001148:	10ac      	asrs	r4, r5, #2
 800114a:	bf18      	it	ne
 800114c:	18ed      	addne	r5, r5, r3
 800114e:	d005      	beq.n	800115c <__libc_fini_array+0x1c>
 8001150:	3c01      	subs	r4, #1
 8001152:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8001156:	4798      	blx	r3
 8001158:	2c00      	cmp	r4, #0
 800115a:	d1f9      	bne.n	8001150 <__libc_fini_array+0x10>
 800115c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001160:	f000 b9e0 	b.w	8001524 <_fini>
 8001164:	08001538 	.word	0x08001538
 8001168:	0800153c 	.word	0x0800153c

0800116c <_malloc_trim_r>:
 800116c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800116e:	4f23      	ldr	r7, [pc, #140]	; (80011fc <_malloc_trim_r+0x90>)
 8001170:	460c      	mov	r4, r1
 8001172:	4606      	mov	r6, r0
 8001174:	f7ff fa58 	bl	8000628 <__malloc_lock>
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	685d      	ldr	r5, [r3, #4]
 800117c:	f025 0503 	bic.w	r5, r5, #3
 8001180:	1b29      	subs	r1, r5, r4
 8001182:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 8001186:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 800118a:	f021 010f 	bic.w	r1, r1, #15
 800118e:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 8001192:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8001196:	db07      	blt.n	80011a8 <_malloc_trim_r+0x3c>
 8001198:	4630      	mov	r0, r6
 800119a:	2100      	movs	r1, #0
 800119c:	f7ff fa24 	bl	80005e8 <_sbrk_r>
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	442b      	add	r3, r5
 80011a4:	4298      	cmp	r0, r3
 80011a6:	d004      	beq.n	80011b2 <_malloc_trim_r+0x46>
 80011a8:	4630      	mov	r0, r6
 80011aa:	f7ff fa3f 	bl	800062c <__malloc_unlock>
 80011ae:	2000      	movs	r0, #0
 80011b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011b2:	4630      	mov	r0, r6
 80011b4:	4261      	negs	r1, r4
 80011b6:	f7ff fa17 	bl	80005e8 <_sbrk_r>
 80011ba:	3001      	adds	r0, #1
 80011bc:	d00d      	beq.n	80011da <_malloc_trim_r+0x6e>
 80011be:	4b10      	ldr	r3, [pc, #64]	; (8001200 <_malloc_trim_r+0x94>)
 80011c0:	68ba      	ldr	r2, [r7, #8]
 80011c2:	6819      	ldr	r1, [r3, #0]
 80011c4:	1b2d      	subs	r5, r5, r4
 80011c6:	f045 0501 	orr.w	r5, r5, #1
 80011ca:	4630      	mov	r0, r6
 80011cc:	1b09      	subs	r1, r1, r4
 80011ce:	6055      	str	r5, [r2, #4]
 80011d0:	6019      	str	r1, [r3, #0]
 80011d2:	f7ff fa2b 	bl	800062c <__malloc_unlock>
 80011d6:	2001      	movs	r0, #1
 80011d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011da:	4630      	mov	r0, r6
 80011dc:	2100      	movs	r1, #0
 80011de:	f7ff fa03 	bl	80005e8 <_sbrk_r>
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	1a83      	subs	r3, r0, r2
 80011e6:	2b0f      	cmp	r3, #15
 80011e8:	ddde      	ble.n	80011a8 <_malloc_trim_r+0x3c>
 80011ea:	4c06      	ldr	r4, [pc, #24]	; (8001204 <_malloc_trim_r+0x98>)
 80011ec:	4904      	ldr	r1, [pc, #16]	; (8001200 <_malloc_trim_r+0x94>)
 80011ee:	6824      	ldr	r4, [r4, #0]
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	1b00      	subs	r0, r0, r4
 80011f6:	6053      	str	r3, [r2, #4]
 80011f8:	6008      	str	r0, [r1, #0]
 80011fa:	e7d5      	b.n	80011a8 <_malloc_trim_r+0x3c>
 80011fc:	20000434 	.word	0x20000434
 8001200:	20000910 	.word	0x20000910
 8001204:	20000840 	.word	0x20000840

08001208 <_free_r>:
 8001208:	2900      	cmp	r1, #0
 800120a:	d04e      	beq.n	80012aa <_free_r+0xa2>
 800120c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001210:	460c      	mov	r4, r1
 8001212:	4680      	mov	r8, r0
 8001214:	f7ff fa08 	bl	8000628 <__malloc_lock>
 8001218:	f854 7c04 	ldr.w	r7, [r4, #-4]
 800121c:	4962      	ldr	r1, [pc, #392]	; (80013a8 <_free_r+0x1a0>)
 800121e:	f027 0201 	bic.w	r2, r7, #1
 8001222:	f1a4 0508 	sub.w	r5, r4, #8
 8001226:	18ab      	adds	r3, r5, r2
 8001228:	688e      	ldr	r6, [r1, #8]
 800122a:	6858      	ldr	r0, [r3, #4]
 800122c:	429e      	cmp	r6, r3
 800122e:	f020 0003 	bic.w	r0, r0, #3
 8001232:	d05a      	beq.n	80012ea <_free_r+0xe2>
 8001234:	07fe      	lsls	r6, r7, #31
 8001236:	6058      	str	r0, [r3, #4]
 8001238:	d40b      	bmi.n	8001252 <_free_r+0x4a>
 800123a:	f854 7c08 	ldr.w	r7, [r4, #-8]
 800123e:	1bed      	subs	r5, r5, r7
 8001240:	f101 0e08 	add.w	lr, r1, #8
 8001244:	68ac      	ldr	r4, [r5, #8]
 8001246:	4574      	cmp	r4, lr
 8001248:	443a      	add	r2, r7
 800124a:	d067      	beq.n	800131c <_free_r+0x114>
 800124c:	68ef      	ldr	r7, [r5, #12]
 800124e:	60e7      	str	r7, [r4, #12]
 8001250:	60bc      	str	r4, [r7, #8]
 8001252:	181c      	adds	r4, r3, r0
 8001254:	6864      	ldr	r4, [r4, #4]
 8001256:	07e4      	lsls	r4, r4, #31
 8001258:	d40c      	bmi.n	8001274 <_free_r+0x6c>
 800125a:	4f54      	ldr	r7, [pc, #336]	; (80013ac <_free_r+0x1a4>)
 800125c:	689c      	ldr	r4, [r3, #8]
 800125e:	42bc      	cmp	r4, r7
 8001260:	4402      	add	r2, r0
 8001262:	d07c      	beq.n	800135e <_free_r+0x156>
 8001264:	68d8      	ldr	r0, [r3, #12]
 8001266:	60e0      	str	r0, [r4, #12]
 8001268:	f042 0301 	orr.w	r3, r2, #1
 800126c:	6084      	str	r4, [r0, #8]
 800126e:	606b      	str	r3, [r5, #4]
 8001270:	50aa      	str	r2, [r5, r2]
 8001272:	e003      	b.n	800127c <_free_r+0x74>
 8001274:	f042 0301 	orr.w	r3, r2, #1
 8001278:	606b      	str	r3, [r5, #4]
 800127a:	50aa      	str	r2, [r5, r2]
 800127c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001280:	d214      	bcs.n	80012ac <_free_r+0xa4>
 8001282:	08d2      	lsrs	r2, r2, #3
 8001284:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 8001288:	6848      	ldr	r0, [r1, #4]
 800128a:	689f      	ldr	r7, [r3, #8]
 800128c:	60af      	str	r7, [r5, #8]
 800128e:	1092      	asrs	r2, r2, #2
 8001290:	2401      	movs	r4, #1
 8001292:	fa04 f202 	lsl.w	r2, r4, r2
 8001296:	4310      	orrs	r0, r2
 8001298:	60eb      	str	r3, [r5, #12]
 800129a:	6048      	str	r0, [r1, #4]
 800129c:	609d      	str	r5, [r3, #8]
 800129e:	60fd      	str	r5, [r7, #12]
 80012a0:	4640      	mov	r0, r8
 80012a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80012a6:	f7ff b9c1 	b.w	800062c <__malloc_unlock>
 80012aa:	4770      	bx	lr
 80012ac:	0a53      	lsrs	r3, r2, #9
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	d847      	bhi.n	8001342 <_free_r+0x13a>
 80012b2:	0993      	lsrs	r3, r2, #6
 80012b4:	f103 0438 	add.w	r4, r3, #56	; 0x38
 80012b8:	0060      	lsls	r0, r4, #1
 80012ba:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 80012be:	493a      	ldr	r1, [pc, #232]	; (80013a8 <_free_r+0x1a0>)
 80012c0:	6883      	ldr	r3, [r0, #8]
 80012c2:	4283      	cmp	r3, r0
 80012c4:	d043      	beq.n	800134e <_free_r+0x146>
 80012c6:	6859      	ldr	r1, [r3, #4]
 80012c8:	f021 0103 	bic.w	r1, r1, #3
 80012cc:	4291      	cmp	r1, r2
 80012ce:	d902      	bls.n	80012d6 <_free_r+0xce>
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	4298      	cmp	r0, r3
 80012d4:	d1f7      	bne.n	80012c6 <_free_r+0xbe>
 80012d6:	68da      	ldr	r2, [r3, #12]
 80012d8:	60ea      	str	r2, [r5, #12]
 80012da:	60ab      	str	r3, [r5, #8]
 80012dc:	4640      	mov	r0, r8
 80012de:	6095      	str	r5, [r2, #8]
 80012e0:	60dd      	str	r5, [r3, #12]
 80012e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80012e6:	f7ff b9a1 	b.w	800062c <__malloc_unlock>
 80012ea:	07ff      	lsls	r7, r7, #31
 80012ec:	4402      	add	r2, r0
 80012ee:	d407      	bmi.n	8001300 <_free_r+0xf8>
 80012f0:	f854 3c08 	ldr.w	r3, [r4, #-8]
 80012f4:	1aed      	subs	r5, r5, r3
 80012f6:	441a      	add	r2, r3
 80012f8:	68a8      	ldr	r0, [r5, #8]
 80012fa:	68eb      	ldr	r3, [r5, #12]
 80012fc:	60c3      	str	r3, [r0, #12]
 80012fe:	6098      	str	r0, [r3, #8]
 8001300:	4b2b      	ldr	r3, [pc, #172]	; (80013b0 <_free_r+0x1a8>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f042 0001 	orr.w	r0, r2, #1
 8001308:	429a      	cmp	r2, r3
 800130a:	6068      	str	r0, [r5, #4]
 800130c:	608d      	str	r5, [r1, #8]
 800130e:	d3c7      	bcc.n	80012a0 <_free_r+0x98>
 8001310:	4b28      	ldr	r3, [pc, #160]	; (80013b4 <_free_r+0x1ac>)
 8001312:	4640      	mov	r0, r8
 8001314:	6819      	ldr	r1, [r3, #0]
 8001316:	f7ff ff29 	bl	800116c <_malloc_trim_r>
 800131a:	e7c1      	b.n	80012a0 <_free_r+0x98>
 800131c:	1819      	adds	r1, r3, r0
 800131e:	6849      	ldr	r1, [r1, #4]
 8001320:	07c9      	lsls	r1, r1, #31
 8001322:	d409      	bmi.n	8001338 <_free_r+0x130>
 8001324:	68d9      	ldr	r1, [r3, #12]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	4402      	add	r2, r0
 800132a:	f042 0001 	orr.w	r0, r2, #1
 800132e:	60d9      	str	r1, [r3, #12]
 8001330:	608b      	str	r3, [r1, #8]
 8001332:	6068      	str	r0, [r5, #4]
 8001334:	50aa      	str	r2, [r5, r2]
 8001336:	e7b3      	b.n	80012a0 <_free_r+0x98>
 8001338:	f042 0301 	orr.w	r3, r2, #1
 800133c:	606b      	str	r3, [r5, #4]
 800133e:	50aa      	str	r2, [r5, r2]
 8001340:	e7ae      	b.n	80012a0 <_free_r+0x98>
 8001342:	2b14      	cmp	r3, #20
 8001344:	d814      	bhi.n	8001370 <_free_r+0x168>
 8001346:	f103 045b 	add.w	r4, r3, #91	; 0x5b
 800134a:	0060      	lsls	r0, r4, #1
 800134c:	e7b5      	b.n	80012ba <_free_r+0xb2>
 800134e:	684a      	ldr	r2, [r1, #4]
 8001350:	10a4      	asrs	r4, r4, #2
 8001352:	2001      	movs	r0, #1
 8001354:	40a0      	lsls	r0, r4
 8001356:	4302      	orrs	r2, r0
 8001358:	604a      	str	r2, [r1, #4]
 800135a:	461a      	mov	r2, r3
 800135c:	e7bc      	b.n	80012d8 <_free_r+0xd0>
 800135e:	f042 0301 	orr.w	r3, r2, #1
 8001362:	614d      	str	r5, [r1, #20]
 8001364:	610d      	str	r5, [r1, #16]
 8001366:	60ec      	str	r4, [r5, #12]
 8001368:	60ac      	str	r4, [r5, #8]
 800136a:	606b      	str	r3, [r5, #4]
 800136c:	50aa      	str	r2, [r5, r2]
 800136e:	e797      	b.n	80012a0 <_free_r+0x98>
 8001370:	2b54      	cmp	r3, #84	; 0x54
 8001372:	d804      	bhi.n	800137e <_free_r+0x176>
 8001374:	0b13      	lsrs	r3, r2, #12
 8001376:	f103 046e 	add.w	r4, r3, #110	; 0x6e
 800137a:	0060      	lsls	r0, r4, #1
 800137c:	e79d      	b.n	80012ba <_free_r+0xb2>
 800137e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8001382:	d804      	bhi.n	800138e <_free_r+0x186>
 8001384:	0bd3      	lsrs	r3, r2, #15
 8001386:	f103 0477 	add.w	r4, r3, #119	; 0x77
 800138a:	0060      	lsls	r0, r4, #1
 800138c:	e795      	b.n	80012ba <_free_r+0xb2>
 800138e:	f240 5054 	movw	r0, #1364	; 0x554
 8001392:	4283      	cmp	r3, r0
 8001394:	d804      	bhi.n	80013a0 <_free_r+0x198>
 8001396:	0c93      	lsrs	r3, r2, #18
 8001398:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 800139c:	0060      	lsls	r0, r4, #1
 800139e:	e78c      	b.n	80012ba <_free_r+0xb2>
 80013a0:	20fc      	movs	r0, #252	; 0xfc
 80013a2:	247e      	movs	r4, #126	; 0x7e
 80013a4:	e789      	b.n	80012ba <_free_r+0xb2>
 80013a6:	bf00      	nop
 80013a8:	20000434 	.word	0x20000434
 80013ac:	2000043c 	.word	0x2000043c
 80013b0:	2000083c 	.word	0x2000083c
 80013b4:	2000090c 	.word	0x2000090c

080013b8 <__register_exitproc>:
 80013b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80013bc:	4c25      	ldr	r4, [pc, #148]	; (8001454 <__register_exitproc+0x9c>)
 80013be:	6825      	ldr	r5, [r4, #0]
 80013c0:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 80013c4:	4606      	mov	r6, r0
 80013c6:	4688      	mov	r8, r1
 80013c8:	4692      	mov	sl, r2
 80013ca:	4699      	mov	r9, r3
 80013cc:	b3cc      	cbz	r4, 8001442 <__register_exitproc+0x8a>
 80013ce:	6860      	ldr	r0, [r4, #4]
 80013d0:	281f      	cmp	r0, #31
 80013d2:	dc18      	bgt.n	8001406 <__register_exitproc+0x4e>
 80013d4:	1c43      	adds	r3, r0, #1
 80013d6:	b17e      	cbz	r6, 80013f8 <__register_exitproc+0x40>
 80013d8:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80013dc:	2101      	movs	r1, #1
 80013de:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 80013e2:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
 80013e6:	fa01 f200 	lsl.w	r2, r1, r0
 80013ea:	4317      	orrs	r7, r2
 80013ec:	2e02      	cmp	r6, #2
 80013ee:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 80013f2:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 80013f6:	d01e      	beq.n	8001436 <__register_exitproc+0x7e>
 80013f8:	3002      	adds	r0, #2
 80013fa:	6063      	str	r3, [r4, #4]
 80013fc:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 8001400:	2000      	movs	r0, #0
 8001402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001406:	4b14      	ldr	r3, [pc, #80]	; (8001458 <__register_exitproc+0xa0>)
 8001408:	b303      	cbz	r3, 800144c <__register_exitproc+0x94>
 800140a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800140e:	f7ff fbf1 	bl	8000bf4 <malloc>
 8001412:	4604      	mov	r4, r0
 8001414:	b1d0      	cbz	r0, 800144c <__register_exitproc+0x94>
 8001416:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800141a:	2700      	movs	r7, #0
 800141c:	e880 0088 	stmia.w	r0, {r3, r7}
 8001420:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8001424:	4638      	mov	r0, r7
 8001426:	2301      	movs	r3, #1
 8001428:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 800142c:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 8001430:	2e00      	cmp	r6, #0
 8001432:	d0e1      	beq.n	80013f8 <__register_exitproc+0x40>
 8001434:	e7d0      	b.n	80013d8 <__register_exitproc+0x20>
 8001436:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 800143a:	430a      	orrs	r2, r1
 800143c:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 8001440:	e7da      	b.n	80013f8 <__register_exitproc+0x40>
 8001442:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 8001446:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 800144a:	e7c0      	b.n	80013ce <__register_exitproc+0x16>
 800144c:	f04f 30ff 	mov.w	r0, #4294967295
 8001450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001454:	08001514 	.word	0x08001514
 8001458:	08000bf5 	.word	0x08000bf5
 800145c:	2a2a2a0a 	.word	0x2a2a2a0a
 8001460:	73657220 	.word	0x73657220
 8001464:	2a207465 	.word	0x2a207465
 8001468:	1b0a2a2a 	.word	0x1b0a2a2a
 800146c:	333b315b 	.word	0x333b315b
 8001470:	54536d31 	.word	0x54536d31
 8001474:	4632334d 	.word	0x4632334d
 8001478:	49442d34 	.word	0x49442d34
 800147c:	1b4f4353 	.word	0x1b4f4353
 8001480:	206d305b 	.word	0x206d305b
 8001484:	74706d45 	.word	0x74706d45
 8001488:	72702079 	.word	0x72702079
 800148c:	63656a6f 	.word	0x63656a6f
 8001490:	00000a74 	.word	0x00000a74
 8001494:	73696854 	.word	0x73696854
 8001498:	20736920 	.word	0x20736920
 800149c:	6d726f6e 	.word	0x6d726f6e
 80014a0:	70206c61 	.word	0x70206c61
 80014a4:	746e6972 	.word	0x746e6972
 80014a8:	65742066 	.word	0x65742066
 80014ac:	0d217473 	.word	0x0d217473
 80014b0:	00000000 	.word	0x00000000
 80014b4:	636f6c43 	.word	0x636f6c43
 80014b8:	6e69206b 	.word	0x6e69206b
 80014bc:	203a6f66 	.word	0x203a6f66
 80014c0:	50415f46 	.word	0x50415f46
 80014c4:	3d203142 	.word	0x3d203142
 80014c8:	20642520 	.word	0x20642520
 80014cc:	202c7a48 	.word	0x202c7a48
 80014d0:	50415f46 	.word	0x50415f46
 80014d4:	3d203242 	.word	0x3d203242
 80014d8:	20642520 	.word	0x20642520
 80014dc:	000a7a48 	.word	0x000a7a48
 80014e0:	6c737957 	.word	0x6c737957
 80014e4:	206f6e61 	.word	0x206f6e61
 80014e8:	6b616e7a 	.word	0x6b616e7a
 80014ec:	22612220 	.word	0x22612220
 80014f0:	0000000a 	.word	0x0000000a
 80014f4:	2065696e 	.word	0x2065696e
 80014f8:	707a6f72 	.word	0x707a6f72
 80014fc:	616e7a6f 	.word	0x616e7a6f
 8001500:	7020656e 	.word	0x7020656e
 8001504:	63656c6f 	.word	0x63656c6f
 8001508:	65696e65 	.word	0x65696e65
 800150c:	0000000a 	.word	0x0000000a
 8001510:	00000043 	.word	0x00000043

08001514 <_global_impure_ptr>:
 8001514:	20000008                                ... 

08001518 <_init>:
 8001518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800151a:	bf00      	nop
 800151c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800151e:	bc08      	pop	{r3}
 8001520:	469e      	mov	lr, r3
 8001522:	4770      	bx	lr

08001524 <_fini>:
 8001524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001526:	bf00      	nop
 8001528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800152a:	bc08      	pop	{r3}
 800152c:	469e      	mov	lr, r3
 800152e:	4770      	bx	lr
