   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 2
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"stm32f4xx_usart.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.USART_DeInit,"ax",%progbits
  20              		.align	2
  21              		.global	USART_DeInit
  22              		.thumb
  23              		.thumb_func
  25              	USART_DeInit:
  26              	.LFB110:
  27              		.file 1 "libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c"
   1:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
   2:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ******************************************************************************
   3:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @file    stm32f4xx_usart.c
   4:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @author  MCD Application Team
   5:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @version V1.3.0
   6:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @date    08-November-2013
   7:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief   This file provides firmware functions to manage the following 
   8:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          functionalities of the Universal synchronous asynchronous receiver
   9:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          transmitter (USART):           
  10:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           + Initialization and Configuration
  11:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           + Data transfers
  12:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           + Multi-Processor Communication
  13:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           + LIN mode
  14:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           + Half-duplex mode
  15:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           + Smartcard mode
  16:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           + IrDA mode
  17:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           + DMA transfers management
  18:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           + Interrupts and flags management 
  19:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *           
  20:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   @verbatim       
  21:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
  22:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                         ##### How to use this driver #####
  23:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
  24:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
  25:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Enable peripheral clock using the following functions
  26:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           RCC_APB2PeriphClockCmd(RCC_APB2Periph_USARTx, ENABLE) for USART1 and USART6 
  27:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           RCC_APB1PeriphClockCmd(RCC_APB1Periph_USARTx, ENABLE) for USART2, USART3, 
  28:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           UART4 or UART5.
  29:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
  30:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) According to the USART mode, enable the GPIO clocks using 
  31:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           RCC_AHB1PeriphClockCmd() function. (The I/O can be TX, RX, CTS, 
  32:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           or/and SCLK). 
  33:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
  34:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Peripheral's alternate function: 
  35:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Connect the pin to the desired peripherals' Alternate 
  36:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****             Function (AF) using GPIO_PinAFConfig() function
  37:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Configure the desired pin in alternate function by:
  38:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****             GPIO_InitStruct->GPIO_Mode = GPIO_Mode_AF
  39:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Select the type, pull-up/pull-down and output speed via 
  40:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****             GPIO_PuPd, GPIO_OType and GPIO_Speed members
  41:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Call GPIO_Init() function
  42:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           
  43:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Program the Baud Rate, Word Length , Stop Bit, Parity, Hardware 
  44:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           flow control and Mode(Receiver/Transmitter) using the USART_Init()
  45:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           function.
  46:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
  47:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) For synchronous mode, enable the clock and program the polarity,
  48:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           phase and last bit using the USART_ClockInit() function.
  49:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
  50:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Enable the NVIC and the corresponding interrupt using the function 
  51:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****          USART_ITConfig() if you need to use interrupt mode. 
  52:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
  53:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) When using the DMA mode 
  54:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Configure the DMA using DMA_Init() function
  55:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Active the needed channel Request using USART_DMACmd() function
  56:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    
  57:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Enable the USART using the USART_Cmd() function.
  58:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    
  59:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Enable the DMA using the DMA_Cmd() function, when using DMA mode. 
  60:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
  61:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       -@- Refer to Multi-Processor, LIN, half-duplex, Smartcard, IrDA sub-sections
  62:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           for more details
  63:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
  64:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]        
  65:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     In order to reach higher communication baudrates, it is possible to
  66:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     enable the oversampling by 8 mode using the function USART_OverSampling8Cmd().
  67:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     This function should be called after enabling the USART clock (RCC_APBxPeriphClockCmd())
  68:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     and before calling the function USART_Init().
  69:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****             
  70:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     @endverbatim        
  71:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ******************************************************************************
  72:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @attention
  73:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  74:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
  75:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  76:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  77:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * You may not use this file except in compliance with the License.
  78:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * You may obtain a copy of the License at:
  79:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  80:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  81:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  82:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * Unless required by applicable law or agreed to in writing, software 
  83:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  84:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  85:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * See the License for the specific language governing permissions and
  86:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * limitations under the License.
  87:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
  88:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ******************************************************************************  
  89:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */ 
  90:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  91:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Includes ------------------------------------------------------------------*/
  92:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #include "stm32f4xx_usart.h"
  93:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #include "stm32f4xx_rcc.h"
  94:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  95:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  96:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
  97:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
  98:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
  99:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART 
 100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief USART driver modules
 101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private typedef -----------------------------------------------------------*/
 105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private define ------------------------------------------------------------*/
 106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART CR1 register clear Mask ((~(uint16_t)0xE9F3)) */
 108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define CR1_CLEAR_MASK            ((uint16_t)(USART_CR1_M | USART_CR1_PCE | \
 109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                               USART_CR1_PS | USART_CR1_TE | \
 110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                               USART_CR1_RE))
 111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART CR2 register clock bits clear Mask ((~(uint16_t)0xF0FF)) */
 113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define CR2_CLOCK_CLEAR_MASK      ((uint16_t)(USART_CR2_CLKEN | USART_CR2_CPOL | \
 114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                                               USART_CR2_CPHA | USART_CR2_LBCL))
 115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART CR3 register clear Mask ((~(uint16_t)0xFCFF)) */
 117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define CR3_CLEAR_MASK            ((uint16_t)(USART_CR3_RTSE | USART_CR3_CTSE))
 118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*!< USART Interrupts mask */
 120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** #define IT_MASK                   ((uint16_t)0x001F)
 121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private macro -------------------------------------------------------------*/
 123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private variables ---------------------------------------------------------*/
 124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private function prototypes -----------------------------------------------*/
 125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /* Private functions ---------------------------------------------------------*/
 126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Private_Functions
 128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group1 Initialization and Configuration functions
 132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Initialization and Configuration functions 
 133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****             ##### Initialization and Configuration functions #####
 137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to initialize the USART 
 140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     in asynchronous and in synchronous modes.
 141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (+) For the asynchronous mode only these parameters can be configured: 
 142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Baud Rate
 143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Word Length 
 144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Stop Bit
 145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Parity: If the parity is enabled, then the MSB bit of the data written
 146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****              in the data register is transmitted but is changed by the parity bit.
 147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****              Depending on the frame length defined by the M bit (8-bits or 9-bits),
 148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****              the possible USART frame formats are as listed in the following table:
 149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    +-------------------------------------------------------------+     
 150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |   M bit |  PCE bit  |            USART frame                |
 151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------------------|---------------------------------------|             
 152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    0    |    0      |    | SB | 8 bit data | STB |          |
 153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    1    |    0      |    | SB | 9 bit data | STB |          |
 157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |---------|-----------|---------------------------------------|  
 158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****    +-------------------------------------------------------------+            
 160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Hardware flow control
 161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Receiver/transmitter modes
 162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     The USART_Init() function follows the USART  asynchronous configuration 
 165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     procedure (details for the procedure are available in reference manual (RM0090)).
 166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      (+) For the synchronous mode in addition to the asynchronous mode parameters these 
 168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****          parameters should be also configured:
 169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) USART Clock Enabled
 170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) USART polarity
 171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) USART phase
 172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) USART LastBit
 173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     These parameters can be configured using the USART_ClockInit() function.
 176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Deinitializes the USARTx peripheral registers to their default reset values.
 183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_DeInit(USART_TypeDef* USARTx)
 188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
  28              		.loc 1 188 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              	.LVL0:
  33 0000 08B5     		push	{r3, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 3, -8
  37              		.cfi_offset 14, -4
 189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USARTx == USART1)
  38              		.loc 1 192 0
  39 0002 3A4B     		ldr	r3, .L20
  40 0004 9842     		cmp	r0, r3
  41 0006 21D0     		beq	.L12
 193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == USART2)
  42              		.loc 1 197 0
  43 0008 394B     		ldr	r3, .L20+4
  44 000a 9842     		cmp	r0, r3
  45 000c 28D0     		beq	.L13
 198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == USART3)
  46              		.loc 1 202 0
  47 000e 394B     		ldr	r3, .L20+8
  48 0010 9842     		cmp	r0, r3
  49 0012 31D0     		beq	.L14
 203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }    
 207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == UART4)
  50              		.loc 1 207 0
  51 0014 384B     		ldr	r3, .L20+12
  52 0016 9842     		cmp	r0, r3
  53 0018 3AD0     		beq	.L15
 208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == UART5)
  54              		.loc 1 212 0
  55 001a 384B     		ldr	r3, .L20+16
  56 001c 9842     		cmp	r0, r3
  57 001e 43D0     		beq	.L16
 213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }  
 217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == USART6)
  58              		.loc 1 217 0
  59 0020 374B     		ldr	r3, .L20+20
  60 0022 9842     		cmp	r0, r3
  61 0024 4CD0     		beq	.L17
 218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (USARTx == UART7)
  62              		.loc 1 222 0
  63 0026 374B     		ldr	r3, .L20+24
  64 0028 9842     		cmp	r0, r3
  65 002a 53D0     		beq	.L18
 223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, ENABLE);
 225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }     
 227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     if (USARTx == UART8)
  66              		.loc 1 229 0
  67 002c 364B     		ldr	r3, .L20+28
  68 002e 9842     		cmp	r0, r3
  69 0030 00D0     		beq	.L19
  70 0032 08BD     		pop	{r3, pc}
  71              	.L19:
 230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     { 
 231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, ENABLE);
  72              		.loc 1 231 0
  73 0034 4FF00040 		mov	r0, #-2147483648
  74              	.LVL1:
  75 0038 0121     		movs	r1, #1
  76 003a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  77              	.LVL2:
 232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
  78              		.loc 1 232 0
  79 003e 4FF00040 		mov	r0, #-2147483648
  80 0042 0021     		movs	r1, #0
 233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     }
 234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
  81              		.loc 1 235 0
  82 0044 BDE80840 		pop	{r3, lr}
  83              	.LCFI1:
  84              		.cfi_remember_state
  85              		.cfi_restore 14
  86              		.cfi_restore 3
  87              		.cfi_def_cfa_offset 0
 232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART8, DISABLE);
  88              		.loc 1 232 0
  89 0048 FFF7FEBF 		b	RCC_APB1PeriphResetCmd
  90              	.LVL3:
  91              	.L12:
  92              	.LCFI2:
  93              		.cfi_restore_state
 194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  94              		.loc 1 194 0
  95 004c 1020     		movs	r0, #16
  96              	.LVL4:
  97 004e 0121     		movs	r1, #1
  98 0050 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  99              	.LVL5:
 195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 100              		.loc 1 195 0
 101 0054 1020     		movs	r0, #16
 102 0056 0021     		movs	r1, #0
 103              		.loc 1 235 0
 104 0058 BDE80840 		pop	{r3, lr}
 105              	.LCFI3:
 106              		.cfi_remember_state
 107              		.cfi_restore 14
 108              		.cfi_restore 3
 109              		.cfi_def_cfa_offset 0
 195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 110              		.loc 1 195 0
 111 005c FFF7FEBF 		b	RCC_APB2PeriphResetCmd
 112              	.LVL6:
 113              	.L13:
 114              	.LCFI4:
 115              		.cfi_restore_state
 199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 116              		.loc 1 199 0
 117 0060 4FF40030 		mov	r0, #131072
 118              	.LVL7:
 119 0064 0121     		movs	r1, #1
 120 0066 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 121              	.LVL8:
 200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 122              		.loc 1 200 0
 123 006a 4FF40030 		mov	r0, #131072
 124 006e 0021     		movs	r1, #0
 125              		.loc 1 235 0
 126 0070 BDE80840 		pop	{r3, lr}
 127              	.LCFI5:
 128              		.cfi_remember_state
 129              		.cfi_restore 14
 130              		.cfi_restore 3
 131              		.cfi_def_cfa_offset 0
 200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 132              		.loc 1 200 0
 133 0074 FFF7FEBF 		b	RCC_APB1PeriphResetCmd
 134              	.LVL9:
 135              	.L14:
 136              	.LCFI6:
 137              		.cfi_restore_state
 204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 138              		.loc 1 204 0
 139 0078 4FF48020 		mov	r0, #262144
 140              	.LVL10:
 141 007c 0121     		movs	r1, #1
 142 007e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 143              	.LVL11:
 205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }    
 144              		.loc 1 205 0
 145 0082 4FF48020 		mov	r0, #262144
 146 0086 0021     		movs	r1, #0
 147              		.loc 1 235 0
 148 0088 BDE80840 		pop	{r3, lr}
 149              	.LCFI7:
 150              		.cfi_remember_state
 151              		.cfi_restore 14
 152              		.cfi_restore 3
 153              		.cfi_def_cfa_offset 0
 205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }    
 154              		.loc 1 205 0
 155 008c FFF7FEBF 		b	RCC_APB1PeriphResetCmd
 156              	.LVL12:
 157              	.L15:
 158              	.LCFI8:
 159              		.cfi_restore_state
 209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 160              		.loc 1 209 0
 161 0090 4FF40020 		mov	r0, #524288
 162              	.LVL13:
 163 0094 0121     		movs	r1, #1
 164 0096 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 165              	.LVL14:
 210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 166              		.loc 1 210 0
 167 009a 4FF40020 		mov	r0, #524288
 168 009e 0021     		movs	r1, #0
 169              		.loc 1 235 0
 170 00a0 BDE80840 		pop	{r3, lr}
 171              	.LCFI9:
 172              		.cfi_remember_state
 173              		.cfi_restore 14
 174              		.cfi_restore 3
 175              		.cfi_def_cfa_offset 0
 210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 176              		.loc 1 210 0
 177 00a4 FFF7FEBF 		b	RCC_APB1PeriphResetCmd
 178              	.LVL15:
 179              	.L16:
 180              	.LCFI10:
 181              		.cfi_restore_state
 214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 182              		.loc 1 214 0
 183 00a8 4FF48010 		mov	r0, #1048576
 184              	.LVL16:
 185 00ac 0121     		movs	r1, #1
 186 00ae FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 187              	.LVL17:
 215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }  
 188              		.loc 1 215 0
 189 00b2 4FF48010 		mov	r0, #1048576
 190 00b6 0021     		movs	r1, #0
 191              		.loc 1 235 0
 192 00b8 BDE80840 		pop	{r3, lr}
 193              	.LCFI11:
 194              		.cfi_remember_state
 195              		.cfi_restore 14
 196              		.cfi_restore 3
 197              		.cfi_def_cfa_offset 0
 215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }  
 198              		.loc 1 215 0
 199 00bc FFF7FEBF 		b	RCC_APB1PeriphResetCmd
 200              	.LVL18:
 201              	.L17:
 202              	.LCFI12:
 203              		.cfi_restore_state
 219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 204              		.loc 1 219 0
 205 00c0 2020     		movs	r0, #32
 206              	.LVL19:
 207 00c2 0121     		movs	r1, #1
 208 00c4 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 209              	.LVL20:
 220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 210              		.loc 1 220 0
 211 00c8 2020     		movs	r0, #32
 212 00ca 0021     		movs	r1, #0
 213              		.loc 1 235 0
 214 00cc BDE80840 		pop	{r3, lr}
 215              	.LCFI13:
 216              		.cfi_remember_state
 217              		.cfi_restore 14
 218              		.cfi_restore 3
 219              		.cfi_def_cfa_offset 0
 220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 220              		.loc 1 220 0
 221 00d0 FFF7FEBF 		b	RCC_APB2PeriphResetCmd
 222              	.LVL21:
 223              	.L18:
 224              	.LCFI14:
 225              		.cfi_restore_state
 224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART7, DISABLE);
 226              		.loc 1 224 0
 227 00d4 4FF08040 		mov	r0, #1073741824
 228              	.LVL22:
 229 00d8 0121     		movs	r1, #1
 230 00da FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 231              	.LVL23:
 225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }     
 232              		.loc 1 225 0
 233 00de 4FF08040 		mov	r0, #1073741824
 234 00e2 0021     		movs	r1, #0
 235              		.loc 1 235 0
 236 00e4 BDE80840 		pop	{r3, lr}
 237              	.LCFI15:
 238              		.cfi_restore 14
 239              		.cfi_restore 3
 240              		.cfi_def_cfa_offset 0
 225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }     
 241              		.loc 1 225 0
 242 00e8 FFF7FEBF 		b	RCC_APB1PeriphResetCmd
 243              	.LVL24:
 244              	.L21:
 245              		.align	2
 246              	.L20:
 247 00ec 00100140 		.word	1073811456
 248 00f0 00440040 		.word	1073759232
 249 00f4 00480040 		.word	1073760256
 250 00f8 004C0040 		.word	1073761280
 251 00fc 00500040 		.word	1073762304
 252 0100 00140140 		.word	1073812480
 253 0104 00780040 		.word	1073772544
 254 0108 007C0040 		.word	1073773568
 255              		.cfi_endproc
 256              	.LFE110:
 258              		.section	.text.USART_Init,"ax",%progbits
 259              		.align	2
 260              		.global	USART_Init
 261              		.thumb
 262              		.thumb_func
 264              	USART_Init:
 265              	.LFB111:
 236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Initializes the USARTx peripheral according to the specified
 239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         parameters in the USART_InitStruct .
 240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
 243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         the configuration information for the specified USART peripheral.
 244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
 247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 266              		.loc 1 247 0
 267              		.cfi_startproc
 268              		@ args = 0, pretend = 0, frame = 16
 269              		@ frame_needed = 0, uses_anonymous_args = 0
 270              	.LVL25:
 248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t tmpreg = 0x00, apbclock = 0x00;
 249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t integerdivider = 0x00;
 250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t fractionaldivider = 0x00;
 251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   RCC_ClocksTypeDef RCC_ClocksStatus;
 252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
 256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
 257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
 258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
 259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
 260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
 261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
 263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
 266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR2;
 271              		.loc 1 269 0
 272 0000 028A     		ldrh	r2, [r0, #16]
 270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear STOP[13:12] bits */
 272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
 275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       Set STOP[13:12] bits according to USART_StopBits value */
 276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR2 */
 279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 = (uint16_t)tmpreg;
 280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR1 Configuration -----------------------*/
 282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR1;
 283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear M, PCE, PS, TE and RE bits */
 285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Word Length, Parity and mode: 
 288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      Set the M bits according to USART_WordLength value 
 289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      Set PCE and PS bits according to USART_Parity value
 290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****      Set TE and RE bits according to USART_Mode value */
 291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 273              		.loc 1 291 0
 274 0002 8B88     		ldrh	r3, [r1, #4]
 247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t tmpreg = 0x00, apbclock = 0x00;
 275              		.loc 1 247 0
 276 0004 F0B5     		push	{r4, r5, r6, r7, lr}
 277              	.LCFI16:
 278              		.cfi_def_cfa_offset 20
 279              		.cfi_offset 4, -20
 280              		.cfi_offset 5, -16
 281              		.cfi_offset 6, -12
 282              		.cfi_offset 7, -8
 283              		.cfi_offset 14, -4
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 284              		.loc 1 269 0
 285 0006 92B2     		uxth	r2, r2
 286              	.LVL26:
 276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 287              		.loc 1 276 0
 288 0008 CE88     		ldrh	r6, [r1, #6]
 289              		.loc 1 291 0
 290 000a 0F89     		ldrh	r7, [r1, #8]
 247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t tmpreg = 0x00, apbclock = 0x00;
 291              		.loc 1 247 0
 292 000c 0446     		mov	r4, r0
 293 000e 0D46     		mov	r5, r1
 272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 294              		.loc 1 272 0
 295 0010 22F44052 		bic	r2, r2, #12288
 296              	.LVL27:
 279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 297              		.loc 1 279 0
 298 0014 3243     		orrs	r2, r2, r6
 299              	.LVL28:
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****             USART_InitStruct->USART_Mode;
 293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR1 */
 295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 = (uint16_t)tmpreg;
 296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR3 Configuration -----------------------*/  
 298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR3;
 299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear CTSE and RTSE bits */
 301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART HFC : 
 304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
 305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 300              		.loc 1 305 0
 301 0016 A889     		ldrh	r0, [r5, #12]
 302              	.LVL29:
 291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****             USART_InitStruct->USART_Mode;
 303              		.loc 1 291 0
 304 0018 4989     		ldrh	r1, [r1, #10]
 305              	.LVL30:
 279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 306              		.loc 1 279 0
 307 001a 2282     		strh	r2, [r4, #16]	@ movhi
 282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 308              		.loc 1 282 0
 309 001c A289     		ldrh	r2, [r4, #12]
 310              	.LVL31:
 291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****             USART_InitStruct->USART_Mode;
 311              		.loc 1 291 0
 312 001e 3B43     		orrs	r3, r3, r7
 282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 313              		.loc 1 282 0
 314 0020 92B2     		uxth	r2, r2
 315              	.LVL32:
 291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****             USART_InitStruct->USART_Mode;
 316              		.loc 1 291 0
 317 0022 0B43     		orrs	r3, r3, r1
 285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 318              		.loc 1 285 0
 319 0024 22F4B052 		bic	r2, r2, #5632
 320              	.LVL33:
 321 0028 22F00C02 		bic	r2, r2, #12
 322              	.LVL34:
 291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****             USART_InitStruct->USART_Mode;
 323              		.loc 1 291 0
 324 002c 9BB2     		uxth	r3, r3
 295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 325              		.loc 1 295 0
 326 002e 1343     		orrs	r3, r3, r2
 327 0030 A381     		strh	r3, [r4, #12]	@ movhi
 328              	.LVL35:
 298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 329              		.loc 1 298 0
 330 0032 A38A     		ldrh	r3, [r4, #20]
 331 0034 9BB2     		uxth	r3, r3
 332              	.LVL36:
 301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 333              		.loc 1 301 0
 334 0036 23F44073 		bic	r3, r3, #768
 335              	.LVL37:
 306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR3 */
 308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR3 = (uint16_t)tmpreg;
 336              		.loc 1 308 0
 337 003a 0343     		orrs	r3, r3, r0
 338              	.LVL38:
 247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t tmpreg = 0x00, apbclock = 0x00;
 339              		.loc 1 247 0
 340 003c 85B0     		sub	sp, sp, #20
 341              	.LCFI17:
 342              		.cfi_def_cfa_offset 40
 343              		.loc 1 308 0
 344 003e A382     		strh	r3, [r4, #20]	@ movhi
 309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART BRR Configuration -----------------------*/
 311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Baud Rate */
 312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   RCC_GetClocksFreq(&RCC_ClocksStatus);
 345              		.loc 1 312 0
 346 0040 6846     		mov	r0, sp
 347 0042 FFF7FEFF 		bl	RCC_GetClocksFreq
 348              	.LVL39:
 313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx == USART1) || (USARTx == USART6))
 349              		.loc 1 314 0
 350 0046 1D4B     		ldr	r3, .L32
 351 0048 9C42     		cmp	r4, r3
 352 004a 29D0     		beq	.L23
 353              		.loc 1 314 0 is_stmt 0 discriminator 1
 354 004c 03F58063 		add	r3, r3, #1024
 355 0050 9C42     		cmp	r4, r3
 356 0052 25D0     		beq	.L23
 315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 357              		.loc 1 320 0 is_stmt 1
 358 0054 029A     		ldr	r2, [sp, #8]
 359              	.LVL40:
 360              	.L25:
 321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Determine the integer part */
 324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 361              		.loc 1 324 0
 362 0056 A389     		ldrh	r3, [r4, #12]
 325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Integer part computing in case Oversampling mode is 8 Samples */
 327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
 330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Integer part computing in case Oversampling mode is 16 Samples */
 332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = (integerdivider / 100) << 4;
 335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Determine the fractional part */
 337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Implement the fractional part in the register */
 340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 363              		.loc 1 340 0
 364 0058 A689     		ldrh	r6, [r4, #12]
 324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 365              		.loc 1 324 0
 366 005a 1BB2     		sxth	r3, r3
 367 005c 002B     		cmp	r3, #0
 327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 368              		.loc 1 327 0
 369 005e 2B68     		ldr	r3, [r5]
 370 0060 02EB8202 		add	r2, r2, r2, lsl #2
 371              	.LVL41:
 372 0064 B4BF     		ite	lt
 373 0066 5B00     		lsllt	r3, r3, #1
 332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 374              		.loc 1 332 0
 375 0068 9B00     		lslge	r3, r3, #2
 376 006a 02EB8202 		add	r2, r2, r2, lsl #2
 377 006e B2FBF3F0 		udiv	r0, r2, r3
 378              	.LVL42:
 334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 379              		.loc 1 334 0
 380 0072 134A     		ldr	r2, .L32+4
 381              		.loc 1 340 0
 382 0074 36B2     		sxth	r6, r6
 334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 383              		.loc 1 334 0
 384 0076 A2FB0035 		umull	r3, r5, r2, r0
 385              	.LVL43:
 386 007a 6D09     		lsrs	r5, r5, #5
 387              	.LVL44:
 337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 388              		.loc 1 337 0
 389 007c 6423     		movs	r3, #100
 390              		.loc 1 340 0
 391 007e 002E     		cmp	r6, #0
 337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 392              		.loc 1 337 0
 393 0080 05FB1303 		mls	r3, r5, r3, r0
 394              	.LVL45:
 395 0084 4FEA0515 		lsl	r5, r5, #4
 396              	.LVL46:
 397              		.loc 1 340 0
 398 0088 0CDB     		blt	.L31
 341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
 345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 399              		.loc 1 346 0
 400 008a 1B01     		lsls	r3, r3, #4
 401              	.LVL47:
 402 008c 3233     		adds	r3, r3, #50
 403 008e A2FB0323 		umull	r2, r3, r2, r3
 404              	.LVL48:
 405 0092 C3F34313 		ubfx	r3, r3, #5, #4
 406 0096 2B43     		orrs	r3, r3, r5
 407              	.LVL49:
 347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART BRR register */
 350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->BRR = (uint16_t)tmpreg;
 408              		.loc 1 350 0
 409 0098 9BB2     		uxth	r3, r3
 410              	.LVL50:
 411 009a 2381     		strh	r3, [r4, #8]	@ movhi
 351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 412              		.loc 1 351 0
 413 009c 05B0     		add	sp, sp, #20
 414              	.LCFI18:
 415              		.cfi_remember_state
 416              		.cfi_def_cfa_offset 20
 417              		@ sp needed
 418 009e F0BD     		pop	{r4, r5, r6, r7, pc}
 419              	.LVL51:
 420              	.L23:
 421              	.LCFI19:
 422              		.cfi_restore_state
 316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 423              		.loc 1 316 0
 424 00a0 039A     		ldr	r2, [sp, #12]
 425              	.LVL52:
 426 00a2 D8E7     		b	.L25
 427              	.LVL53:
 428              	.L31:
 342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 429              		.loc 1 342 0
 430 00a4 D900     		lsls	r1, r3, #3
 431 00a6 3231     		adds	r1, r1, #50
 432 00a8 A2FB0131 		umull	r3, r1, r2, r1
 433              	.LVL54:
 434 00ac C1F34212 		ubfx	r2, r1, #5, #3
 435              	.LVL55:
 436 00b0 42EA0503 		orr	r3, r2, r5
 437              	.LVL56:
 350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 438              		.loc 1 350 0
 439 00b4 9BB2     		uxth	r3, r3
 440              	.LVL57:
 441 00b6 2381     		strh	r3, [r4, #8]	@ movhi
 442              		.loc 1 351 0
 443 00b8 05B0     		add	sp, sp, #20
 444              	.LCFI20:
 445              		.cfi_def_cfa_offset 20
 446              		@ sp needed
 447 00ba F0BD     		pop	{r4, r5, r6, r7, pc}
 448              	.LVL58:
 449              	.L33:
 450              		.align	2
 451              	.L32:
 452 00bc 00100140 		.word	1073811456
 453 00c0 1F85EB51 		.word	1374389535
 454              		.cfi_endproc
 455              	.LFE111:
 457              		.section	.text.USART_StructInit,"ax",%progbits
 458              		.align	2
 459              		.global	USART_StructInit
 460              		.thumb
 461              		.thumb_func
 463              	USART_StructInit:
 464              	.LFB112:
 352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Fills each USART_InitStruct member with its default value.
 355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
 356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         be initialized.
 357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
 360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 465              		.loc 1 360 0
 466              		.cfi_startproc
 467              		@ args = 0, pretend = 0, frame = 0
 468              		@ frame_needed = 0, uses_anonymous_args = 0
 469              		@ link register save eliminated.
 470              	.LVL59:
 361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* USART_InitStruct members default value */
 362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_BaudRate = 9600;
 363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 471              		.loc 1 363 0
 472 0000 0023     		movs	r3, #0
 362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 473              		.loc 1 362 0
 474 0002 4FF41651 		mov	r1, #9600
 364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_StopBits = USART_StopBits_1;
 365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_Parity = USART_Parity_No ;
 366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 475              		.loc 1 366 0
 476 0006 0C22     		movs	r2, #12
 362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 477              		.loc 1 362 0
 478 0008 0160     		str	r1, [r0]
 479              		.loc 1 366 0
 480 000a 4281     		strh	r2, [r0, #10]	@ movhi
 363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_StopBits = USART_StopBits_1;
 481              		.loc 1 363 0
 482 000c 8380     		strh	r3, [r0, #4]	@ movhi
 364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_StopBits = USART_StopBits_1;
 483              		.loc 1 364 0
 484 000e C380     		strh	r3, [r0, #6]	@ movhi
 365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 485              		.loc 1 365 0
 486 0010 0381     		strh	r3, [r0, #8]	@ movhi
 367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 487              		.loc 1 367 0
 488 0012 8381     		strh	r3, [r0, #12]	@ movhi
 489 0014 7047     		bx	lr
 490              		.cfi_endproc
 491              	.LFE112:
 493 0016 00BF     		.section	.text.USART_ClockInit,"ax",%progbits
 494              		.align	2
 495              		.global	USART_ClockInit
 496              		.thumb
 497              		.thumb_func
 499              	USART_ClockInit:
 500              	.LFB113:
 368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Initializes the USARTx peripheral Clock according to the 
 372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         specified parameters in the USART_ClockInitStruct .
 373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART peripheral.
 374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure that
 375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         contains the configuration information for the specified  USART peripheral.
 376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
 377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
 380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 501              		.loc 1 380 0
 502              		.cfi_startproc
 503              		@ args = 0, pretend = 0, frame = 0
 504              		@ frame_needed = 0, uses_anonymous_args = 0
 505              		@ link register save eliminated.
 506              	.LVL60:
 507 0000 30B4     		push	{r4, r5}
 508              	.LCFI21:
 509              		.cfi_def_cfa_offset 8
 510              		.cfi_offset 4, -8
 511              		.cfi_offset 5, -4
 381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t tmpreg = 0x00;
 382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
 385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
 386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
 387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
 388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg = USARTx->CR2;
 391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear CLKEN, CPOL, CPHA and LBCL bits */
 392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
 394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set CLKEN bit according to USART_Clock value */
 395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set CPOL bit according to USART_CPOL value */
 396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set CPHA bit according to USART_CPHA value */
 397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set LBCL bit according to USART_LastBit value */
 398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                  USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 512              		.loc 1 399 0
 513 0002 0A88     		ldrh	r2, [r1]
 514 0004 4D88     		ldrh	r5, [r1, #2]
 515 0006 8C88     		ldrh	r4, [r1, #4]
 390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear CLKEN, CPOL, CPHA and LBCL bits */
 516              		.loc 1 390 0
 517 0008 038A     		ldrh	r3, [r0, #16]
 518              		.loc 1 399 0
 519 000a C988     		ldrh	r1, [r1, #6]
 520              	.LVL61:
 521 000c 2A43     		orrs	r2, r2, r5
 522 000e 2243     		orrs	r2, r2, r4
 523 0010 0A43     		orrs	r2, r2, r1
 390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear CLKEN, CPOL, CPHA and LBCL bits */
 524              		.loc 1 390 0
 525 0012 9BB2     		uxth	r3, r3
 526              	.LVL62:
 527              		.loc 1 399 0
 528 0014 92B2     		uxth	r2, r2
 392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
 529              		.loc 1 392 0
 530 0016 23F47063 		bic	r3, r3, #3840
 531              	.LVL63:
 400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Write to USART CR2 */
 401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 = (uint16_t)tmpreg;
 532              		.loc 1 401 0
 533 001a 1343     		orrs	r3, r3, r2
 534              	.LVL64:
 535 001c 0382     		strh	r3, [r0, #16]	@ movhi
 402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 536              		.loc 1 402 0
 537 001e 30BC     		pop	{r4, r5}
 538              	.LCFI22:
 539              		.cfi_restore 5
 540              		.cfi_restore 4
 541              		.cfi_def_cfa_offset 0
 542 0020 7047     		bx	lr
 543              		.cfi_endproc
 544              	.LFE113:
 546 0022 00BF     		.section	.text.USART_ClockStructInit,"ax",%progbits
 547              		.align	2
 548              		.global	USART_ClockStructInit
 549              		.thumb
 550              		.thumb_func
 552              	USART_ClockStructInit:
 553              	.LFB114:
 403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Fills each USART_ClockInitStruct member with its default value.
 406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
 407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         which will be initialized.
 408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
 411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 554              		.loc 1 411 0
 555              		.cfi_startproc
 556              		@ args = 0, pretend = 0, frame = 0
 557              		@ frame_needed = 0, uses_anonymous_args = 0
 558              		@ link register save eliminated.
 559              	.LVL65:
 412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* USART_ClockInitStruct members default value */
 413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 560              		.loc 1 413 0
 561 0000 0023     		movs	r3, #0
 562 0002 0380     		strh	r3, [r0]	@ movhi
 414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 563              		.loc 1 414 0
 564 0004 4380     		strh	r3, [r0, #2]	@ movhi
 415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 565              		.loc 1 415 0
 566 0006 8380     		strh	r3, [r0, #4]	@ movhi
 416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 567              		.loc 1 416 0
 568 0008 C380     		strh	r3, [r0, #6]	@ movhi
 569 000a 7047     		bx	lr
 570              		.cfi_endproc
 571              	.LFE114:
 573              		.section	.text.USART_Cmd,"ax",%progbits
 574              		.align	2
 575              		.global	USART_Cmd
 576              		.thumb
 577              		.thumb_func
 579              	USART_Cmd:
 580              	.LFB115:
 417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the specified USART peripheral.
 421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USARTx peripheral.
 424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 581              		.loc 1 428 0
 582              		.cfi_startproc
 583              		@ args = 0, pretend = 0, frame = 0
 584              		@ frame_needed = 0, uses_anonymous_args = 0
 585              		@ link register save eliminated.
 586              	.LVL66:
 429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the selected USART by setting the UE bit in the CR1 register */
 436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_UE;
 587              		.loc 1 436 0
 588 0000 8389     		ldrh	r3, [r0, #12]
 433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 589              		.loc 1 433 0
 590 0002 29B9     		cbnz	r1, .L41
 437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the selected USART by clearing the UE bit in the CR1 register */
 441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 591              		.loc 1 441 0
 592 0004 23F40053 		bic	r3, r3, #8192
 593 0008 1B04     		lsls	r3, r3, #16
 594 000a 1B0C     		lsrs	r3, r3, #16
 595 000c 8381     		strh	r3, [r0, #12]	@ movhi
 596 000e 7047     		bx	lr
 597              	.L41:
 436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 598              		.loc 1 436 0
 599 0010 9BB2     		uxth	r3, r3
 600 0012 43F40053 		orr	r3, r3, #8192
 601 0016 8381     		strh	r3, [r0, #12]	@ movhi
 602 0018 7047     		bx	lr
 603              		.cfi_endproc
 604              	.LFE115:
 606 001a 00BF     		.section	.text.USART_SetPrescaler,"ax",%progbits
 607              		.align	2
 608              		.global	USART_SetPrescaler
 609              		.thumb
 610              		.thumb_func
 612              	USART_SetPrescaler:
 613              	.LFB116:
 442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the system clock prescaler.
 447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_Prescaler: specifies the prescaler clock. 
 450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   The function is used for IrDA mode with UART4 and UART5.   
 451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
 454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** { 
 614              		.loc 1 454 0
 615              		.cfi_startproc
 616              		@ args = 0, pretend = 0, frame = 0
 617              		@ frame_needed = 0, uses_anonymous_args = 0
 618              		@ link register save eliminated.
 619              	.LVL67:
 455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear the USART prescaler */
 459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR &= USART_GTPR_GT;
 620              		.loc 1 459 0
 621 0000 038B     		ldrh	r3, [r0, #24]
 622 0002 03F47F43 		and	r3, r3, #65280
 623 0006 0383     		strh	r3, [r0, #24]	@ movhi
 460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set the USART prescaler */
 461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR |= USART_Prescaler;
 624              		.loc 1 461 0
 625 0008 038B     		ldrh	r3, [r0, #24]
 626 000a 9BB2     		uxth	r3, r3
 627 000c 1943     		orrs	r1, r1, r3
 628              	.LVL68:
 629 000e 0183     		strh	r1, [r0, #24]	@ movhi
 630 0010 7047     		bx	lr
 631              		.cfi_endproc
 632              	.LFE116:
 634 0012 00BF     		.section	.text.USART_OverSampling8Cmd,"ax",%progbits
 635              		.align	2
 636              		.global	USART_OverSampling8Cmd
 637              		.thumb
 638              		.thumb_func
 640              	USART_OverSampling8Cmd:
 641              	.LFB117:
 462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's 8x oversampling mode.
 466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   This function has to be called before calling USART_Init() function
 467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         in order to have correct baudrate Divider value.
 468:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 469:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 470:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART 8x oversampling mode.
 471:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 472:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 473:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 474:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 475:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 642              		.loc 1 475 0
 643              		.cfi_startproc
 644              		@ args = 0, pretend = 0, frame = 0
 645              		@ frame_needed = 0, uses_anonymous_args = 0
 646              		@ link register save eliminated.
 647              	.LVL69:
 476:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 477:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 478:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 479:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 481:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 482:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
 483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_OVER8;
 648              		.loc 1 483 0
 649 0000 8389     		ldrh	r3, [r0, #12]
 480:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 650              		.loc 1 480 0
 651 0002 19B9     		cbnz	r1, .L46
 484:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 485:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 486:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 487:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
 488:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 652              		.loc 1 488 0
 653 0004 C3F30E03 		ubfx	r3, r3, #0, #15
 654 0008 8381     		strh	r3, [r0, #12]	@ movhi
 655 000a 7047     		bx	lr
 656              	.L46:
 483:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 657              		.loc 1 483 0
 658 000c 6FEA4343 		mvn	r3, r3, lsl #17
 659 0010 6FEA5343 		mvn	r3, r3, lsr #17
 660 0014 9BB2     		uxth	r3, r3
 661 0016 8381     		strh	r3, [r0, #12]	@ movhi
 662 0018 7047     		bx	lr
 663              		.cfi_endproc
 664              	.LFE117:
 666 001a 00BF     		.section	.text.USART_OneBitMethodCmd,"ax",%progbits
 667              		.align	2
 668              		.global	USART_OneBitMethodCmd
 669              		.thumb
 670              		.thumb_func
 672              	USART_OneBitMethodCmd:
 673              	.LFB118:
 489:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 490:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }  
 491:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 492:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 493:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's one bit sampling method.
 494:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 495:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 496:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART one bit sampling method.
 497:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 498:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 499:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 500:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 501:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 674              		.loc 1 501 0
 675              		.cfi_startproc
 676              		@ args = 0, pretend = 0, frame = 0
 677              		@ frame_needed = 0, uses_anonymous_args = 0
 678              		@ link register save eliminated.
 679              	.LVL70:
 502:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 503:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 504:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 505:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 507:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 508:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
 509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_ONEBIT;
 680              		.loc 1 509 0
 681 0000 838A     		ldrh	r3, [r0, #20]
 506:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 682              		.loc 1 506 0
 683 0002 29B9     		cbnz	r1, .L50
 510:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 511:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 512:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 513:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
 514:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 684              		.loc 1 514 0
 685 0004 23F40063 		bic	r3, r3, #2048
 686 0008 1B04     		lsls	r3, r3, #16
 687 000a 1B0C     		lsrs	r3, r3, #16
 688 000c 8382     		strh	r3, [r0, #20]	@ movhi
 689 000e 7047     		bx	lr
 690              	.L50:
 509:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 691              		.loc 1 509 0
 692 0010 9BB2     		uxth	r3, r3
 693 0012 43F40063 		orr	r3, r3, #2048
 694 0016 8382     		strh	r3, [r0, #20]	@ movhi
 695 0018 7047     		bx	lr
 696              		.cfi_endproc
 697              	.LFE118:
 699 001a 00BF     		.section	.text.USART_SendData,"ax",%progbits
 700              		.align	2
 701              		.global	USART_SendData
 702              		.thumb
 703              		.thumb_func
 705              	USART_SendData:
 706              	.LFB119:
 515:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 516:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 517:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 518:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 519:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 520:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 521:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 522:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group2 Data transfers functions
 523:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Data transfers functions 
 524:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 525:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 526:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 527:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                       ##### Data transfers functions #####
 528:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 529:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 530:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to manage the USART data 
 531:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     transfers.
 532:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 533:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     During an USART reception, data shifts in least significant bit first through 
 534:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     the RX pin. In this mode, the USART_DR register consists of a buffer (RDR) 
 535:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     between the internal bus and the received shift register.
 536:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 537:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     When a transmission is taking place, a write instruction to the USART_DR register 
 538:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     stores the data in the TDR register and which is copied in the shift register 
 539:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     at the end of the current transmission.
 540:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 541:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     The read access of the USART_DR register can be done using the USART_ReceiveData()
 542:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     function and returns the RDR buffered value. Whereas a write access to the USART_DR 
 543:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     can be done using USART_SendData() function and stores the written data into 
 544:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     TDR buffer.
 545:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 546:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 547:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 548:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 549:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 550:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 551:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Transmits single data through the USARTx peripheral.
 552:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 553:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 554:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  Data: the data to transmit.
 555:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 556:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 557:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
 558:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 707              		.loc 1 558 0
 708              		.cfi_startproc
 709              		@ args = 0, pretend = 0, frame = 0
 710              		@ frame_needed = 0, uses_anonymous_args = 0
 711              		@ link register save eliminated.
 712              	.LVL71:
 559:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 560:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 561:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_DATA(Data)); 
 562:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
 563:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Transmit Data */
 564:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->DR = (Data & (uint16_t)0x01FF);
 713              		.loc 1 564 0
 714 0000 C1F30801 		ubfx	r1, r1, #0, #9
 715              	.LVL72:
 716 0004 8180     		strh	r1, [r0, #4]	@ movhi
 717 0006 7047     		bx	lr
 718              		.cfi_endproc
 719              	.LFE119:
 721              		.section	.text.USART_ReceiveData,"ax",%progbits
 722              		.align	2
 723              		.global	USART_ReceiveData
 724              		.thumb
 725              		.thumb_func
 727              	USART_ReceiveData:
 728              	.LFB120:
 565:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 566:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 567:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 568:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Returns the most recent received data by the USARTx peripheral.
 569:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 570:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 571:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval The received data.
 572:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 573:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
 574:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 729              		.loc 1 574 0
 730              		.cfi_startproc
 731              		@ args = 0, pretend = 0, frame = 0
 732              		@ frame_needed = 0, uses_anonymous_args = 0
 733              		@ link register save eliminated.
 734              	.LVL73:
 575:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 576:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 577:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 578:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Receive Data */
 579:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 735              		.loc 1 579 0
 736 0000 8088     		ldrh	r0, [r0, #4]
 737              	.LVL74:
 580:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 738              		.loc 1 580 0
 739 0002 C0F30800 		ubfx	r0, r0, #0, #9
 740 0006 7047     		bx	lr
 741              		.cfi_endproc
 742              	.LFE120:
 744              		.section	.text.USART_SetAddress,"ax",%progbits
 745              		.align	2
 746              		.global	USART_SetAddress
 747              		.thumb
 748              		.thumb_func
 750              	USART_SetAddress:
 751              	.LFB121:
 581:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 582:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 583:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 584:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 585:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 586:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group3 MultiProcessor Communication functions
 587:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Multi-Processor Communication functions 
 588:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 589:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 590:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 591:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****               ##### Multi-Processor Communication functions #####
 592:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 593:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 594:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to manage the USART 
 595:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     multiprocessor communication.
 596:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 597:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     For instance one of the USARTs can be the master, its TX output is connected 
 598:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     to the RX input of the other USART. The others are slaves, their respective 
 599:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     TX outputs are logically ANDed together and connected to the RX input of the 
 600:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     master.
 601:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 602:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USART multiprocessor communication is possible through the following procedure:
 603:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Program the Baud rate, Word length = 9 bits, Stop bits, Parity, Mode 
 604:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           transmitter or Mode receiver and hardware flow control values using 
 605:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           the USART_Init() function.
 606:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Configures the USART address using the USART_SetAddress() function.
 607:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Configures the wake up method (USART_WakeUp_IdleLine or USART_WakeUp_AddressMark)
 608:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           using USART_WakeUpConfig() function only for the slaves.
 609:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Enable the USART using the USART_Cmd() function.
 610:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Enter the USART slaves in mute mode using USART_ReceiverWakeUpCmd() function.
 611:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 612:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     The USART Slave exit from mute mode when receive the wake up condition.
 613:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 614:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 615:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 616:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 617:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 618:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 619:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the address of the USART node.
 620:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 621:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 622:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_Address: Indicates the address of the USART node.
 623:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 624:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 625:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
 626:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 752              		.loc 1 626 0
 753              		.cfi_startproc
 754              		@ args = 0, pretend = 0, frame = 0
 755              		@ frame_needed = 0, uses_anonymous_args = 0
 756              		@ link register save eliminated.
 757              	.LVL75:
 627:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 628:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 629:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ADDRESS(USART_Address)); 
 630:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
 631:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear the USART address */
 632:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 758              		.loc 1 632 0
 759 0000 038A     		ldrh	r3, [r0, #16]
 760 0002 23F00F03 		bic	r3, r3, #15
 761 0006 1B04     		lsls	r3, r3, #16
 762 0008 1B0C     		lsrs	r3, r3, #16
 763 000a 0382     		strh	r3, [r0, #16]	@ movhi
 633:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set the USART address node */
 634:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 |= USART_Address;
 764              		.loc 1 634 0
 765 000c 038A     		ldrh	r3, [r0, #16]
 766 000e 9BB2     		uxth	r3, r3
 767 0010 1943     		orrs	r1, r1, r3
 768              	.LVL76:
 769 0012 0182     		strh	r1, [r0, #16]	@ movhi
 770 0014 7047     		bx	lr
 771              		.cfi_endproc
 772              	.LFE121:
 774 0016 00BF     		.section	.text.USART_ReceiverWakeUpCmd,"ax",%progbits
 775              		.align	2
 776              		.global	USART_ReceiverWakeUpCmd
 777              		.thumb
 778              		.thumb_func
 780              	USART_ReceiverWakeUpCmd:
 781              	.LFB122:
 635:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 636:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 637:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 638:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Determines if the USART is in mute mode or not.
 639:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 640:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 641:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART mute mode.
 642:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 643:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 644:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 645:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 646:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 782              		.loc 1 646 0
 783              		.cfi_startproc
 784              		@ args = 0, pretend = 0, frame = 0
 785              		@ frame_needed = 0, uses_anonymous_args = 0
 786              		@ link register save eliminated.
 787              	.LVL77:
 647:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 648:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 649:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 650:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 652:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 653:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
 654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 |= USART_CR1_RWU;
 788              		.loc 1 654 0
 789 0000 8389     		ldrh	r3, [r0, #12]
 651:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 790              		.loc 1 651 0
 791 0002 29B9     		cbnz	r1, .L57
 655:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 656:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 657:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 658:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
 659:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 792              		.loc 1 659 0
 793 0004 23F00203 		bic	r3, r3, #2
 794 0008 1B04     		lsls	r3, r3, #16
 795 000a 1B0C     		lsrs	r3, r3, #16
 796 000c 8381     		strh	r3, [r0, #12]	@ movhi
 797 000e 7047     		bx	lr
 798              	.L57:
 654:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 799              		.loc 1 654 0
 800 0010 9BB2     		uxth	r3, r3
 801 0012 43F00203 		orr	r3, r3, #2
 802 0016 8381     		strh	r3, [r0, #12]	@ movhi
 803 0018 7047     		bx	lr
 804              		.cfi_endproc
 805              	.LFE122:
 807 001a 00BF     		.section	.text.USART_WakeUpConfig,"ax",%progbits
 808              		.align	2
 809              		.global	USART_WakeUpConfig
 810              		.thumb
 811              		.thumb_func
 813              	USART_WakeUpConfig:
 814              	.LFB123:
 660:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 661:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 662:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 663:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Selects the USART WakeUp method.
 664:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 665:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 666:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_WakeUp: specifies the USART wakeup method.
 667:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
 668:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
 669:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
 670:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 671:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 672:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
 673:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 815              		.loc 1 673 0
 816              		.cfi_startproc
 817              		@ args = 0, pretend = 0, frame = 0
 818              		@ frame_needed = 0, uses_anonymous_args = 0
 819              		@ link register save eliminated.
 820              	.LVL78:
 674:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 675:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 676:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_WAKEUP(USART_WakeUp));
 677:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 678:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 821              		.loc 1 678 0
 822 0000 8389     		ldrh	r3, [r0, #12]
 823 0002 23F40063 		bic	r3, r3, #2048
 824 0006 1B04     		lsls	r3, r3, #16
 825 0008 1B0C     		lsrs	r3, r3, #16
 826 000a 8381     		strh	r3, [r0, #12]	@ movhi
 679:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 |= USART_WakeUp;
 827              		.loc 1 679 0
 828 000c 8389     		ldrh	r3, [r0, #12]
 829 000e 9BB2     		uxth	r3, r3
 830 0010 1943     		orrs	r1, r1, r3
 831              	.LVL79:
 832 0012 8181     		strh	r1, [r0, #12]	@ movhi
 833 0014 7047     		bx	lr
 834              		.cfi_endproc
 835              	.LFE123:
 837 0016 00BF     		.section	.text.USART_LINBreakDetectLengthConfig,"ax",%progbits
 838              		.align	2
 839              		.global	USART_LINBreakDetectLengthConfig
 840              		.thumb
 841              		.thumb_func
 843              	USART_LINBreakDetectLengthConfig:
 844              	.LFB124:
 680:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 681:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 682:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 683:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 684:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 685:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 686:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group4 LIN mode functions
 687:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   LIN mode functions 
 688:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 689:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 690:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 691:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                         ##### LIN mode functions #####
 692:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 693:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 694:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to manage the USART LIN 
 695:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     Mode communication.
 696:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 697:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     In LIN mode, 8-bit data format with 1 stop bit is required in accordance with 
 698:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     the LIN standard.
 699:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 700:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     Only this LIN Feature is supported by the USART IP:
 701:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (+) LIN Master Synchronous Break send capability and LIN slave break detection
 702:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           capability :  13-bit break generation and 10/11 bit break detection
 703:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 704:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 705:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USART LIN Master transmitter communication is possible through the following 
 706:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     procedure:
 707:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
 708:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         Mode transmitter or Mode receiver and hardware flow control values using 
 709:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         the USART_Init() function.
 710:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Enable the USART using the USART_Cmd() function.
 711:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Enable the LIN mode using the USART_LINCmd() function.
 712:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Send the break character using USART_SendBreak() function.
 713:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 714:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USART LIN Master receiver communication is possible through the following procedure:
 715:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Program the Baud rate, Word length = 8bits, Stop bits = 1bit, Parity, 
 716:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           Mode transmitter or Mode receiver and hardware flow control values using 
 717:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           the USART_Init() function.
 718:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Enable the USART using the USART_Cmd() function.
 719:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Configures the break detection length using the USART_LINBreakDetectLengthConfig()
 720:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           function.
 721:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Enable the LIN mode using the USART_LINCmd() function.
 722:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 723:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       -@- In LIN mode, the following bits must be kept cleared:
 724:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        (+@) CLKEN in the USART_CR2 register,
 725:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        (+@) STOP[1:0], SCEN, HDSEL and IREN in the USART_CR3 register.
 726:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 727:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 728:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 729:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 730:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 731:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 732:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the USART LIN Break detection length.
 733:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 734:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 735:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_LINBreakDetectLength: specifies the LIN break detection length.
 736:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
 737:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
 738:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
 739:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 740:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 741:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
 742:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 845              		.loc 1 742 0
 846              		.cfi_startproc
 847              		@ args = 0, pretend = 0, frame = 0
 848              		@ frame_needed = 0, uses_anonymous_args = 0
 849              		@ link register save eliminated.
 850              	.LVL80:
 743:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 744:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 745:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
 746:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 747:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 851              		.loc 1 747 0
 852 0000 038A     		ldrh	r3, [r0, #16]
 853 0002 23F02003 		bic	r3, r3, #32
 854 0006 1B04     		lsls	r3, r3, #16
 855 0008 1B0C     		lsrs	r3, r3, #16
 856 000a 0382     		strh	r3, [r0, #16]	@ movhi
 748:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR2 |= USART_LINBreakDetectLength;  
 857              		.loc 1 748 0
 858 000c 038A     		ldrh	r3, [r0, #16]
 859 000e 9BB2     		uxth	r3, r3
 860 0010 1943     		orrs	r1, r1, r3
 861              	.LVL81:
 862 0012 0182     		strh	r1, [r0, #16]	@ movhi
 863 0014 7047     		bx	lr
 864              		.cfi_endproc
 865              	.LFE124:
 867 0016 00BF     		.section	.text.USART_LINCmd,"ax",%progbits
 868              		.align	2
 869              		.global	USART_LINCmd
 870              		.thumb
 871              		.thumb_func
 873              	USART_LINCmd:
 874              	.LFB125:
 749:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 750:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 751:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 752:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's LIN mode.
 753:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 754:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 755:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART LIN mode.
 756:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 757:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 758:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 759:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 760:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 875              		.loc 1 760 0
 876              		.cfi_startproc
 877              		@ args = 0, pretend = 0, frame = 0
 878              		@ frame_needed = 0, uses_anonymous_args = 0
 879              		@ link register save eliminated.
 880              	.LVL82:
 761:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 762:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 763:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 764:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 765:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 766:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 767:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
 768:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR2 |= USART_CR2_LINEN;
 881              		.loc 1 768 0
 882 0000 038A     		ldrh	r3, [r0, #16]
 765:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 883              		.loc 1 765 0
 884 0002 29B9     		cbnz	r1, .L63
 769:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 770:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 771:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 772:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
 773:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 885              		.loc 1 773 0
 886 0004 23F48043 		bic	r3, r3, #16384
 887 0008 1B04     		lsls	r3, r3, #16
 888 000a 1B0C     		lsrs	r3, r3, #16
 889 000c 0382     		strh	r3, [r0, #16]	@ movhi
 890 000e 7047     		bx	lr
 891              	.L63:
 768:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 892              		.loc 1 768 0
 893 0010 9BB2     		uxth	r3, r3
 894 0012 43F48043 		orr	r3, r3, #16384
 895 0016 0382     		strh	r3, [r0, #16]	@ movhi
 896 0018 7047     		bx	lr
 897              		.cfi_endproc
 898              	.LFE125:
 900 001a 00BF     		.section	.text.USART_SendBreak,"ax",%progbits
 901              		.align	2
 902              		.global	USART_SendBreak
 903              		.thumb
 904              		.thumb_func
 906              	USART_SendBreak:
 907              	.LFB126:
 774:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 775:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 776:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 777:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 778:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Transmits break characters.
 779:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 780:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 781:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 782:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 783:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SendBreak(USART_TypeDef* USARTx)
 784:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 908              		.loc 1 784 0
 909              		.cfi_startproc
 910              		@ args = 0, pretend = 0, frame = 0
 911              		@ frame_needed = 0, uses_anonymous_args = 0
 912              		@ link register save eliminated.
 913              	.LVL83:
 785:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 786:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 787:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 788:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Send break characters */
 789:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR1 |= USART_CR1_SBK;
 914              		.loc 1 789 0
 915 0000 8389     		ldrh	r3, [r0, #12]
 916 0002 9BB2     		uxth	r3, r3
 917 0004 43F00103 		orr	r3, r3, #1
 918 0008 8381     		strh	r3, [r0, #12]	@ movhi
 919 000a 7047     		bx	lr
 920              		.cfi_endproc
 921              	.LFE126:
 923              		.section	.text.USART_HalfDuplexCmd,"ax",%progbits
 924              		.align	2
 925              		.global	USART_HalfDuplexCmd
 926              		.thumb
 927              		.thumb_func
 929              	USART_HalfDuplexCmd:
 930              	.LFB127:
 790:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 791:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 792:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 793:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 794:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 795:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 796:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group5 Halfduplex mode function
 797:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Half-duplex mode function 
 798:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 799:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 800:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 801:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                     ##### Half-duplex mode function #####
 802:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 803:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 804:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to manage the USART 
 805:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     Half-duplex communication.
 806:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 807:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     The USART can be configured to follow a single-wire half-duplex protocol where 
 808:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     the TX and RX lines are internally connected.
 809:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 810:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USART Half duplex communication is possible through the following procedure:
 811:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Program the Baud rate, Word length, Stop bits, Parity, Mode transmitter 
 812:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           or Mode receiver and hardware flow control values using the USART_Init()
 813:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           function.
 814:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Configures the USART address using the USART_SetAddress() function.
 815:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Enable the USART using the USART_Cmd() function.
 816:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Enable the half duplex mode using USART_HalfDuplexCmd() function.
 817:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 818:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 819:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     -@- The RX pin is no longer used
 820:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     -@- In Half-duplex mode the following bits must be kept cleared:
 821:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (+@) LINEN and CLKEN bits in the USART_CR2 register.
 822:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (+@) SCEN and IREN bits in the USART_CR3 register.
 823:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 824:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 825:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 826:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 827:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 828:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 829:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's Half Duplex communication.
 830:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
 831:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 832:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the USART Communication.
 833:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
 834:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 835:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 836:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 837:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 931              		.loc 1 837 0
 932              		.cfi_startproc
 933              		@ args = 0, pretend = 0, frame = 0
 934              		@ frame_needed = 0, uses_anonymous_args = 0
 935              		@ link register save eliminated.
 936              	.LVL84:
 838:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 839:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 840:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 841:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 842:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 843:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 844:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
 845:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_HDSEL;
 937              		.loc 1 845 0
 938 0000 838A     		ldrh	r3, [r0, #20]
 842:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 939              		.loc 1 842 0
 940 0002 29B9     		cbnz	r1, .L68
 846:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 847:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 848:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 849:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
 850:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 941              		.loc 1 850 0
 942 0004 23F00803 		bic	r3, r3, #8
 943 0008 1B04     		lsls	r3, r3, #16
 944 000a 1B0C     		lsrs	r3, r3, #16
 945 000c 8382     		strh	r3, [r0, #20]	@ movhi
 946 000e 7047     		bx	lr
 947              	.L68:
 845:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 948              		.loc 1 845 0
 949 0010 9BB2     		uxth	r3, r3
 950 0012 43F00803 		orr	r3, r3, #8
 951 0016 8382     		strh	r3, [r0, #20]	@ movhi
 952 0018 7047     		bx	lr
 953              		.cfi_endproc
 954              	.LFE127:
 956 001a 00BF     		.section	.text.USART_SetGuardTime,"ax",%progbits
 957              		.align	2
 958              		.global	USART_SetGuardTime
 959              		.thumb
 960              		.thumb_func
 962              	USART_SetGuardTime:
 963              	.LFB128:
 851:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 852:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 853:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 854:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 855:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 856:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 857:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 858:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 859:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group6 Smartcard mode functions
 860:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Smartcard mode functions 
 861:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 862:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 863:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 864:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                               ##### Smartcard mode functions #####
 865:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 866:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 867:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to manage the USART 
 868:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     Smartcard communication.
 869:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 870:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     The Smartcard interface is designed to support asynchronous protocol Smartcards as
 871:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     defined in the ISO 7816-3 standard.
 872:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 873:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     The USART can provide a clock to the smartcard through the SCLK output.
 874:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     In smartcard mode, SCLK is not associated to the communication but is simply derived 
 875:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     from the internal peripheral input clock through a 5-bit prescaler.
 876:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 877:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     Smartcard communication is possible through the following procedure:
 878:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Configures the Smartcard Prescaler using the USART_SetPrescaler() function.
 879:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Configures the Smartcard Guard Time using the USART_SetGuardTime() function.
 880:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Program the USART clock using the USART_ClockInit() function as following:
 881:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) USART Clock enabled
 882:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) USART CPOL Low
 883:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) USART CPHA on first edge
 884:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) USART Last Bit Clock Enabled
 885:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Program the Smartcard interface using the USART_Init() function as following:
 886:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Word Length = 9 Bits
 887:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) 1.5 Stop Bit
 888:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Even parity
 889:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) BaudRate = 12096 baud
 890:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Hardware flow control disabled (RTS and CTS signals)
 891:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (++) Tx and Rx enabled
 892:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) POptionally you can enable the parity error interrupt using the USART_ITConfig()
 893:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           function
 894:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) PEnable the USART using the USART_Cmd() function.
 895:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) PEnable the Smartcard NACK using the USART_SmartCardNACKCmd() function.
 896:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) PEnable the Smartcard interface using the USART_SmartCardCmd() function.
 897:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 898:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     Please refer to the ISO 7816-3 specification for more details.
 899:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 900:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       -@- It is also possible to choose 0.5 stop bit for receiving but it is recommended 
 901:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           to use 1.5 stop bits for both transmitting and receiving to avoid switching 
 902:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           between the two configurations.
 903:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       -@- In smartcard mode, the following bits must be kept cleared:
 904:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (+@) LINEN bit in the USART_CR2 register.
 905:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (+@) HDSEL and IREN bits in the USART_CR3 register.
 906:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       -@- Smartcard mode is available on USART peripherals only (not available on UART4 
 907:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           and UART5 peripherals).
 908:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 909:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
 910:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
 911:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 912:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 913:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 914:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Sets the specified USART guard time.
 915:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 916:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 917:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_GuardTime: specifies the guard time.   
 918:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 919:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 920:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
 921:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {    
 964              		.loc 1 921 0
 965              		.cfi_startproc
 966              		@ args = 0, pretend = 0, frame = 0
 967              		@ frame_needed = 0, uses_anonymous_args = 0
 968              		@ link register save eliminated.
 969              	.LVL85:
 922:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 923:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 924:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 925:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Clear the USART Guard time */
 926:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR &= USART_GTPR_PSC;
 970              		.loc 1 926 0
 971 0000 038B     		ldrh	r3, [r0, #24]
 972 0002 DBB2     		uxtb	r3, r3
 973 0004 0383     		strh	r3, [r0, #24]	@ movhi
 927:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Set the USART guard time */
 928:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 974              		.loc 1 928 0
 975 0006 038B     		ldrh	r3, [r0, #24]
 976 0008 9BB2     		uxth	r3, r3
 977 000a 43EA0121 		orr	r1, r3, r1, lsl #8
 978              	.LVL86:
 979 000e 0183     		strh	r1, [r0, #24]	@ movhi
 980 0010 7047     		bx	lr
 981              		.cfi_endproc
 982              	.LFE128:
 984 0012 00BF     		.section	.text.USART_SmartCardCmd,"ax",%progbits
 985              		.align	2
 986              		.global	USART_SmartCardCmd
 987              		.thumb
 988              		.thumb_func
 990              	USART_SmartCardCmd:
 991              	.LFB129:
 929:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 930:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 931:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 932:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's Smart Card mode.
 933:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 934:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 935:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the Smart Card mode.
 936:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.      
 937:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 938:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 939:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 940:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 992              		.loc 1 940 0
 993              		.cfi_startproc
 994              		@ args = 0, pretend = 0, frame = 0
 995              		@ frame_needed = 0, uses_anonymous_args = 0
 996              		@ link register save eliminated.
 997              	.LVL87:
 941:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 942:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx));
 943:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 944:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 945:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 946:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the SC mode by setting the SCEN bit in the CR3 register */
 947:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_SCEN;
 998              		.loc 1 947 0
 999 0000 838A     		ldrh	r3, [r0, #20]
 944:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 1000              		.loc 1 944 0
 1001 0002 29B9     		cbnz	r1, .L73
 948:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 949:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 950:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 951:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
 952:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 1002              		.loc 1 952 0
 1003 0004 23F02003 		bic	r3, r3, #32
 1004 0008 1B04     		lsls	r3, r3, #16
 1005 000a 1B0C     		lsrs	r3, r3, #16
 1006 000c 8382     		strh	r3, [r0, #20]	@ movhi
 1007 000e 7047     		bx	lr
 1008              	.L73:
 947:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 1009              		.loc 1 947 0
 1010 0010 9BB2     		uxth	r3, r3
 1011 0012 43F02003 		orr	r3, r3, #32
 1012 0016 8382     		strh	r3, [r0, #20]	@ movhi
 1013 0018 7047     		bx	lr
 1014              		.cfi_endproc
 1015              	.LFE129:
 1017 001a 00BF     		.section	.text.USART_SmartCardNACKCmd,"ax",%progbits
 1018              		.align	2
 1019              		.global	USART_SmartCardNACKCmd
 1020              		.thumb
 1021              		.thumb_func
 1023              	USART_SmartCardNACKCmd:
 1024              	.LFB130:
 953:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 954:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 955:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 956:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 957:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables NACK transmission.
 958:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 or 6 to select the USART or 
 959:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
 960:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the NACK transmission.
 961:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.  
 962:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
 963:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 964:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 965:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1025              		.loc 1 965 0
 1026              		.cfi_startproc
 1027              		@ args = 0, pretend = 0, frame = 0
 1028              		@ frame_needed = 0, uses_anonymous_args = 0
 1029              		@ link register save eliminated.
 1030              	.LVL88:
 966:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
 967:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_1236_PERIPH(USARTx)); 
 968:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 969:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 970:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 971:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
 972:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_NACK;
 1031              		.loc 1 972 0
 1032 0000 838A     		ldrh	r3, [r0, #20]
 969:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 1033              		.loc 1 969 0
 1034 0002 29B9     		cbnz	r1, .L77
 973:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 974:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
 975:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 976:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
 977:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 1035              		.loc 1 977 0
 1036 0004 23F01003 		bic	r3, r3, #16
 1037 0008 1B04     		lsls	r3, r3, #16
 1038 000a 1B0C     		lsrs	r3, r3, #16
 1039 000c 8382     		strh	r3, [r0, #20]	@ movhi
 1040 000e 7047     		bx	lr
 1041              	.L77:
 972:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 1042              		.loc 1 972 0
 1043 0010 9BB2     		uxth	r3, r3
 1044 0012 43F01003 		orr	r3, r3, #16
 1045 0016 8382     		strh	r3, [r0, #20]	@ movhi
 1046 0018 7047     		bx	lr
 1047              		.cfi_endproc
 1048              	.LFE130:
 1050 001a 00BF     		.section	.text.USART_IrDAConfig,"ax",%progbits
 1051              		.align	2
 1052              		.global	USART_IrDAConfig
 1053              		.thumb
 1054              		.thumb_func
 1056              	USART_IrDAConfig:
 1057              	.LFB131:
 978:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 979:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 980:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 981:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
 982:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
 983:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
 984:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 985:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group7 IrDA mode functions
 986:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   IrDA mode functions 
 987:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
 988:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
 989:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
 990:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                         ##### IrDA mode functions #####
 991:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
 992:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 993:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to manage the USART 
 994:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     IrDA communication.
 995:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
 996:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     IrDA is a half duplex communication protocol. If the Transmitter is busy, any data
 997:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     on the IrDA receive line will be ignored by the IrDA decoder and if the Receiver 
 998:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     is busy, data on the TX from the USART to IrDA will not be encoded by IrDA.
 999:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     While receiving data, transmission should be avoided as the data to be transmitted
1000:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     could be corrupted.
1001:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
1002:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     IrDA communication is possible through the following procedure:
1003:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Program the Baud rate, Word length = 8 bits, Stop bits, Parity, Transmitter/Receiver 
1004:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           modes and hardware flow control values using the USART_Init() function.
1005:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Enable the USART using the USART_Cmd() function.
1006:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Configures the IrDA pulse width by configuring the prescaler using  
1007:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           the USART_SetPrescaler() function.
1008:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Configures the IrDA  USART_IrDAMode_LowPower or USART_IrDAMode_Normal mode
1009:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           using the USART_IrDAConfig() function.
1010:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Enable the IrDA using the USART_IrDACmd() function.
1011:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1012:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       -@- A pulse of width less than two and greater than one PSC period(s) may or may
1013:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           not be rejected.
1014:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       -@- The receiver set up time should be managed by software. The IrDA physical layer
1015:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           specification specifies a minimum of 10 ms delay between transmission and 
1016:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           reception (IrDA is a half duplex protocol).
1017:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       -@- In IrDA mode, the following bits must be kept cleared:
1018:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (+@) LINEN, STOP and CLKEN bits in the USART_CR2 register.
1019:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (+@) SCEN and HDSEL bits in the USART_CR3 register.
1020:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1021:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
1022:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
1023:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1024:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1025:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1026:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Configures the USART's IrDA interface.
1027:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1028:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1029:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IrDAMode: specifies the IrDA mode.
1030:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1031:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IrDAMode_LowPower
1032:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IrDAMode_Normal
1033:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1034:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1035:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
1036:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1058              		.loc 1 1036 0
 1059              		.cfi_startproc
 1060              		@ args = 0, pretend = 0, frame = 0
 1061              		@ frame_needed = 0, uses_anonymous_args = 0
 1062              		@ link register save eliminated.
 1063              	.LVL89:
1037:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1038:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1039:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
1040:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1041:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 1064              		.loc 1 1041 0
 1065 0000 838A     		ldrh	r3, [r0, #20]
 1066 0002 23F00403 		bic	r3, r3, #4
 1067 0006 1B04     		lsls	r3, r3, #16
 1068 0008 1B0C     		lsrs	r3, r3, #16
 1069 000a 8382     		strh	r3, [r0, #20]	@ movhi
1042:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->CR3 |= USART_IrDAMode;
 1070              		.loc 1 1042 0
 1071 000c 838A     		ldrh	r3, [r0, #20]
 1072 000e 9BB2     		uxth	r3, r3
 1073 0010 1943     		orrs	r1, r1, r3
 1074              	.LVL90:
 1075 0012 8182     		strh	r1, [r0, #20]	@ movhi
 1076 0014 7047     		bx	lr
 1077              		.cfi_endproc
 1078              	.LFE131:
 1080 0016 00BF     		.section	.text.USART_IrDACmd,"ax",%progbits
 1081              		.align	2
 1082              		.global	USART_IrDACmd
 1083              		.thumb
 1084              		.thumb_func
 1086              	USART_IrDACmd:
 1087              	.LFB132:
1043:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
1044:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1045:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1046:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's IrDA interface.
1047:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1048:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1049:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the IrDA mode.
1050:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1051:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1052:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1053:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
1054:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1088              		.loc 1 1054 0
 1089              		.cfi_startproc
 1090              		@ args = 0, pretend = 0, frame = 0
 1091              		@ frame_needed = 0, uses_anonymous_args = 0
 1092              		@ link register save eliminated.
 1093              	.LVL91:
1055:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1056:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1057:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1058:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1059:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
1060:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1061:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
1062:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_CR3_IREN;
 1094              		.loc 1 1062 0
 1095 0000 838A     		ldrh	r3, [r0, #20]
1059:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 1096              		.loc 1 1059 0
 1097 0002 29B9     		cbnz	r1, .L82
1063:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1064:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1065:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1066:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
1067:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 1098              		.loc 1 1067 0
 1099 0004 23F00203 		bic	r3, r3, #2
 1100 0008 1B04     		lsls	r3, r3, #16
 1101 000a 1B0C     		lsrs	r3, r3, #16
 1102 000c 8382     		strh	r3, [r0, #20]	@ movhi
 1103 000e 7047     		bx	lr
 1104              	.L82:
1062:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 1105              		.loc 1 1062 0
 1106 0010 9BB2     		uxth	r3, r3
 1107 0012 43F00203 		orr	r3, r3, #2
 1108 0016 8382     		strh	r3, [r0, #20]	@ movhi
 1109 0018 7047     		bx	lr
 1110              		.cfi_endproc
 1111              	.LFE132:
 1113 001a 00BF     		.section	.text.USART_DMACmd,"ax",%progbits
 1114              		.align	2
 1115              		.global	USART_DMACmd
 1116              		.thumb
 1117              		.thumb_func
 1119              	USART_DMACmd:
 1120              	.LFB133:
1068:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1069:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
1070:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1071:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1072:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
1073:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1074:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1075:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group8 DMA transfers management functions
1076:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   DMA transfers management functions
1077:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
1078:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
1079:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
1080:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****               ##### DMA transfers management functions #####
1081:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
1082:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1083:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
1084:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
1085:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1086:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1087:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1088:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the USART's DMA interface.
1089:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1090:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1091:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_DMAReq: specifies the DMA request.
1092:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be any combination of the following values:
1093:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_DMAReq_Tx: USART DMA transmit request
1094:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_DMAReq_Rx: USART DMA receive request
1095:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the DMA Request sources.
1096:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.   
1097:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1098:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1099:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
1100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1121              		.loc 1 1100 0
 1122              		.cfi_startproc
 1123              		@ args = 0, pretend = 0, frame = 0
 1124              		@ frame_needed = 0, uses_anonymous_args = 0
 1125              		@ link register save eliminated.
 1126              	.LVL92:
1101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_DMAREQ(USART_DMAReq));  
1104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
1105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
1107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Enable the DMA transfer for selected requests by setting the DMAT and/or
1109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        DMAR bits in the USART CR3 register */
1110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 |= USART_DMAReq;
 1127              		.loc 1 1110 0
 1128 0000 838A     		ldrh	r3, [r0, #20]
 1129 0002 9BB2     		uxth	r3, r3
1106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
 1130              		.loc 1 1106 0
 1131 0004 1AB9     		cbnz	r2, .L86
1111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
1115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        DMAR bits in the USART CR3 register */
1116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 1132              		.loc 1 1116 0
 1133 0006 23EA0101 		bic	r1, r3, r1
 1134              	.LVL93:
 1135 000a 8182     		strh	r1, [r0, #20]	@ movhi
 1136 000c 7047     		bx	lr
 1137              	.LVL94:
 1138              	.L86:
1110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 1139              		.loc 1 1110 0
 1140 000e 1943     		orrs	r1, r1, r3
 1141              	.LVL95:
 1142 0010 8182     		strh	r1, [r0, #20]	@ movhi
 1143 0012 7047     		bx	lr
 1144              		.cfi_endproc
 1145              	.LFE133:
 1147              		.section	.text.USART_ITConfig,"ax",%progbits
 1148              		.align	2
 1149              		.global	USART_ITConfig
 1150              		.thumb
 1151              		.thumb_func
 1153              	USART_ITConfig:
 1154              	.LFB134:
1117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
1119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @}
1122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /** @defgroup USART_Group9 Interrupts and flags management functions
1125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *  @brief   Interrupts and flags management functions 
1126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  *
1127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @verbatim   
1128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================
1129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****             ##### Interrupts and flags management functions #####
1130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****  ===============================================================================  
1131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
1132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     This subsection provides a set of functions allowing to configure the USART 
1133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     Interrupts sources, DMA channels requests and check or clear the flags or 
1134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     pending bits status.
1135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     The user should identify which mode will be used in his application to manage 
1136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     the communication: Polling mode, Interrupt mode or DMA mode. 
1137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     *** Polling Mode ***
1139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     ====================
1140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
1141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     In Polling Mode, the SPI communication can be managed by 10 flags:
1142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) USART_FLAG_TXE : to indicate the status of the transmit buffer register
1143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) USART_FLAG_RXNE : to indicate the status of the receive buffer register
1144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) USART_FLAG_TC : to indicate the status of the transmit operation
1145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) USART_FLAG_IDLE : to indicate the status of the Idle Line             
1146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) USART_FLAG_CTS : to indicate the status of the nCTS input
1147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) USART_FLAG_LBD : to indicate the status of the LIN break detection
1148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) USART_FLAG_NE : to indicate if a noise error occur
1149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) USART_FLAG_FE : to indicate if a frame error occur
1150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) USART_FLAG_PE : to indicate if a parity error occur
1151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) USART_FLAG_ORE : to indicate if an Overrun error occur
1152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
1153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     In this Mode it is advised to use the following functions:
1154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (+) FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG);
1155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (+) void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG);
1156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     *** Interrupt Mode ***
1158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     ======================
1159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
1160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     In Interrupt Mode, the USART communication can be managed by 8 interrupt sources
1161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     and 10 pending bits: 
1162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Pending Bits:
1164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_TXE : to indicate the status of the transmit buffer register
1166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_RXNE : to indicate the status of the receive buffer register
1167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_TC : to indicate the status of the transmit operation
1168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_IDLE : to indicate the status of the Idle Line             
1169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_CTS : to indicate the status of the nCTS input
1170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_LBD : to indicate the status of the LIN break detection
1171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_NE : to indicate if a noise error occur
1172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_FE : to indicate if a frame error occur
1173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_PE : to indicate if a parity error occur
1174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_ORE : to indicate if an Overrun error occur
1175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) Interrupt Source:
1177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_TXE : specifies the interrupt source for the Tx buffer empty 
1179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                             interrupt. 
1180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_RXNE : specifies the interrupt source for the Rx buffer not 
1181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                              empty interrupt.
1182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_TC : specifies the interrupt source for the Transmit complete 
1183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                            interrupt. 
1184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_IDLE : specifies the interrupt source for the Idle Line interrupt.           
1185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_CTS : specifies the interrupt source for the CTS interrupt. 
1186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_LBD : specifies the interrupt source for the LIN break detection
1187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****                             interrupt. 
1188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_PE : specifies the interrupt source for the parity error interrupt. 
1189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****         (##) USART_IT_ERR :  specifies the interrupt source for the errors interrupt.
1190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       -@@- Some parameters are coded in order to use them as interrupt source 
1192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****           or as pending bits.
1193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
1194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     In this Mode it is advised to use the following functions:
1195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (+) void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState);
1196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (+) ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT);
1197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (+) void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT);
1198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     *** DMA Mode ***
1200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     ================
1201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
1202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     In DMA Mode, the USART communication can be managed by 2 DMA Channel requests:
1203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) USART_DMAReq_Tx: specifies the Tx buffer DMA transfer request
1204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (#) USART_DMAReq_Rx: specifies the Rx buffer DMA transfer request
1205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     [..]
1206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     In this Mode it is advised to use the following function:
1207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****       (+) void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
1208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** @endverbatim
1210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @{
1211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Enables or disables the specified USART interrupts.
1215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt sources to be enabled or disabled.
1218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt
1220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TXE:  Transmit Data Register empty interrupt
1222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt
1223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt
1224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_IDLE: Idle line detection interrupt
1225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_PE:   Parity Error interrupt
1226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_ERR:  Error interrupt(Frame error, noise error, overrun error)
1227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  NewState: new state of the specified USARTx interrupts.
1228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be: ENABLE or DISABLE.
1229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
1232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1155              		.loc 1 1232 0
 1156              		.cfi_startproc
 1157              		@ args = 0, pretend = 0, frame = 0
 1158              		@ frame_needed = 0, uses_anonymous_args = 0
 1159              		@ link register save eliminated.
 1160              	.LVL96:
 1161 0000 10B4     		push	{r4}
 1162              	.LCFI23:
 1163              		.cfi_def_cfa_offset 4
 1164              		.cfi_offset 4, -4
1233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
1234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t usartxbase = 0x00;
1235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CONFIG_IT(USART_IT));
1238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */
1241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   usartxbase = (uint32_t)USARTx;
1247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the USART register index */
1249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
1250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the interrupt position */
1252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itpos = USART_IT & IT_MASK;
1253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = (((uint32_t)0x01) << itpos);
 1165              		.loc 1 1253 0
 1166 0002 01F01F04 		and	r4, r1, #31
1249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
 1167              		.loc 1 1249 0
 1168 0006 C1F34211 		ubfx	r1, r1, #5, #3
 1169              	.LVL97:
 1170              		.loc 1 1253 0
 1171 000a 0123     		movs	r3, #1
 1172              	.LVL98:
1254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (usartreg == 0x01) /* The IT is in CR1 register */
 1173              		.loc 1 1255 0
 1174 000c 0129     		cmp	r1, #1
1253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
 1175              		.loc 1 1253 0
 1176 000e 03FA04F3 		lsl	r3, r3, r4
 1177              	.LVL99:
 1178              		.loc 1 1255 0
 1179 0012 11D0     		beq	.L94
1256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     usartxbase += 0x0C;
1258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (usartreg == 0x02) /* The IT is in CR2 register */
 1180              		.loc 1 1259 0
 1181 0014 0229     		cmp	r1, #2
1260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     usartxbase += 0x10;
 1182              		.loc 1 1261 0
 1183 0016 0CBF     		ite	eq
 1184 0018 1030     		addeq	r0, r0, #16
 1185              	.LVL100:
1262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* The IT is in CR3 register */
1264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     usartxbase += 0x14; 
 1186              		.loc 1 1265 0
 1187 001a 1430     		addne	r0, r0, #20
 1188              	.LVL101:
 1189              	.L89:
1266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (NewState != DISABLE)
 1190              		.loc 1 1267 0
 1191 001c 32B9     		cbnz	r2, .L95
1268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     *(__IO uint32_t*)usartxbase  |= itmask;
1270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     *(__IO uint32_t*)usartxbase &= ~itmask;
 1192              		.loc 1 1273 0
 1193 001e 0268     		ldr	r2, [r0]
 1194              	.LVL102:
1274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1195              		.loc 1 1275 0
 1196 0020 5DF8044B 		ldr	r4, [sp], #4
 1197              	.LCFI24:
 1198              		.cfi_remember_state
 1199              		.cfi_restore 4
 1200              		.cfi_def_cfa_offset 0
1273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 1201              		.loc 1 1273 0
 1202 0024 22EA0303 		bic	r3, r2, r3
 1203              	.LVL103:
 1204 0028 0360     		str	r3, [r0]
 1205              		.loc 1 1275 0
 1206 002a 7047     		bx	lr
 1207              	.LVL104:
 1208              	.L95:
 1209              	.LCFI25:
 1210              		.cfi_restore_state
1269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 1211              		.loc 1 1269 0
 1212 002c 0268     		ldr	r2, [r0]
 1213              	.LVL105:
 1214              		.loc 1 1275 0
 1215 002e 5DF8044B 		ldr	r4, [sp], #4
 1216              	.LCFI26:
 1217              		.cfi_remember_state
 1218              		.cfi_restore 4
 1219              		.cfi_def_cfa_offset 0
1269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 1220              		.loc 1 1269 0
 1221 0032 1343     		orrs	r3, r3, r2
 1222              	.LVL106:
 1223 0034 0360     		str	r3, [r0]
 1224              		.loc 1 1275 0
 1225 0036 7047     		bx	lr
 1226              	.LVL107:
 1227              	.L94:
 1228              	.LCFI27:
 1229              		.cfi_restore_state
1257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 1230              		.loc 1 1257 0
 1231 0038 0C30     		adds	r0, r0, #12
 1232              	.LVL108:
 1233 003a EFE7     		b	.L89
 1234              		.cfi_endproc
 1235              	.LFE134:
 1237              		.section	.text.USART_GetFlagStatus,"ax",%progbits
 1238              		.align	2
 1239              		.global	USART_GetFlagStatus
 1240              		.thumb
 1241              		.thumb_func
 1243              	USART_GetFlagStatus:
 1244              	.LFB135:
1276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Checks whether the specified USART flag is set or not.
1279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_FLAG: specifies the flag to check.
1282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_CTS:  CTS Change flag (not available for UART4 and UART5)
1284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_LBD:  LIN Break detection flag
1285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TXE:  Transmit data register empty flag
1286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TC:   Transmission Complete flag
1287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_RXNE: Receive data register not empty flag
1288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_IDLE: Idle Line detection flag
1289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_ORE:  OverRun Error flag
1290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_NE:   Noise Error flag
1291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_FE:   Framing Error flag
1292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_PE:   Parity Error flag
1293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval The new state of USART_FLAG (SET or RESET).
1294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
1296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1245              		.loc 1 1296 0
 1246              		.cfi_startproc
 1247              		@ args = 0, pretend = 0, frame = 0
 1248              		@ frame_needed = 0, uses_anonymous_args = 0
 1249              		@ link register save eliminated.
 1250              	.LVL109:
1297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   FlagStatus bitstatus = RESET;
1298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_FLAG(USART_FLAG));
1301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS flag is not available for UART4 and UART5 */
1303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_FLAG == USART_FLAG_CTS)
1304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 1251              		.loc 1 1308 0
 1252 0000 0388     		ldrh	r3, [r0]
 1253              	.LVL110:
 1254 0002 1942     		tst	r1, r3
1309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = SET;
1311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = RESET;
1315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   return bitstatus;
1317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1255              		.loc 1 1317 0
 1256 0004 14BF     		ite	ne
 1257 0006 0120     		movne	r0, #1
 1258              	.LVL111:
 1259 0008 0020     		moveq	r0, #0
 1260 000a 7047     		bx	lr
 1261              		.cfi_endproc
 1262              	.LFE135:
 1264              		.section	.text.USART_ClearFlag,"ax",%progbits
 1265              		.align	2
 1266              		.global	USART_ClearFlag
 1267              		.thumb
 1268              		.thumb_func
 1270              	USART_ClearFlag:
 1271              	.LFB136:
1318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Clears the USARTx's pending flags.
1321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_FLAG: specifies the flag to clear.
1324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be any combination of the following values:
1325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_CTS:  CTS Change flag (not available for UART4 and UART5).
1326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_LBD:  LIN Break detection flag.
1327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_TC:   Transmission Complete flag.
1328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_FLAG_RXNE: Receive data register not empty flag.
1329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *   
1330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun 
1331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          error) and IDLE (Idle line detected) flags are cleared by software 
1332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          sequence: a read operation to USART_SR register (USART_GetFlagStatus()) 
1333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          followed by a read operation to USART_DR register (USART_ReceiveData()).
1334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   RXNE flag can be also cleared by a read to the USART_DR register 
1335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TC flag can be also cleared by software sequence: a read operation to 
1337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          USART_SR register (USART_GetFlagStatus()) followed by a write operation
1338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          to USART_DR register (USART_SendData()).
1339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TXE flag is cleared only by a write to the USART_DR register 
1340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_SendData()).
1341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *   
1342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
1345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1272              		.loc 1 1345 0
 1273              		.cfi_startproc
 1274              		@ args = 0, pretend = 0, frame = 0
 1275              		@ frame_needed = 0, uses_anonymous_args = 0
 1276              		@ link register save eliminated.
 1277              	.LVL112:
1346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
1349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS flag is not available for UART4 and UART5 */
1351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
1352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****        
1356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->SR = (uint16_t)~USART_FLAG;
 1278              		.loc 1 1356 0
 1279 0000 C943     		mvns	r1, r1
 1280              	.LVL113:
 1281 0002 89B2     		uxth	r1, r1
 1282 0004 0180     		strh	r1, [r0]	@ movhi
 1283 0006 7047     		bx	lr
 1284              		.cfi_endproc
 1285              	.LFE136:
 1287              		.section	.text.USART_GetITStatus,"ax",%progbits
 1288              		.align	2
 1289              		.global	USART_GetITStatus
 1290              		.thumb
 1291              		.thumb_func
 1293              	USART_GetITStatus:
 1294              	.LFB137:
1357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
1358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Checks whether the specified USART interrupt has occurred or not.
1361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the USART interrupt source to check.
1364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
1366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TXE:  Transmit Data Register empty interrupt
1368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt
1369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt
1370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_IDLE: Idle line detection interrupt
1371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_ORE_RX : OverRun Error interrupt if the RXNEIE bit is set
1372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_ORE_ER : OverRun Error interrupt if the EIE bit is set  
1373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_NE:   Noise Error interrupt
1374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_FE:   Framing Error interrupt
1375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_PE:   Parity Error interrupt
1376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval The new state of USART_IT (SET or RESET).
1377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
1379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1295              		.loc 1 1379 0
 1296              		.cfi_startproc
 1297              		@ args = 0, pretend = 0, frame = 0
 1298              		@ frame_needed = 0, uses_anonymous_args = 0
 1299              		@ link register save eliminated.
 1300              	.LVL114:
1380:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
1381:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   ITStatus bitstatus = RESET;
1382:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1383:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1384:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_GET_IT(USART_IT)); 
1385:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1386:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */ 
1387:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1388:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1389:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1390:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1391:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1392:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the USART register index */
1393:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
 1301              		.loc 1 1393 0
 1302 0000 C1F34212 		ubfx	r2, r1, #5, #3
 1303              	.LVL115:
1379:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 1304              		.loc 1 1379 0
 1305 0004 10B4     		push	{r4}
 1306              	.LCFI28:
 1307              		.cfi_def_cfa_offset 4
 1308              		.cfi_offset 4, -4
1394:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Get the interrupt position */
1395:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = USART_IT & IT_MASK;
1396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = (uint32_t)0x01 << itmask;
 1309              		.loc 1 1396 0
 1310 0006 0123     		movs	r3, #1
 1311 0008 01F01F04 		and	r4, r1, #31
1397:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1398:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (usartreg == 0x01) /* The IT  is in CR1 register */
 1312              		.loc 1 1398 0
 1313 000c 012A     		cmp	r2, #1
1396:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
 1314              		.loc 1 1396 0
 1315 000e 03FA04F3 		lsl	r3, r3, r4
 1316              	.LVL116:
 1317              		.loc 1 1398 0
 1318 0012 16D0     		beq	.L105
1399:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR1;
1401:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1402:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else if (usartreg == 0x02) /* The IT  is in CR2 register */
 1319              		.loc 1 1402 0
 1320 0014 022A     		cmp	r2, #2
1403:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1404:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR2;
 1321              		.loc 1 1404 0
 1322 0016 0CBF     		ite	eq
 1323 0018 028A     		ldrheq	r2, [r0, #16]
 1324              	.LVL117:
1405:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1406:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else /* The IT  is in CR3 register */
1407:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1408:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     itmask &= USARTx->CR3;
 1325              		.loc 1 1408 0
 1326 001a 828A     		ldrhne	r2, [r0, #20]
 1327 001c 92B2     		uxth	r2, r2
 1328 001e 1340     		ands	r3, r3, r2
 1329              	.LVL118:
 1330              	.L100:
1409:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1410:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1411:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos = USART_IT >> 0x08;
1412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos = (uint32_t)0x01 << bitpos;
1413:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos &= USARTx->SR;
 1331              		.loc 1 1413 0
 1332 0020 0288     		ldrh	r2, [r0]
 1333 0022 92B2     		uxth	r2, r2
 1334              	.LVL119:
1414:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 1335              		.loc 1 1414 0
 1336 0024 4BB1     		cbz	r3, .L103
1412:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos &= USARTx->SR;
 1337              		.loc 1 1412 0 discriminator 1
 1338 0026 090A     		lsrs	r1, r1, #8
 1339              	.LVL120:
 1340 0028 0123     		movs	r3, #1
 1341              	.LVL121:
 1342 002a 8B40     		lsls	r3, r3, r1
 1343              		.loc 1 1414 0 discriminator 1
 1344 002c 1342     		tst	r3, r2
1415:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1416:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = SET;
 1345              		.loc 1 1416 0 discriminator 1
 1346 002e 14BF     		ite	ne
 1347 0030 0120     		movne	r0, #1
 1348              	.LVL122:
 1349 0032 0020     		moveq	r0, #0
 1350              	.LVL123:
1417:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1418:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   else
1419:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     bitstatus = RESET;
1421:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
1422:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   
1423:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   return bitstatus;  
1424:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** }
 1351              		.loc 1 1424 0 discriminator 1
 1352 0034 5DF8044B 		ldr	r4, [sp], #4
 1353              	.LCFI29:
 1354              		.cfi_remember_state
 1355              		.cfi_restore 4
 1356              		.cfi_def_cfa_offset 0
 1357 0038 7047     		bx	lr
 1358              	.LVL124:
 1359              	.L103:
 1360              	.LCFI30:
 1361              		.cfi_restore_state
1420:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 1362              		.loc 1 1420 0
 1363 003a 1846     		mov	r0, r3
 1364              	.LVL125:
 1365              		.loc 1 1424 0
 1366 003c 5DF8044B 		ldr	r4, [sp], #4
 1367              	.LCFI31:
 1368              		.cfi_remember_state
 1369              		.cfi_restore 4
 1370              		.cfi_def_cfa_offset 0
 1371 0040 7047     		bx	lr
 1372              	.LVL126:
 1373              	.L105:
 1374              	.LCFI32:
 1375              		.cfi_restore_state
1400:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   }
 1376              		.loc 1 1400 0
 1377 0042 8289     		ldrh	r2, [r0, #12]
 1378              	.LVL127:
 1379 0044 92B2     		uxth	r2, r2
 1380 0046 1340     		ands	r3, r3, r2
 1381              	.LVL128:
 1382 0048 EAE7     		b	.L100
 1383              		.cfi_endproc
 1384              	.LFE137:
 1386 004a 00BF     		.section	.text.USART_ClearITPendingBit,"ax",%progbits
 1387              		.align	2
 1388              		.global	USART_ClearITPendingBit
 1389              		.thumb
 1390              		.thumb_func
 1392              	USART_ClearITPendingBit:
 1393              	.LFB138:
1425:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1426:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** /**
1427:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @brief  Clears the USARTx's interrupt pending bits.
1428:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
1429:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *         UART peripheral.
1430:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @param  USART_IT: specifies the interrupt pending bit to clear.
1431:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          This parameter can be one of the following values:
1432:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
1433:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_LBD:  LIN Break detection interrupt
1434:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_TC:   Transmission complete interrupt. 
1435:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *            @arg USART_IT_RXNE: Receive Data register not empty interrupt.
1436:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *
1437:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun 
1438:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          error) and IDLE (Idle line detected) pending bits are cleared by 
1439:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          software sequence: a read operation to USART_SR register 
1440:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_GetITStatus()) followed by a read operation to USART_DR register 
1441:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1442:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   RXNE pending bit can be also cleared by a read to the USART_DR register 
1443:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_ReceiveData()).
1444:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TC pending bit can be also cleared by software sequence: a read 
1445:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          operation to USART_SR register (USART_GetITStatus()) followed by a write 
1446:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          operation to USART_DR register (USART_SendData()).
1447:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @note   TXE pending bit is cleared only by a write to the USART_DR register 
1448:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *          (USART_SendData()).
1449:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   *  
1450:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   * @retval None
1451:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   */
1452:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
1453:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** {
 1394              		.loc 1 1453 0
 1395              		.cfi_startproc
 1396              		@ args = 0, pretend = 0, frame = 0
 1397              		@ frame_needed = 0, uses_anonymous_args = 0
 1398              		@ link register save eliminated.
 1399              	.LVL129:
1454:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   uint16_t bitpos = 0x00, itmask = 0x00;
1455:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* Check the parameters */
1456:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1457:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   assert_param(IS_USART_CLEAR_IT(USART_IT)); 
1458:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c **** 
1459:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */
1460:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   if (USART_IT == USART_IT_CTS)
1461:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   {
1462:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     assert_param(IS_USART_1236_PERIPH(USARTx));
1463:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   } 
1464:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****     
1465:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   bitpos = USART_IT >> 0x08;
1466:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 1400              		.loc 1 1466 0
 1401 0000 090A     		lsrs	r1, r1, #8
 1402              	.LVL130:
 1403 0002 0123     		movs	r3, #1
 1404 0004 8B40     		lsls	r3, r3, r1
1467:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_usart.c ****   USARTx->SR = (uint16_t)~itmask;
 1405              		.loc 1 1467 0
 1406 0006 DB43     		mvns	r3, r3
 1407 0008 9BB2     		uxth	r3, r3
 1408 000a 0380     		strh	r3, [r0]	@ movhi
 1409 000c 7047     		bx	lr
 1410              		.cfi_endproc
 1411              	.LFE138:
 1413 000e 00BF     		.text
 1414              	.Letext0:
 1415              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\4.9 2014q4\\arm-none-eabi\\include\\mach
 1416              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\4.9 2014q4\\arm-none-eabi\\include\\stdi
 1417              		.file 4 "libs/Device/STM32F4xx/Include/stm32f4xx.h"
 1418              		.file 5 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rcc.h"
 1419              		.file 6 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_usart.h"
 1420              		.file 7 "libs/CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_usart.c
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:20     .text.USART_DeInit:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:25     .text.USART_DeInit:00000000 USART_DeInit
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:247    .text.USART_DeInit:000000ec $d
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:259    .text.USART_Init:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:264    .text.USART_Init:00000000 USART_Init
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:452    .text.USART_Init:000000bc $d
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:458    .text.USART_StructInit:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:463    .text.USART_StructInit:00000000 USART_StructInit
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:494    .text.USART_ClockInit:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:499    .text.USART_ClockInit:00000000 USART_ClockInit
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:547    .text.USART_ClockStructInit:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:552    .text.USART_ClockStructInit:00000000 USART_ClockStructInit
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:574    .text.USART_Cmd:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:579    .text.USART_Cmd:00000000 USART_Cmd
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:607    .text.USART_SetPrescaler:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:612    .text.USART_SetPrescaler:00000000 USART_SetPrescaler
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:635    .text.USART_OverSampling8Cmd:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:640    .text.USART_OverSampling8Cmd:00000000 USART_OverSampling8Cmd
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:667    .text.USART_OneBitMethodCmd:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:672    .text.USART_OneBitMethodCmd:00000000 USART_OneBitMethodCmd
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:700    .text.USART_SendData:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:705    .text.USART_SendData:00000000 USART_SendData
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:722    .text.USART_ReceiveData:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:727    .text.USART_ReceiveData:00000000 USART_ReceiveData
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:745    .text.USART_SetAddress:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:750    .text.USART_SetAddress:00000000 USART_SetAddress
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:775    .text.USART_ReceiverWakeUpCmd:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:780    .text.USART_ReceiverWakeUpCmd:00000000 USART_ReceiverWakeUpCmd
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:808    .text.USART_WakeUpConfig:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:813    .text.USART_WakeUpConfig:00000000 USART_WakeUpConfig
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:838    .text.USART_LINBreakDetectLengthConfig:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:843    .text.USART_LINBreakDetectLengthConfig:00000000 USART_LINBreakDetectLengthConfig
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:868    .text.USART_LINCmd:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:873    .text.USART_LINCmd:00000000 USART_LINCmd
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:901    .text.USART_SendBreak:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:906    .text.USART_SendBreak:00000000 USART_SendBreak
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:924    .text.USART_HalfDuplexCmd:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:929    .text.USART_HalfDuplexCmd:00000000 USART_HalfDuplexCmd
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:957    .text.USART_SetGuardTime:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:962    .text.USART_SetGuardTime:00000000 USART_SetGuardTime
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:985    .text.USART_SmartCardCmd:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:990    .text.USART_SmartCardCmd:00000000 USART_SmartCardCmd
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:1018   .text.USART_SmartCardNACKCmd:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:1023   .text.USART_SmartCardNACKCmd:00000000 USART_SmartCardNACKCmd
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:1051   .text.USART_IrDAConfig:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:1056   .text.USART_IrDAConfig:00000000 USART_IrDAConfig
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:1081   .text.USART_IrDACmd:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:1086   .text.USART_IrDACmd:00000000 USART_IrDACmd
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:1114   .text.USART_DMACmd:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:1119   .text.USART_DMACmd:00000000 USART_DMACmd
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:1148   .text.USART_ITConfig:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:1153   .text.USART_ITConfig:00000000 USART_ITConfig
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:1238   .text.USART_GetFlagStatus:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:1243   .text.USART_GetFlagStatus:00000000 USART_GetFlagStatus
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:1265   .text.USART_ClearFlag:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:1270   .text.USART_ClearFlag:00000000 USART_ClearFlag
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:1288   .text.USART_GetITStatus:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:1293   .text.USART_GetITStatus:00000000 USART_GetITStatus
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:1387   .text.USART_ClearITPendingBit:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccfQ5acg.s:1392   .text.USART_ClearITPendingBit:00000000 USART_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
RCC_APB2PeriphResetCmd
RCC_GetClocksFreq
