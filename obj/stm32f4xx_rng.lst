   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 2
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"stm32f4xx_rng.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.RNG_DeInit,"ax",%progbits
  20              		.align	2
  21              		.global	RNG_DeInit
  22              		.thumb
  23              		.thumb_func
  25              	RNG_DeInit:
  26              	.LFB110:
  27              		.file 1 "libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c"
   1:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
   2:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ******************************************************************************
   3:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @file    stm32f4xx_rng.c
   4:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @author  MCD Application Team
   5:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @version V1.3.0
   6:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @date    08-November-2013
   7:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief This file provides firmware functions to manage the following 
   8:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          functionalities of the Random Number Generator (RNG) peripheral:           
   9:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           + Initialization and Configuration 
  10:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           + Get 32 bit Random number      
  11:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           + Interrupts and flags management       
  12:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         
  13:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @verbatim
  14:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                                  
  15:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===================================================================      
  16:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                  ##### How to use this driver #####
  17:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===================================================================          
  18:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  [..]
  19:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    (#) Enable The RNG controller clock using 
  20:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****        RCC_AHB2PeriphClockCmd(RCC_AHB2Periph_RNG, ENABLE) function.
  21:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                 
  22:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    (#) Activate the RNG peripheral using RNG_Cmd() function.
  23:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****             
  24:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    (#) Wait until the 32 bit Random number Generator contains a valid  random data
  25:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       (using polling/interrupt mode). For more details, refer to "Interrupts and 
  26:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       flags management functions" module description.
  27:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****              
  28:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    (#) Get the 32 bit Random number using RNG_GetRandomNumber() function
  29:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****             
  30:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    (#) To get another 32 bit Random number, go to step 3.       
  31:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****          
  32:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                 
  33:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @endverbatim
  34:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         
  35:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ******************************************************************************
  36:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @attention
  37:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *
  38:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * <h2><center>&copy; COPYRIGHT 2013 STMicroelectronics</center></h2>
  39:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *
  40:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  41:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * You may not use this file except in compliance with the License.
  42:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * You may obtain a copy of the License at:
  43:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *
  44:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *        http://www.st.com/software_license_agreement_liberty_v2
  45:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *
  46:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * Unless required by applicable law or agreed to in writing, software 
  47:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * distributed under the License is distributed on an "AS IS" BASIS, 
  48:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  49:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * See the License for the specific language governing permissions and
  50:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * limitations under the License.
  51:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *
  52:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ******************************************************************************  
  53:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
  54:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  55:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Includes ------------------------------------------------------------------*/
  56:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** #include "stm32f4xx_rng.h"
  57:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** #include "stm32f4xx_rcc.h"
  58:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  59:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  60:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
  61:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
  62:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  63:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @defgroup RNG 
  64:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief RNG driver modules
  65:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
  66:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */ 
  67:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  68:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private typedef -----------------------------------------------------------*/
  69:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private define ------------------------------------------------------------*/
  70:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private macro -------------------------------------------------------------*/
  71:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private variables ---------------------------------------------------------*/
  72:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private function prototypes -----------------------------------------------*/
  73:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /* Private functions ---------------------------------------------------------*/
  74:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  75:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @defgroup RNG_Private_Functions
  76:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
  77:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */ 
  78:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  79:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @defgroup RNG_Group1 Initialization and Configuration functions
  80:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *  @brief    Initialization and Configuration functions 
  81:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *
  82:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @verbatim    
  83:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================
  84:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****              ##### Initialization and Configuration functions #####
  85:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================  
  86:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  [..] This section provides functions allowing to 
  87:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    (+) Initialize the RNG peripheral
  88:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    (+) Enable or disable the RNG peripheral
  89:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    
  90:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @endverbatim
  91:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
  92:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
  93:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
  94:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
  95:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  De-initializes the RNG peripheral registers to their default reset values.
  96:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  None
  97:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval None
  98:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
  99:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** void RNG_DeInit(void)
 100:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
  28              		.loc 1 100 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 08B5     		push	{r3, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 3, -8
  36              		.cfi_offset 14, -4
 101:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Enable RNG reset state */
 102:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
  37              		.loc 1 102 0
  38 0002 4020     		movs	r0, #64
  39 0004 0121     		movs	r1, #1
  40 0006 FFF7FEFF 		bl	RCC_AHB2PeriphResetCmd
  41              	.LVL0:
 103:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 104:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Release RNG from reset state */
 105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
  42              		.loc 1 105 0
  43 000a 4020     		movs	r0, #64
  44 000c 0021     		movs	r1, #0
 106:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
  45              		.loc 1 106 0
  46 000e BDE80840 		pop	{r3, lr}
  47              	.LCFI1:
  48              		.cfi_restore 14
  49              		.cfi_restore 3
  50              		.cfi_def_cfa_offset 0
 105:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
  51              		.loc 1 105 0
  52 0012 FFF7FEBF 		b	RCC_AHB2PeriphResetCmd
  53              	.LVL1:
  54              		.cfi_endproc
  55              	.LFE110:
  57 0016 00BF     		.section	.text.RNG_Cmd,"ax",%progbits
  58              		.align	2
  59              		.global	RNG_Cmd
  60              		.thumb
  61              		.thumb_func
  63              	RNG_Cmd:
  64              	.LFB111:
 107:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 108:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 109:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Enables or disables the RNG peripheral.
 110:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  NewState: new state of the RNG peripheral.
 111:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be: ENABLE or DISABLE.
 112:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval None
 113:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 114:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** void RNG_Cmd(FunctionalState NewState)
 115:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
  65              		.loc 1 115 0
  66              		.cfi_startproc
  67              		@ args = 0, pretend = 0, frame = 0
  68              		@ frame_needed = 0, uses_anonymous_args = 0
  69              		@ link register save eliminated.
  70              	.LVL2:
 116:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 117:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 118:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   if (NewState != DISABLE)
 120:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 121:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* Enable the RNG */
 122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     RNG->CR |= RNG_CR_RNGEN;
  71              		.loc 1 122 0
  72 0000 054A     		ldr	r2, .L8
  73 0002 1368     		ldr	r3, [r2]
 119:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
  74              		.loc 1 119 0
  75 0004 18B9     		cbnz	r0, .L7
 123:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 124:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   else
 125:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 126:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* Disable the RNG */
 127:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     RNG->CR &= ~RNG_CR_RNGEN;
  76              		.loc 1 127 0
  77 0006 23F00403 		bic	r3, r3, #4
  78 000a 1360     		str	r3, [r2]
  79 000c 7047     		bx	lr
  80              	.L7:
 122:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
  81              		.loc 1 122 0
  82 000e 43F00403 		orr	r3, r3, #4
  83 0012 1360     		str	r3, [r2]
  84 0014 7047     		bx	lr
  85              	.L9:
  86 0016 00BF     		.align	2
  87              	.L8:
  88 0018 00080650 		.word	1342572544
  89              		.cfi_endproc
  90              	.LFE111:
  92              		.section	.text.RNG_GetRandomNumber,"ax",%progbits
  93              		.align	2
  94              		.global	RNG_GetRandomNumber
  95              		.thumb
  96              		.thumb_func
  98              	RNG_GetRandomNumber:
  99              	.LFB112:
 128:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 129:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 130:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 131:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @}
 132:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 133:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 134:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @defgroup RNG_Group2 Get 32 bit Random number function
 135:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *  @brief    Get 32 bit Random number function 
 136:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *
 137:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 138:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @verbatim    
 139:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================
 140:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****                  ##### Get 32 bit Random number function #####
 141:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================  
 142:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  [..] This section provides a function allowing to get the 32 bit Random number  
 143:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 144:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    (@)  Before to call this function you have to wait till DRDY flag is set,
 145:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****         using RNG_GetFlagStatus(RNG_FLAG_DRDY) function. 
 146:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    
 147:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @endverbatim
 148:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
 149:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 150:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 151:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 152:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 153:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Returns a 32-bit random number.
 154:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *   
 155:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   Before to call this function you have to wait till DRDY (data ready)
 156:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         flag is set, using RNG_GetFlagStatus(RNG_FLAG_DRDY) function.
 157:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   Each time the the Random number data is read (using RNG_GetRandomNumber()
 158:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         function), the RNG_FLAG_DRDY flag is automatically cleared.
 159:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   In the case of a seed error, the generation of random numbers is 
 160:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         interrupted for as long as the SECS bit is '1'. If a number is 
 161:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         available in the RNG_DR register, it must not be used because it may 
 162:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         not have enough entropy. In this case, it is recommended to clear the 
 163:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         SEIS bit(using RNG_ClearFlag(RNG_FLAG_SECS) function), then disable 
 164:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         and enable the RNG peripheral (using RNG_Cmd() function) to 
 165:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         reinitialize and restart the RNG.
 166:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   In the case of a clock error, the RNG is no more able to generate 
 167:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         random numbers because the PLL48CLK clock is not correct. User have 
 168:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         to check that the clock controller is correctly configured to provide
 169:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         the RNG clock and clear the CEIS bit (using RNG_ClearFlag(RNG_FLAG_CECS) 
 170:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         function) . The clock error has no impact on the previously generated 
 171:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         random numbers, and the RNG_DR register contents can be used.
 172:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         
 173:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  None
 174:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval 32-bit random number.
 175:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 176:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** uint32_t RNG_GetRandomNumber(void)
 177:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 100              		.loc 1 177 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 0
 103              		@ frame_needed = 0, uses_anonymous_args = 0
 104              		@ link register save eliminated.
 178:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Return the 32 bit random number from the DR register */
 179:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   return RNG->DR;
 105              		.loc 1 179 0
 106 0000 014B     		ldr	r3, .L11
 107 0002 9868     		ldr	r0, [r3, #8]
 180:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 108              		.loc 1 180 0
 109 0004 7047     		bx	lr
 110              	.L12:
 111 0006 00BF     		.align	2
 112              	.L11:
 113 0008 00080650 		.word	1342572544
 114              		.cfi_endproc
 115              	.LFE112:
 117              		.section	.text.RNG_ITConfig,"ax",%progbits
 118              		.align	2
 119              		.global	RNG_ITConfig
 120              		.thumb
 121              		.thumb_func
 123              	RNG_ITConfig:
 124              	.LFB113:
 181:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 182:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 183:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 184:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @}
 185:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 186:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 187:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /** @defgroup RNG_Group3 Interrupts and flags management functions
 188:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *  @brief   Interrupts and flags management functions
 189:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *
 190:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @verbatim   
 191:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================
 192:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****              ##### Interrupts and flags management functions #####
 193:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============================================================================  
 194:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 195:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  [..] This section provides functions allowing to configure the RNG Interrupts and 
 196:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       to get the status and clear flags and Interrupts pending bits.
 197:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 198:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  [..] The RNG provides 3 Interrupts sources and 3 Flags:
 199:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 200:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *** Flags : ***
 201:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ===============
 202:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  [..] 
 203:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     (#) RNG_FLAG_DRDY :  In the case of the RNG_DR register contains valid 
 204:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****         random data. it is cleared by reading the valid data(using 
 205:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****         RNG_GetRandomNumber() function).
 206:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 207:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     (#) RNG_FLAG_CECS : In the case of a seed error detection. 
 208:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       
 209:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     (#) RNG_FLAG_SECS : In the case of a clock error detection.
 210:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****               
 211:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *** Interrupts ***
 212:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ==================
 213:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  [..] If enabled, an RNG interrupt is pending :
 214:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     
 215:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    (#) In the case of the RNG_DR register contains valid random data. 
 216:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****        This interrupt source is cleared once the RNG_DR register has been read 
 217:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****        (using RNG_GetRandomNumber() function) until a new valid value is 
 218:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****        computed; or 
 219:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    (#) In the case of a seed error : One of the following faulty sequences has 
 220:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****        been detected:
 221:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****        (++) More than 64 consecutive bits at the same value (0 or 1)
 222:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****        (++) More than 32 consecutive alternance of 0 and 1 (0101010101...01)
 223:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****        This interrupt source is cleared using RNG_ClearITPendingBit(RNG_IT_SEI)
 224:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****        function; or
 225:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    (#) In the case of a clock error : the PLL48CLK (RNG peripheral clock source) 
 226:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****        was not correctly detected (fPLL48CLK< fHCLK/16). This interrupt source is
 227:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****        cleared using RNG_ClearITPendingBit(RNG_IT_CEI) function.
 228:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****        -@- note In this case, User have to check that the clock controller is 
 229:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****            correctly configured to provide the RNG clock. 
 230:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 231:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  *** Managing the RNG controller events : ***
 232:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  ============================================
 233:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****  [..] The user should identify which mode will be used in his application to manage 
 234:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****       the RNG controller events: Polling mode or Interrupt mode.
 235:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 236:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    (#) In the Polling Mode it is advised to use the following functions:
 237:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****        (++) RNG_GetFlagStatus() : to check if flags events occur. 
 238:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****        (++) RNG_ClearFlag()     : to clear the flags events.
 239:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 240:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****        -@@- RNG_FLAG_DRDY can not be cleared by RNG_ClearFlag(). it is cleared only 
 241:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****             by reading the Random number data.      
 242:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 243:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****    (#)  In the Interrupt Mode it is advised to use the following functions:
 244:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****         (++) RNG_ITConfig()       : to enable or disable the interrupt source.
 245:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****         (++) RNG_GetITStatus()    : to check if Interrupt occurs.
 246:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****         (++) RNG_ClearITPendingBit() : to clear the Interrupt pending Bit 
 247:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****              (corresponding Flag). 
 248:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   
 249:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** @endverbatim
 250:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @{
 251:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */ 
 252:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 253:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 254:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Enables or disables the RNG interrupt.
 255:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   The RNG provides 3 interrupt sources,
 256:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           - Computed data is ready event (DRDY), and           
 257:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           - Seed error Interrupt (SEI) and 
 258:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *           - Clock error Interrupt (CEI), 
 259:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         all these interrupts sources are enabled by setting the IE bit in 
 260:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         CR register. However, each interrupt have its specific status bit
 261:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         (see RNG_GetITStatus() function) and clear bit except the DRDY event
 262:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         (see RNG_ClearITPendingBit() function).
 263:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  NewState: new state of the RNG interrupt.
 264:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be: ENABLE or DISABLE.
 265:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval None
 266:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 267:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** void RNG_ITConfig(FunctionalState NewState)
 268:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 125              		.loc 1 268 0
 126              		.cfi_startproc
 127              		@ args = 0, pretend = 0, frame = 0
 128              		@ frame_needed = 0, uses_anonymous_args = 0
 129              		@ link register save eliminated.
 130              	.LVL3:
 269:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 270:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 271:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   if (NewState != DISABLE)
 273:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 274:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* Enable the RNG interrupt */
 275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     RNG->CR |= RNG_CR_IE;
 131              		.loc 1 275 0
 132 0000 054A     		ldr	r2, .L17
 133 0002 1368     		ldr	r3, [r2]
 272:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 134              		.loc 1 272 0
 135 0004 18B9     		cbnz	r0, .L16
 276:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 277:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   else
 278:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 279:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* Disable the RNG interrupt */
 280:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     RNG->CR &= ~RNG_CR_IE;
 136              		.loc 1 280 0
 137 0006 23F00803 		bic	r3, r3, #8
 138 000a 1360     		str	r3, [r2]
 139 000c 7047     		bx	lr
 140              	.L16:
 275:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 141              		.loc 1 275 0
 142 000e 43F00803 		orr	r3, r3, #8
 143 0012 1360     		str	r3, [r2]
 144 0014 7047     		bx	lr
 145              	.L18:
 146 0016 00BF     		.align	2
 147              	.L17:
 148 0018 00080650 		.word	1342572544
 149              		.cfi_endproc
 150              	.LFE113:
 152              		.section	.text.RNG_GetFlagStatus,"ax",%progbits
 153              		.align	2
 154              		.global	RNG_GetFlagStatus
 155              		.thumb
 156              		.thumb_func
 158              	RNG_GetFlagStatus:
 159              	.LFB114:
 281:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 282:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 283:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 284:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 285:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Checks whether the specified RNG flag is set or not.
 286:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  RNG_FLAG: specifies the RNG flag to check.
 287:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be one of the following values:
 288:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_DRDY: Data Ready flag.
 289:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_CECS: Clock Error Current flag.
 290:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_SECS: Seed Error Current flag.
 291:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval The new state of RNG_FLAG (SET or RESET).
 292:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 293:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** FlagStatus RNG_GetFlagStatus(uint8_t RNG_FLAG)
 294:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 160              		.loc 1 294 0
 161              		.cfi_startproc
 162              		@ args = 0, pretend = 0, frame = 0
 163              		@ frame_needed = 0, uses_anonymous_args = 0
 164              		@ link register save eliminated.
 165              	.LVL4:
 295:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   FlagStatus bitstatus = RESET;
 296:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 297:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_RNG_GET_FLAG(RNG_FLAG));
 298:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 299:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the status of the specified RNG flag */
 300:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
 166              		.loc 1 300 0
 167 0000 034B     		ldr	r3, .L20
 168 0002 5B68     		ldr	r3, [r3, #4]
 169              	.LVL5:
 170 0004 1842     		tst	r0, r3
 301:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 302:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* RNG_FLAG is set */
 303:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     bitstatus = SET;
 304:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 305:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   else
 306:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 307:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* RNG_FLAG is reset */
 308:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     bitstatus = RESET;
 309:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 310:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Return the RNG_FLAG status */
 311:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   return  bitstatus;
 312:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 171              		.loc 1 312 0
 172 0006 14BF     		ite	ne
 173 0008 0120     		movne	r0, #1
 174              	.LVL6:
 175 000a 0020     		moveq	r0, #0
 176 000c 7047     		bx	lr
 177              	.L21:
 178 000e 00BF     		.align	2
 179              	.L20:
 180 0010 00080650 		.word	1342572544
 181              		.cfi_endproc
 182              	.LFE114:
 184              		.section	.text.RNG_ClearFlag,"ax",%progbits
 185              		.align	2
 186              		.global	RNG_ClearFlag
 187              		.thumb
 188              		.thumb_func
 190              	RNG_ClearFlag:
 191              	.LFB115:
 313:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 314:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 315:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 316:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Clears the RNG flags.
 317:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  RNG_FLAG: specifies the flag to clear. 
 318:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be any combination of the following values:
 319:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_CECS: Clock Error Current flag.
 320:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_FLAG_SECS: Seed Error Current flag.
 321:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @note   RNG_FLAG_DRDY can not be cleared by RNG_ClearFlag() function. 
 322:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         This flag is cleared only by reading the Random number data (using 
 323:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *         RNG_GetRandomNumber() function).                           
 324:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval None
 325:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 326:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** void RNG_ClearFlag(uint8_t RNG_FLAG)
 327:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 192              		.loc 1 327 0
 193              		.cfi_startproc
 194              		@ args = 0, pretend = 0, frame = 0
 195              		@ frame_needed = 0, uses_anonymous_args = 0
 196              		@ link register save eliminated.
 197              	.LVL7:
 328:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 329:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
 330:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Clear the selected RNG flags */
 331:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
 198              		.loc 1 331 0
 199 0000 024B     		ldr	r3, .L23
 200 0002 6FEA0010 		mvn	r0, r0, lsl #4
 201              	.LVL8:
 202 0006 5860     		str	r0, [r3, #4]
 203 0008 7047     		bx	lr
 204              	.L24:
 205 000a 00BF     		.align	2
 206              	.L23:
 207 000c 00080650 		.word	1342572544
 208              		.cfi_endproc
 209              	.LFE115:
 211              		.section	.text.RNG_GetITStatus,"ax",%progbits
 212              		.align	2
 213              		.global	RNG_GetITStatus
 214              		.thumb
 215              		.thumb_func
 217              	RNG_GetITStatus:
 218              	.LFB116:
 332:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 333:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 334:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 335:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Checks whether the specified RNG interrupt has occurred or not.
 336:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  RNG_IT: specifies the RNG interrupt source to check.
 337:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be one of the following values:
 338:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_IT_CEI: Clock Error Interrupt.
 339:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_IT_SEI: Seed Error Interrupt.                   
 340:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval The new state of RNG_IT (SET or RESET).
 341:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 342:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** ITStatus RNG_GetITStatus(uint8_t RNG_IT)
 343:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 219              		.loc 1 343 0
 220              		.cfi_startproc
 221              		@ args = 0, pretend = 0, frame = 0
 222              		@ frame_needed = 0, uses_anonymous_args = 0
 223              		@ link register save eliminated.
 224              	.LVL9:
 344:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   ITStatus bitstatus = RESET;
 345:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 346:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_RNG_GET_IT(RNG_IT));
 347:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 348:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the status of the specified RNG interrupt */
 349:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
 225              		.loc 1 349 0
 226 0000 034B     		ldr	r3, .L26
 227 0002 5B68     		ldr	r3, [r3, #4]
 228              	.LVL10:
 229 0004 1842     		tst	r0, r3
 350:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 351:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* RNG_IT is set */
 352:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     bitstatus = SET;
 353:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 354:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   else
 355:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   {
 356:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     /* RNG_IT is reset */
 357:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****     bitstatus = RESET;
 358:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   }
 359:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Return the RNG_IT status */
 360:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   return bitstatus;
 361:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** }
 230              		.loc 1 361 0
 231 0006 14BF     		ite	ne
 232 0008 0120     		movne	r0, #1
 233              	.LVL11:
 234 000a 0020     		moveq	r0, #0
 235 000c 7047     		bx	lr
 236              	.L27:
 237 000e 00BF     		.align	2
 238              	.L26:
 239 0010 00080650 		.word	1342572544
 240              		.cfi_endproc
 241              	.LFE116:
 243              		.section	.text.RNG_ClearITPendingBit,"ax",%progbits
 244              		.align	2
 245              		.global	RNG_ClearITPendingBit
 246              		.thumb
 247              		.thumb_func
 249              	RNG_ClearITPendingBit:
 250              	.LFB117:
 362:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 363:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 364:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** /**
 365:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @brief  Clears the RNG interrupt pending bit(s).
 366:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @param  RNG_IT: specifies the RNG interrupt pending bit(s) to clear.
 367:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *          This parameter can be any combination of the following values:
 368:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_IT_CEI: Clock Error Interrupt.
 369:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   *            @arg RNG_IT_SEI: Seed Error Interrupt.
 370:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   * @retval None
 371:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   */
 372:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** void RNG_ClearITPendingBit(uint8_t RNG_IT)
 373:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** {
 251              		.loc 1 373 0
 252              		.cfi_startproc
 253              		@ args = 0, pretend = 0, frame = 0
 254              		@ frame_needed = 0, uses_anonymous_args = 0
 255              		@ link register save eliminated.
 256              	.LVL12:
 374:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Check the parameters */
 375:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   assert_param(IS_RNG_IT(RNG_IT));
 376:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c **** 
 377:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   /* Clear the selected RNG interrupt pending bit */
 378:libs/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rng.c ****   RNG->SR = (uint8_t)~RNG_IT;
 257              		.loc 1 378 0
 258 0000 C043     		mvns	r0, r0
 259              	.LVL13:
 260 0002 024B     		ldr	r3, .L29
 261 0004 C0B2     		uxtb	r0, r0
 262 0006 5860     		str	r0, [r3, #4]
 263 0008 7047     		bx	lr
 264              	.L30:
 265 000a 00BF     		.align	2
 266              	.L29:
 267 000c 00080650 		.word	1342572544
 268              		.cfi_endproc
 269              	.LFE117:
 271              		.text
 272              	.Letext0:
 273              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\4.9 2014q4\\arm-none-eabi\\include\\mach
 274              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\4.9 2014q4\\arm-none-eabi\\include\\stdi
 275              		.file 4 "libs/Device/STM32F4xx/Include/stm32f4xx.h"
 276              		.file 5 "libs/CMSIS/Include/core_cm4.h"
 277              		.file 6 "libs/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_rcc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_rng.c
C:\Users\Student\AppData\Local\Temp\ccGaptZi.s:20     .text.RNG_DeInit:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccGaptZi.s:25     .text.RNG_DeInit:00000000 RNG_DeInit
C:\Users\Student\AppData\Local\Temp\ccGaptZi.s:58     .text.RNG_Cmd:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccGaptZi.s:63     .text.RNG_Cmd:00000000 RNG_Cmd
C:\Users\Student\AppData\Local\Temp\ccGaptZi.s:88     .text.RNG_Cmd:00000018 $d
C:\Users\Student\AppData\Local\Temp\ccGaptZi.s:93     .text.RNG_GetRandomNumber:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccGaptZi.s:98     .text.RNG_GetRandomNumber:00000000 RNG_GetRandomNumber
C:\Users\Student\AppData\Local\Temp\ccGaptZi.s:113    .text.RNG_GetRandomNumber:00000008 $d
C:\Users\Student\AppData\Local\Temp\ccGaptZi.s:118    .text.RNG_ITConfig:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccGaptZi.s:123    .text.RNG_ITConfig:00000000 RNG_ITConfig
C:\Users\Student\AppData\Local\Temp\ccGaptZi.s:148    .text.RNG_ITConfig:00000018 $d
C:\Users\Student\AppData\Local\Temp\ccGaptZi.s:153    .text.RNG_GetFlagStatus:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccGaptZi.s:158    .text.RNG_GetFlagStatus:00000000 RNG_GetFlagStatus
C:\Users\Student\AppData\Local\Temp\ccGaptZi.s:180    .text.RNG_GetFlagStatus:00000010 $d
C:\Users\Student\AppData\Local\Temp\ccGaptZi.s:185    .text.RNG_ClearFlag:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccGaptZi.s:190    .text.RNG_ClearFlag:00000000 RNG_ClearFlag
C:\Users\Student\AppData\Local\Temp\ccGaptZi.s:207    .text.RNG_ClearFlag:0000000c $d
C:\Users\Student\AppData\Local\Temp\ccGaptZi.s:212    .text.RNG_GetITStatus:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccGaptZi.s:217    .text.RNG_GetITStatus:00000000 RNG_GetITStatus
C:\Users\Student\AppData\Local\Temp\ccGaptZi.s:239    .text.RNG_GetITStatus:00000010 $d
C:\Users\Student\AppData\Local\Temp\ccGaptZi.s:244    .text.RNG_ClearITPendingBit:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccGaptZi.s:249    .text.RNG_ClearITPendingBit:00000000 RNG_ClearITPendingBit
C:\Users\Student\AppData\Local\Temp\ccGaptZi.s:267    .text.RNG_ClearITPendingBit:0000000c $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_AHB2PeriphResetCmd
