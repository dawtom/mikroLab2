   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 2
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"syscalls.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text._exit,"ax",%progbits
  20              		.align	2
  21              		.global	_exit
  22              		.thumb
  23              		.thumb_func
  25              	_exit:
  26              	.LFB110:
  27              		.file 1 "sys/syscalls.c"
   1:sys/syscalls.c **** #include "syscalls.h"
   2:sys/syscalls.c **** #include "dbgu.h"
   3:sys/syscalls.c **** #include "stm32f4xx.h"
   4:sys/syscalls.c **** #include "FreeRTOS.h"
   5:sys/syscalls.c **** #include <unistd.h>
   6:sys/syscalls.c **** #include <stdlib.h>
   7:sys/syscalls.c **** #include <errno.h>
   8:sys/syscalls.c **** #include <string.h>
   9:sys/syscalls.c **** #include <sys/stat.h>
  10:sys/syscalls.c **** #include <sys/time.h>
  11:sys/syscalls.c **** 
  12:sys/syscalls.c **** size_t   __malloc_margin = 256;
  13:sys/syscalls.c **** char    *__brkval;
  14:sys/syscalls.c **** 
  15:sys/syscalls.c **** void _exit(int code)
  16:sys/syscalls.c **** {
  28              		.loc 1 16 0
  29              		.cfi_startproc
  30              		@ Volatile: function does not return.
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34              	.LVL0:
  35              	.L2:
  17:sys/syscalls.c ****     for (;;);
  36              		.loc 1 17 0 discriminator 1
  37 0000 FEE7     		b	.L2
  38              		.cfi_endproc
  39              	.LFE110:
  41 0002 00BF     		.section	.text._read_r,"ax",%progbits
  42              		.align	2
  43              		.global	_read_r
  44              		.thumb
  45              		.thumb_func
  47              	_read_r:
  48              	.LFB111:
  18:sys/syscalls.c **** }
  19:sys/syscalls.c **** 
  20:sys/syscalls.c **** 
  21:sys/syscalls.c **** ssize_t _read_r(struct _reent *r, int fd, void *ptr, size_t len)
  22:sys/syscalls.c **** {
  49              		.loc 1 22 0
  50              		.cfi_startproc
  51              		@ args = 0, pretend = 0, frame = 0
  52              		@ frame_needed = 0, uses_anonymous_args = 0
  53              	.LVL1:
  54 0000 70B5     		push	{r4, r5, r6, lr}
  55              	.LCFI0:
  56              		.cfi_def_cfa_offset 16
  57              		.cfi_offset 4, -16
  58              		.cfi_offset 5, -12
  59              		.cfi_offset 6, -8
  60              		.cfi_offset 14, -4
  61              	.LBB4:
  23:sys/syscalls.c **** 	char *pTemp = (char*)ptr;
  24:sys/syscalls.c **** 	for(int i=0;i<len;i++)
  62              		.loc 1 24 0
  63 0002 1E46     		mov	r6, r3
  64 0004 3BB1     		cbz	r3, .L8
  65 0006 1446     		mov	r4, r2
  66              	.LVL2:
  67 0008 D518     		adds	r5, r2, r3
  68              	.LVL3:
  69              	.L5:
  25:sys/syscalls.c **** 	{
  26:sys/syscalls.c **** 		*pTemp = debug_waitkey();
  70              		.loc 1 26 0 discriminator 3
  71 000a FFF7FEFF 		bl	debug_waitkey
  72              	.LVL4:
  73 000e 04F8010B 		strb	r0, [r4], #1
  74              	.LVL5:
  24:sys/syscalls.c **** 	{
  75              		.loc 1 24 0 discriminator 3
  76 0012 AC42     		cmp	r4, r5
  77 0014 F9D1     		bne	.L5
  78              	.LVL6:
  79              	.L8:
  80              	.LBE4:
  27:sys/syscalls.c **** 		pTemp++;
  28:sys/syscalls.c **** 	}
  29:sys/syscalls.c ****     return len;
  30:sys/syscalls.c **** }
  81              		.loc 1 30 0
  82 0016 3046     		mov	r0, r6
  83 0018 70BD     		pop	{r4, r5, r6, pc}
  84              		.cfi_endproc
  85              	.LFE111:
  87 001a 00BF     		.section	.text._write_r,"ax",%progbits
  88              		.align	2
  89              		.global	_write_r
  90              		.thumb
  91              		.thumb_func
  93              	_write_r:
  94              	.LFB112:
  31:sys/syscalls.c **** 
  32:sys/syscalls.c **** 
  33:sys/syscalls.c **** ssize_t _write_r(struct _reent *r, int fd, const void *ptr, size_t len)
  34:sys/syscalls.c **** {
  95              		.loc 1 34 0
  96              		.cfi_startproc
  97              		@ args = 0, pretend = 0, frame = 0
  98              		@ frame_needed = 0, uses_anonymous_args = 0
  99              	.LVL7:
 100 0000 70B5     		push	{r4, r5, r6, lr}
 101              	.LCFI1:
 102              		.cfi_def_cfa_offset 16
 103              		.cfi_offset 4, -16
 104              		.cfi_offset 5, -12
 105              		.cfi_offset 6, -8
 106              		.cfi_offset 14, -4
  35:sys/syscalls.c **** 	int cntr = len;
  36:sys/syscalls.c **** 	char *pTemp = (char*)ptr;
  37:sys/syscalls.c **** 	while(cntr--)
 107              		.loc 1 37 0
 108 0002 1E46     		mov	r6, r3
 109 0004 3BB1     		cbz	r3, .L16
 110 0006 1546     		mov	r5, r2
 111              	.LVL8:
 112 0008 1C46     		mov	r4, r3
 113              	.LVL9:
 114              	.L12:
  38:sys/syscalls.c **** 		debug_chr(*pTemp++);
 115              		.loc 1 38 0
 116 000a 15F8010B 		ldrb	r0, [r5], #1	@ zero_extendqisi2
 117              	.LVL10:
 118 000e FFF7FEFF 		bl	debug_chr
 119              	.LVL11:
  37:sys/syscalls.c **** 		debug_chr(*pTemp++);
 120              		.loc 1 37 0
 121 0012 013C     		subs	r4, r4, #1
 122 0014 F9D1     		bne	.L12
 123              	.LVL12:
 124              	.L16:
  39:sys/syscalls.c ****     return len;
  40:sys/syscalls.c **** }
 125              		.loc 1 40 0
 126 0016 3046     		mov	r0, r6
 127 0018 70BD     		pop	{r4, r5, r6, pc}
 128              		.cfi_endproc
 129              	.LFE112:
 131 001a 00BF     		.section	.text._lseek_r,"ax",%progbits
 132              		.align	2
 133              		.global	_lseek_r
 134              		.thumb
 135              		.thumb_func
 137              	_lseek_r:
 138              	.LFB113:
  41:sys/syscalls.c **** 
  42:sys/syscalls.c **** 
  43:sys/syscalls.c **** off_t _lseek_r(struct _reent *r, int fd, _off_t ptr, int dir)
  44:sys/syscalls.c **** {
 139              		.loc 1 44 0
 140              		.cfi_startproc
 141              		@ args = 0, pretend = 0, frame = 0
 142              		@ frame_needed = 0, uses_anonymous_args = 0
 143              		@ link register save eliminated.
 144              	.LVL13:
  45:sys/syscalls.c ****     fd  = fd;
  46:sys/syscalls.c ****     ptr = ptr;
  47:sys/syscalls.c ****     dir = dir;
  48:sys/syscalls.c ****     r->_errno = ENOSYS;
 145              		.loc 1 48 0
 146 0000 5823     		movs	r3, #88
 147              	.LVL14:
 148 0002 0360     		str	r3, [r0]
  49:sys/syscalls.c ****     return -1;
  50:sys/syscalls.c **** }
 149              		.loc 1 50 0
 150 0004 4FF0FF30 		mov	r0, #-1
 151              	.LVL15:
 152 0008 7047     		bx	lr
 153              		.cfi_endproc
 154              	.LFE113:
 156 000a 00BF     		.section	.text._close_r,"ax",%progbits
 157              		.align	2
 158              		.global	_close_r
 159              		.thumb
 160              		.thumb_func
 162              	_close_r:
 163              	.LFB114:
  51:sys/syscalls.c **** 
  52:sys/syscalls.c **** 
  53:sys/syscalls.c **** int _close_r(struct _reent *r, int fd)
  54:sys/syscalls.c **** {
 164              		.loc 1 54 0
 165              		.cfi_startproc
 166              		@ args = 0, pretend = 0, frame = 0
 167              		@ frame_needed = 0, uses_anonymous_args = 0
 168              		@ link register save eliminated.
 169              	.LVL16:
  55:sys/syscalls.c ****     fd = fd;
  56:sys/syscalls.c ****     r->_errno = ENOSYS;
 170              		.loc 1 56 0
 171 0000 5823     		movs	r3, #88
 172 0002 0360     		str	r3, [r0]
  57:sys/syscalls.c ****     return -1;
  58:sys/syscalls.c **** }
 173              		.loc 1 58 0
 174 0004 4FF0FF30 		mov	r0, #-1
 175              	.LVL17:
 176 0008 7047     		bx	lr
 177              		.cfi_endproc
 178              	.LFE114:
 180              		.section	.text._fstat_r,"ax",%progbits
 181              		.align	2
 182              		.global	_fstat_r
 183              		.thumb
 184              		.thumb_func
 186              	_fstat_r:
 187              	.LFB115:
  59:sys/syscalls.c **** 
  60:sys/syscalls.c **** 
  61:sys/syscalls.c **** int _fstat_r(struct _reent *r, int fd, struct stat *st)
  62:sys/syscalls.c **** {
 188              		.loc 1 62 0
 189              		.cfi_startproc
 190              		@ args = 0, pretend = 0, frame = 0
 191              		@ frame_needed = 0, uses_anonymous_args = 0
 192              		@ link register save eliminated.
 193              	.LVL18:
  63:sys/syscalls.c ****     if ((fd >= STDIN_FILENO) && (fd <= STDERR_FILENO)) {
 194              		.loc 1 63 0
 195 0000 0229     		cmp	r1, #2
 196 0002 04D8     		bhi	.L21
  64:sys/syscalls.c ****       st->st_mode = S_IFCHR;
 197              		.loc 1 64 0
 198 0004 4FF40053 		mov	r3, #8192
 199 0008 5360     		str	r3, [r2, #4]
  65:sys/syscalls.c ****       return 0;
 200              		.loc 1 65 0
 201 000a 0020     		movs	r0, #0
 202              	.LVL19:
 203 000c 7047     		bx	lr
 204              	.LVL20:
 205              	.L21:
  66:sys/syscalls.c ****     }
  67:sys/syscalls.c **** 
  68:sys/syscalls.c ****     r->_errno = ENOSYS;
 206              		.loc 1 68 0
 207 000e 5823     		movs	r3, #88
 208 0010 0360     		str	r3, [r0]
  69:sys/syscalls.c ****     return -1;
 209              		.loc 1 69 0
 210 0012 4FF0FF30 		mov	r0, #-1
 211              	.LVL21:
  70:sys/syscalls.c **** }
 212              		.loc 1 70 0
 213 0016 7047     		bx	lr
 214              		.cfi_endproc
 215              	.LFE115:
 217              		.section	.text._isatty_r,"ax",%progbits
 218              		.align	2
 219              		.global	_isatty_r
 220              		.thumb
 221              		.thumb_func
 223              	_isatty_r:
 224              	.LFB116:
  71:sys/syscalls.c **** 
  72:sys/syscalls.c **** 
  73:sys/syscalls.c **** int _isatty_r(struct _reent *r, int fd)
  74:sys/syscalls.c **** {
 225              		.loc 1 74 0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 0
 228              		@ frame_needed = 0, uses_anonymous_args = 0
 229              		@ link register save eliminated.
 230              	.LVL22:
  75:sys/syscalls.c ****     r  = r;
  76:sys/syscalls.c ****     fd = fd;
  77:sys/syscalls.c ****     return 1;
  78:sys/syscalls.c **** }
 231              		.loc 1 78 0
 232 0000 0120     		movs	r0, #1
 233              	.LVL23:
 234 0002 7047     		bx	lr
 235              		.cfi_endproc
 236              	.LFE116:
 238              		.section	.text._sbrk_r,"ax",%progbits
 239              		.align	2
 240              		.global	_sbrk_r
 241              		.thumb
 242              		.thumb_func
 244              	_sbrk_r:
 245              	.LFB117:
  79:sys/syscalls.c **** 
  80:sys/syscalls.c **** 
  81:sys/syscalls.c **** void *_sbrk_r(struct _reent *r, ptrdiff_t incr)
  82:sys/syscalls.c **** {
 246              		.loc 1 82 0
 247              		.cfi_startproc
 248              		@ args = 0, pretend = 0, frame = 0
 249              		@ frame_needed = 0, uses_anonymous_args = 0
 250              		@ link register save eliminated.
 251              	.LVL24:
 252 0000 30B4     		push	{r4, r5}
 253              	.LCFI2:
 254              		.cfi_def_cfa_offset 8
 255              		.cfi_offset 4, -8
 256              		.cfi_offset 5, -4
  83:sys/syscalls.c ****     extern char end;   // provided by the linker script
  84:sys/syscalls.c **** 
  85:sys/syscalls.c ****     if (__brkval == 0)
 257              		.loc 1 85 0
 258 0002 0C4C     		ldr	r4, .L31
 259 0004 2368     		ldr	r3, [r4]
 260 0006 8BB1     		cbz	r3, .L29
 261              	.L25:
  86:sys/syscalls.c ****         __brkval = &end;
  87:sys/syscalls.c **** 
  88:sys/syscalls.c ****     if (__brkval + incr > (char*)__get_MSP() - __malloc_margin) {
 262              		.loc 1 88 0
 263 0008 1944     		add	r1, r1, r3
 264              	.LVL25:
 265              	.LBB5:
 266              	.LBB6:
 267              		.file 2 "libs/CMSIS/Include/core_cmFunc.h"
   1:libs/CMSIS/Include/core_cmFunc.h **** /**************************************************************************//**
   2:libs/CMSIS/Include/core_cmFunc.h ****  * @file     core_cmFunc.h
   3:libs/CMSIS/Include/core_cmFunc.h ****  * @brief    CMSIS Cortex-M Core Function Access Header File
   4:libs/CMSIS/Include/core_cmFunc.h ****  * @version  V2.10
   5:libs/CMSIS/Include/core_cmFunc.h ****  * @date     26. July 2011
   6:libs/CMSIS/Include/core_cmFunc.h ****  *
   7:libs/CMSIS/Include/core_cmFunc.h ****  * @note
   8:libs/CMSIS/Include/core_cmFunc.h ****  * Copyright (C) 2009-2011 ARM Limited. All rights reserved.
   9:libs/CMSIS/Include/core_cmFunc.h ****  *
  10:libs/CMSIS/Include/core_cmFunc.h ****  * @par
  11:libs/CMSIS/Include/core_cmFunc.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:libs/CMSIS/Include/core_cmFunc.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:libs/CMSIS/Include/core_cmFunc.h ****  * within development tools that are supporting such ARM based processors. 
  14:libs/CMSIS/Include/core_cmFunc.h ****  *
  15:libs/CMSIS/Include/core_cmFunc.h ****  * @par
  16:libs/CMSIS/Include/core_cmFunc.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:libs/CMSIS/Include/core_cmFunc.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:libs/CMSIS/Include/core_cmFunc.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:libs/CMSIS/Include/core_cmFunc.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:libs/CMSIS/Include/core_cmFunc.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:libs/CMSIS/Include/core_cmFunc.h ****  *
  22:libs/CMSIS/Include/core_cmFunc.h ****  ******************************************************************************/
  23:libs/CMSIS/Include/core_cmFunc.h **** 
  24:libs/CMSIS/Include/core_cmFunc.h **** #ifndef __CORE_CMFUNC_H
  25:libs/CMSIS/Include/core_cmFunc.h **** #define __CORE_CMFUNC_H
  26:libs/CMSIS/Include/core_cmFunc.h **** 
  27:libs/CMSIS/Include/core_cmFunc.h **** 
  28:libs/CMSIS/Include/core_cmFunc.h **** /* ###########################  Core Function Access  ########################### */
  29:libs/CMSIS/Include/core_cmFunc.h **** /** \ingroup  CMSIS_Core_FunctionInterface   
  30:libs/CMSIS/Include/core_cmFunc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
  31:libs/CMSIS/Include/core_cmFunc.h ****   @{
  32:libs/CMSIS/Include/core_cmFunc.h ****  */
  33:libs/CMSIS/Include/core_cmFunc.h **** 
  34:libs/CMSIS/Include/core_cmFunc.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:libs/CMSIS/Include/core_cmFunc.h **** /* ARM armcc specific functions */
  36:libs/CMSIS/Include/core_cmFunc.h **** 
  37:libs/CMSIS/Include/core_cmFunc.h **** #if (__ARMCC_VERSION < 400677)
  38:libs/CMSIS/Include/core_cmFunc.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:libs/CMSIS/Include/core_cmFunc.h **** #endif
  40:libs/CMSIS/Include/core_cmFunc.h **** 
  41:libs/CMSIS/Include/core_cmFunc.h **** /* intrinsic void __enable_irq();     */
  42:libs/CMSIS/Include/core_cmFunc.h **** /* intrinsic void __disable_irq();    */
  43:libs/CMSIS/Include/core_cmFunc.h **** 
  44:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get Control Register
  45:libs/CMSIS/Include/core_cmFunc.h **** 
  46:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the content of the Control Register.
  47:libs/CMSIS/Include/core_cmFunc.h **** 
  48:libs/CMSIS/Include/core_cmFunc.h ****     \return               Control Register value
  49:libs/CMSIS/Include/core_cmFunc.h ****  */
  50:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE uint32_t __get_CONTROL(void)
  51:libs/CMSIS/Include/core_cmFunc.h **** {
  52:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  53:libs/CMSIS/Include/core_cmFunc.h ****   return(__regControl);
  54:libs/CMSIS/Include/core_cmFunc.h **** }
  55:libs/CMSIS/Include/core_cmFunc.h **** 
  56:libs/CMSIS/Include/core_cmFunc.h **** 
  57:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Set Control Register
  58:libs/CMSIS/Include/core_cmFunc.h **** 
  59:libs/CMSIS/Include/core_cmFunc.h ****     This function writes the given value to the Control Register.
  60:libs/CMSIS/Include/core_cmFunc.h **** 
  61:libs/CMSIS/Include/core_cmFunc.h ****     \param [in]    control  Control Register value to set
  62:libs/CMSIS/Include/core_cmFunc.h ****  */
  63:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE void __set_CONTROL(uint32_t control)
  64:libs/CMSIS/Include/core_cmFunc.h **** {
  65:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regControl         __ASM("control");
  66:libs/CMSIS/Include/core_cmFunc.h ****   __regControl = control;
  67:libs/CMSIS/Include/core_cmFunc.h **** }
  68:libs/CMSIS/Include/core_cmFunc.h **** 
  69:libs/CMSIS/Include/core_cmFunc.h **** 
  70:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get ISPR Register
  71:libs/CMSIS/Include/core_cmFunc.h **** 
  72:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the content of the ISPR Register.
  73:libs/CMSIS/Include/core_cmFunc.h **** 
  74:libs/CMSIS/Include/core_cmFunc.h ****     \return               ISPR Register value
  75:libs/CMSIS/Include/core_cmFunc.h ****  */
  76:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE uint32_t __get_IPSR(void)
  77:libs/CMSIS/Include/core_cmFunc.h **** {
  78:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regIPSR          __ASM("ipsr");
  79:libs/CMSIS/Include/core_cmFunc.h ****   return(__regIPSR);
  80:libs/CMSIS/Include/core_cmFunc.h **** }
  81:libs/CMSIS/Include/core_cmFunc.h **** 
  82:libs/CMSIS/Include/core_cmFunc.h **** 
  83:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get APSR Register
  84:libs/CMSIS/Include/core_cmFunc.h **** 
  85:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the content of the APSR Register.
  86:libs/CMSIS/Include/core_cmFunc.h **** 
  87:libs/CMSIS/Include/core_cmFunc.h ****     \return               APSR Register value
  88:libs/CMSIS/Include/core_cmFunc.h ****  */
  89:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE uint32_t __get_APSR(void)
  90:libs/CMSIS/Include/core_cmFunc.h **** {
  91:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regAPSR          __ASM("apsr");
  92:libs/CMSIS/Include/core_cmFunc.h ****   return(__regAPSR);
  93:libs/CMSIS/Include/core_cmFunc.h **** }
  94:libs/CMSIS/Include/core_cmFunc.h **** 
  95:libs/CMSIS/Include/core_cmFunc.h **** 
  96:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get xPSR Register
  97:libs/CMSIS/Include/core_cmFunc.h **** 
  98:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the content of the xPSR Register.
  99:libs/CMSIS/Include/core_cmFunc.h **** 
 100:libs/CMSIS/Include/core_cmFunc.h ****     \return               xPSR Register value
 101:libs/CMSIS/Include/core_cmFunc.h ****  */
 102:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE uint32_t __get_xPSR(void)
 103:libs/CMSIS/Include/core_cmFunc.h **** {
 104:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regXPSR          __ASM("xpsr");
 105:libs/CMSIS/Include/core_cmFunc.h ****   return(__regXPSR);
 106:libs/CMSIS/Include/core_cmFunc.h **** }
 107:libs/CMSIS/Include/core_cmFunc.h **** 
 108:libs/CMSIS/Include/core_cmFunc.h **** 
 109:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 110:libs/CMSIS/Include/core_cmFunc.h **** 
 111:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 112:libs/CMSIS/Include/core_cmFunc.h **** 
 113:libs/CMSIS/Include/core_cmFunc.h ****     \return               PSP Register value
 114:libs/CMSIS/Include/core_cmFunc.h ****  */
 115:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE uint32_t __get_PSP(void)
 116:libs/CMSIS/Include/core_cmFunc.h **** {
 117:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 118:libs/CMSIS/Include/core_cmFunc.h ****   return(__regProcessStackPointer);
 119:libs/CMSIS/Include/core_cmFunc.h **** }
 120:libs/CMSIS/Include/core_cmFunc.h **** 
 121:libs/CMSIS/Include/core_cmFunc.h **** 
 122:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 123:libs/CMSIS/Include/core_cmFunc.h **** 
 124:libs/CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 125:libs/CMSIS/Include/core_cmFunc.h **** 
 126:libs/CMSIS/Include/core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 127:libs/CMSIS/Include/core_cmFunc.h ****  */
 128:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE void __set_PSP(uint32_t topOfProcStack)
 129:libs/CMSIS/Include/core_cmFunc.h **** {
 130:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regProcessStackPointer  __ASM("psp");
 131:libs/CMSIS/Include/core_cmFunc.h ****   __regProcessStackPointer = topOfProcStack;
 132:libs/CMSIS/Include/core_cmFunc.h **** }
 133:libs/CMSIS/Include/core_cmFunc.h **** 
 134:libs/CMSIS/Include/core_cmFunc.h **** 
 135:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 136:libs/CMSIS/Include/core_cmFunc.h **** 
 137:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 138:libs/CMSIS/Include/core_cmFunc.h **** 
 139:libs/CMSIS/Include/core_cmFunc.h ****     \return               MSP Register value
 140:libs/CMSIS/Include/core_cmFunc.h ****  */
 141:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE uint32_t __get_MSP(void)
 142:libs/CMSIS/Include/core_cmFunc.h **** {
 143:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 144:libs/CMSIS/Include/core_cmFunc.h ****   return(__regMainStackPointer);
 145:libs/CMSIS/Include/core_cmFunc.h **** }
 146:libs/CMSIS/Include/core_cmFunc.h **** 
 147:libs/CMSIS/Include/core_cmFunc.h **** 
 148:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Set Main Stack Pointer
 149:libs/CMSIS/Include/core_cmFunc.h **** 
 150:libs/CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Main Stack Pointer (MSP).
 151:libs/CMSIS/Include/core_cmFunc.h **** 
 152:libs/CMSIS/Include/core_cmFunc.h ****     \param [in]    topOfMainStack  Main Stack Pointer value to set
 153:libs/CMSIS/Include/core_cmFunc.h ****  */
 154:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE void __set_MSP(uint32_t topOfMainStack)
 155:libs/CMSIS/Include/core_cmFunc.h **** {
 156:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regMainStackPointer     __ASM("msp");
 157:libs/CMSIS/Include/core_cmFunc.h ****   __regMainStackPointer = topOfMainStack;
 158:libs/CMSIS/Include/core_cmFunc.h **** }
 159:libs/CMSIS/Include/core_cmFunc.h **** 
 160:libs/CMSIS/Include/core_cmFunc.h **** 
 161:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get Priority Mask
 162:libs/CMSIS/Include/core_cmFunc.h **** 
 163:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the current state of the priority mask bit from the Priority Mask Registe
 164:libs/CMSIS/Include/core_cmFunc.h **** 
 165:libs/CMSIS/Include/core_cmFunc.h ****     \return               Priority Mask value
 166:libs/CMSIS/Include/core_cmFunc.h ****  */
 167:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE uint32_t __get_PRIMASK(void)
 168:libs/CMSIS/Include/core_cmFunc.h **** {
 169:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 170:libs/CMSIS/Include/core_cmFunc.h ****   return(__regPriMask);
 171:libs/CMSIS/Include/core_cmFunc.h **** }
 172:libs/CMSIS/Include/core_cmFunc.h **** 
 173:libs/CMSIS/Include/core_cmFunc.h **** 
 174:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Set Priority Mask
 175:libs/CMSIS/Include/core_cmFunc.h **** 
 176:libs/CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Priority Mask Register.
 177:libs/CMSIS/Include/core_cmFunc.h **** 
 178:libs/CMSIS/Include/core_cmFunc.h ****     \param [in]    priMask  Priority Mask
 179:libs/CMSIS/Include/core_cmFunc.h ****  */
 180:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 181:libs/CMSIS/Include/core_cmFunc.h **** {
 182:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regPriMask         __ASM("primask");
 183:libs/CMSIS/Include/core_cmFunc.h ****   __regPriMask = (priMask);
 184:libs/CMSIS/Include/core_cmFunc.h **** }
 185:libs/CMSIS/Include/core_cmFunc.h ****  
 186:libs/CMSIS/Include/core_cmFunc.h **** 
 187:libs/CMSIS/Include/core_cmFunc.h **** #if       (__CORTEX_M >= 0x03)
 188:libs/CMSIS/Include/core_cmFunc.h **** 
 189:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Enable FIQ
 190:libs/CMSIS/Include/core_cmFunc.h **** 
 191:libs/CMSIS/Include/core_cmFunc.h ****     This function enables FIQ interrupts by clearing the F-bit in the CPSR.
 192:libs/CMSIS/Include/core_cmFunc.h ****     Can only be executed in Privileged modes.
 193:libs/CMSIS/Include/core_cmFunc.h ****  */
 194:libs/CMSIS/Include/core_cmFunc.h **** #define __enable_fault_irq                __enable_fiq
 195:libs/CMSIS/Include/core_cmFunc.h **** 
 196:libs/CMSIS/Include/core_cmFunc.h **** 
 197:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Disable FIQ
 198:libs/CMSIS/Include/core_cmFunc.h **** 
 199:libs/CMSIS/Include/core_cmFunc.h ****     This function disables FIQ interrupts by setting the F-bit in the CPSR.
 200:libs/CMSIS/Include/core_cmFunc.h ****     Can only be executed in Privileged modes.
 201:libs/CMSIS/Include/core_cmFunc.h ****  */
 202:libs/CMSIS/Include/core_cmFunc.h **** #define __disable_fault_irq               __disable_fiq
 203:libs/CMSIS/Include/core_cmFunc.h **** 
 204:libs/CMSIS/Include/core_cmFunc.h **** 
 205:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get Base Priority
 206:libs/CMSIS/Include/core_cmFunc.h **** 
 207:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the current value of the Base Priority register.
 208:libs/CMSIS/Include/core_cmFunc.h **** 
 209:libs/CMSIS/Include/core_cmFunc.h ****     \return               Base Priority register value
 210:libs/CMSIS/Include/core_cmFunc.h ****  */
 211:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE uint32_t  __get_BASEPRI(void)
 212:libs/CMSIS/Include/core_cmFunc.h **** {
 213:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 214:libs/CMSIS/Include/core_cmFunc.h ****   return(__regBasePri);
 215:libs/CMSIS/Include/core_cmFunc.h **** }
 216:libs/CMSIS/Include/core_cmFunc.h **** 
 217:libs/CMSIS/Include/core_cmFunc.h **** 
 218:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Set Base Priority
 219:libs/CMSIS/Include/core_cmFunc.h **** 
 220:libs/CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Base Priority register.
 221:libs/CMSIS/Include/core_cmFunc.h **** 
 222:libs/CMSIS/Include/core_cmFunc.h ****     \param [in]    basePri  Base Priority value to set
 223:libs/CMSIS/Include/core_cmFunc.h ****  */
 224:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE void __set_BASEPRI(uint32_t basePri)
 225:libs/CMSIS/Include/core_cmFunc.h **** {
 226:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regBasePri         __ASM("basepri");
 227:libs/CMSIS/Include/core_cmFunc.h ****   __regBasePri = (basePri & 0xff);
 228:libs/CMSIS/Include/core_cmFunc.h **** }
 229:libs/CMSIS/Include/core_cmFunc.h ****  
 230:libs/CMSIS/Include/core_cmFunc.h **** 
 231:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get Fault Mask
 232:libs/CMSIS/Include/core_cmFunc.h **** 
 233:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the current value of the Fault Mask register.
 234:libs/CMSIS/Include/core_cmFunc.h **** 
 235:libs/CMSIS/Include/core_cmFunc.h ****     \return               Fault Mask register value
 236:libs/CMSIS/Include/core_cmFunc.h ****  */
 237:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE uint32_t __get_FAULTMASK(void)
 238:libs/CMSIS/Include/core_cmFunc.h **** {
 239:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 240:libs/CMSIS/Include/core_cmFunc.h ****   return(__regFaultMask);
 241:libs/CMSIS/Include/core_cmFunc.h **** }
 242:libs/CMSIS/Include/core_cmFunc.h **** 
 243:libs/CMSIS/Include/core_cmFunc.h **** 
 244:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Set Fault Mask
 245:libs/CMSIS/Include/core_cmFunc.h **** 
 246:libs/CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Fault Mask register.
 247:libs/CMSIS/Include/core_cmFunc.h **** 
 248:libs/CMSIS/Include/core_cmFunc.h ****     \param [in]    faultMask  Fault Mask value to set
 249:libs/CMSIS/Include/core_cmFunc.h ****  */
 250:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE void __set_FAULTMASK(uint32_t faultMask)
 251:libs/CMSIS/Include/core_cmFunc.h **** {
 252:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
 253:libs/CMSIS/Include/core_cmFunc.h ****   __regFaultMask = (faultMask & (uint32_t)1);
 254:libs/CMSIS/Include/core_cmFunc.h **** }
 255:libs/CMSIS/Include/core_cmFunc.h **** 
 256:libs/CMSIS/Include/core_cmFunc.h **** #endif /* (__CORTEX_M >= 0x03) */
 257:libs/CMSIS/Include/core_cmFunc.h **** 
 258:libs/CMSIS/Include/core_cmFunc.h **** 
 259:libs/CMSIS/Include/core_cmFunc.h **** #if       (__CORTEX_M == 0x04)
 260:libs/CMSIS/Include/core_cmFunc.h **** 
 261:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get FPSCR
 262:libs/CMSIS/Include/core_cmFunc.h **** 
 263:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the current value of the Floating Point Status/Control register.
 264:libs/CMSIS/Include/core_cmFunc.h **** 
 265:libs/CMSIS/Include/core_cmFunc.h ****     \return               Floating Point Status/Control register value
 266:libs/CMSIS/Include/core_cmFunc.h ****  */
 267:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE uint32_t __get_FPSCR(void)
 268:libs/CMSIS/Include/core_cmFunc.h **** {
 269:libs/CMSIS/Include/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 270:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 271:libs/CMSIS/Include/core_cmFunc.h ****   return(__regfpscr);
 272:libs/CMSIS/Include/core_cmFunc.h **** #else
 273:libs/CMSIS/Include/core_cmFunc.h ****    return(0);
 274:libs/CMSIS/Include/core_cmFunc.h **** #endif
 275:libs/CMSIS/Include/core_cmFunc.h **** }
 276:libs/CMSIS/Include/core_cmFunc.h **** 
 277:libs/CMSIS/Include/core_cmFunc.h **** 
 278:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Set FPSCR
 279:libs/CMSIS/Include/core_cmFunc.h **** 
 280:libs/CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Floating Point Status/Control register.
 281:libs/CMSIS/Include/core_cmFunc.h **** 
 282:libs/CMSIS/Include/core_cmFunc.h ****     \param [in]    fpscr  Floating Point Status/Control value to set
 283:libs/CMSIS/Include/core_cmFunc.h ****  */
 284:libs/CMSIS/Include/core_cmFunc.h **** static __INLINE void __set_FPSCR(uint32_t fpscr)
 285:libs/CMSIS/Include/core_cmFunc.h **** {
 286:libs/CMSIS/Include/core_cmFunc.h **** #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
 287:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t __regfpscr         __ASM("fpscr");
 288:libs/CMSIS/Include/core_cmFunc.h ****   __regfpscr = (fpscr);
 289:libs/CMSIS/Include/core_cmFunc.h **** #endif
 290:libs/CMSIS/Include/core_cmFunc.h **** }
 291:libs/CMSIS/Include/core_cmFunc.h **** 
 292:libs/CMSIS/Include/core_cmFunc.h **** #endif /* (__CORTEX_M == 0x04) */
 293:libs/CMSIS/Include/core_cmFunc.h **** 
 294:libs/CMSIS/Include/core_cmFunc.h **** 
 295:libs/CMSIS/Include/core_cmFunc.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 296:libs/CMSIS/Include/core_cmFunc.h **** /* IAR iccarm specific functions */
 297:libs/CMSIS/Include/core_cmFunc.h **** 
 298:libs/CMSIS/Include/core_cmFunc.h **** #include <cmsis_iar.h>
 299:libs/CMSIS/Include/core_cmFunc.h **** 
 300:libs/CMSIS/Include/core_cmFunc.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 301:libs/CMSIS/Include/core_cmFunc.h **** /* GNU gcc specific functions */
 302:libs/CMSIS/Include/core_cmFunc.h **** 
 303:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Enable IRQ Interrupts
 304:libs/CMSIS/Include/core_cmFunc.h **** 
 305:libs/CMSIS/Include/core_cmFunc.h ****   This function enables IRQ interrupts by clearing the I-bit in the CPSR.
 306:libs/CMSIS/Include/core_cmFunc.h ****   Can only be executed in Privileged modes.
 307:libs/CMSIS/Include/core_cmFunc.h ****  */
 308:libs/CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
 309:libs/CMSIS/Include/core_cmFunc.h **** {
 310:libs/CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("cpsie i");
 311:libs/CMSIS/Include/core_cmFunc.h **** }
 312:libs/CMSIS/Include/core_cmFunc.h **** 
 313:libs/CMSIS/Include/core_cmFunc.h **** 
 314:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Disable IRQ Interrupts
 315:libs/CMSIS/Include/core_cmFunc.h **** 
 316:libs/CMSIS/Include/core_cmFunc.h ****   This function disables IRQ interrupts by setting the I-bit in the CPSR.
 317:libs/CMSIS/Include/core_cmFunc.h ****   Can only be executed in Privileged modes.
 318:libs/CMSIS/Include/core_cmFunc.h ****  */
 319:libs/CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
 320:libs/CMSIS/Include/core_cmFunc.h **** {
 321:libs/CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("cpsid i");
 322:libs/CMSIS/Include/core_cmFunc.h **** }
 323:libs/CMSIS/Include/core_cmFunc.h **** 
 324:libs/CMSIS/Include/core_cmFunc.h **** 
 325:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get Control Register
 326:libs/CMSIS/Include/core_cmFunc.h **** 
 327:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the content of the Control Register.
 328:libs/CMSIS/Include/core_cmFunc.h **** 
 329:libs/CMSIS/Include/core_cmFunc.h ****     \return               Control Register value
 330:libs/CMSIS/Include/core_cmFunc.h ****  */
 331:libs/CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __get_CONTROL(void)
 332:libs/CMSIS/Include/core_cmFunc.h **** {
 333:libs/CMSIS/Include/core_cmFunc.h ****   uint32_t result;
 334:libs/CMSIS/Include/core_cmFunc.h **** 
 335:libs/CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 336:libs/CMSIS/Include/core_cmFunc.h ****   return(result);
 337:libs/CMSIS/Include/core_cmFunc.h **** }
 338:libs/CMSIS/Include/core_cmFunc.h **** 
 339:libs/CMSIS/Include/core_cmFunc.h **** 
 340:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Set Control Register
 341:libs/CMSIS/Include/core_cmFunc.h **** 
 342:libs/CMSIS/Include/core_cmFunc.h ****     This function writes the given value to the Control Register.
 343:libs/CMSIS/Include/core_cmFunc.h **** 
 344:libs/CMSIS/Include/core_cmFunc.h ****     \param [in]    control  Control Register value to set
 345:libs/CMSIS/Include/core_cmFunc.h ****  */
 346:libs/CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE void __set_CONTROL(uint32_t control)
 347:libs/CMSIS/Include/core_cmFunc.h **** {
 348:libs/CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) );
 349:libs/CMSIS/Include/core_cmFunc.h **** }
 350:libs/CMSIS/Include/core_cmFunc.h **** 
 351:libs/CMSIS/Include/core_cmFunc.h **** 
 352:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get ISPR Register
 353:libs/CMSIS/Include/core_cmFunc.h **** 
 354:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the content of the ISPR Register.
 355:libs/CMSIS/Include/core_cmFunc.h **** 
 356:libs/CMSIS/Include/core_cmFunc.h ****     \return               ISPR Register value
 357:libs/CMSIS/Include/core_cmFunc.h ****  */
 358:libs/CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __get_IPSR(void)
 359:libs/CMSIS/Include/core_cmFunc.h **** {
 360:libs/CMSIS/Include/core_cmFunc.h ****   uint32_t result;
 361:libs/CMSIS/Include/core_cmFunc.h **** 
 362:libs/CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 363:libs/CMSIS/Include/core_cmFunc.h ****   return(result);
 364:libs/CMSIS/Include/core_cmFunc.h **** }
 365:libs/CMSIS/Include/core_cmFunc.h **** 
 366:libs/CMSIS/Include/core_cmFunc.h **** 
 367:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get APSR Register
 368:libs/CMSIS/Include/core_cmFunc.h **** 
 369:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the content of the APSR Register.
 370:libs/CMSIS/Include/core_cmFunc.h **** 
 371:libs/CMSIS/Include/core_cmFunc.h ****     \return               APSR Register value
 372:libs/CMSIS/Include/core_cmFunc.h ****  */
 373:libs/CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __get_APSR(void)
 374:libs/CMSIS/Include/core_cmFunc.h **** {
 375:libs/CMSIS/Include/core_cmFunc.h ****   uint32_t result;
 376:libs/CMSIS/Include/core_cmFunc.h **** 
 377:libs/CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 378:libs/CMSIS/Include/core_cmFunc.h ****   return(result);
 379:libs/CMSIS/Include/core_cmFunc.h **** }
 380:libs/CMSIS/Include/core_cmFunc.h **** 
 381:libs/CMSIS/Include/core_cmFunc.h **** 
 382:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get xPSR Register
 383:libs/CMSIS/Include/core_cmFunc.h **** 
 384:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the content of the xPSR Register.
 385:libs/CMSIS/Include/core_cmFunc.h **** 
 386:libs/CMSIS/Include/core_cmFunc.h ****     \return               xPSR Register value
 387:libs/CMSIS/Include/core_cmFunc.h ****  */
 388:libs/CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __get_xPSR(void)
 389:libs/CMSIS/Include/core_cmFunc.h **** {
 390:libs/CMSIS/Include/core_cmFunc.h ****   uint32_t result;
 391:libs/CMSIS/Include/core_cmFunc.h **** 
 392:libs/CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 393:libs/CMSIS/Include/core_cmFunc.h ****   return(result);
 394:libs/CMSIS/Include/core_cmFunc.h **** }
 395:libs/CMSIS/Include/core_cmFunc.h **** 
 396:libs/CMSIS/Include/core_cmFunc.h **** 
 397:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get Process Stack Pointer
 398:libs/CMSIS/Include/core_cmFunc.h **** 
 399:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the current value of the Process Stack Pointer (PSP).
 400:libs/CMSIS/Include/core_cmFunc.h **** 
 401:libs/CMSIS/Include/core_cmFunc.h ****     \return               PSP Register value
 402:libs/CMSIS/Include/core_cmFunc.h ****  */
 403:libs/CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __get_PSP(void)
 404:libs/CMSIS/Include/core_cmFunc.h **** {
 405:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t result;
 406:libs/CMSIS/Include/core_cmFunc.h **** 
 407:libs/CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
 408:libs/CMSIS/Include/core_cmFunc.h ****   return(result);
 409:libs/CMSIS/Include/core_cmFunc.h **** }
 410:libs/CMSIS/Include/core_cmFunc.h ****  
 411:libs/CMSIS/Include/core_cmFunc.h **** 
 412:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Set Process Stack Pointer
 413:libs/CMSIS/Include/core_cmFunc.h **** 
 414:libs/CMSIS/Include/core_cmFunc.h ****     This function assigns the given value to the Process Stack Pointer (PSP).
 415:libs/CMSIS/Include/core_cmFunc.h **** 
 416:libs/CMSIS/Include/core_cmFunc.h ****     \param [in]    topOfProcStack  Process Stack Pointer value to set
 417:libs/CMSIS/Include/core_cmFunc.h ****  */
 418:libs/CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE void __set_PSP(uint32_t topOfProcStack)
 419:libs/CMSIS/Include/core_cmFunc.h **** {
 420:libs/CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) );
 421:libs/CMSIS/Include/core_cmFunc.h **** }
 422:libs/CMSIS/Include/core_cmFunc.h **** 
 423:libs/CMSIS/Include/core_cmFunc.h **** 
 424:libs/CMSIS/Include/core_cmFunc.h **** /** \brief  Get Main Stack Pointer
 425:libs/CMSIS/Include/core_cmFunc.h **** 
 426:libs/CMSIS/Include/core_cmFunc.h ****     This function returns the current value of the Main Stack Pointer (MSP).
 427:libs/CMSIS/Include/core_cmFunc.h **** 
 428:libs/CMSIS/Include/core_cmFunc.h ****     \return               MSP Register value
 429:libs/CMSIS/Include/core_cmFunc.h ****  */
 430:libs/CMSIS/Include/core_cmFunc.h **** __attribute__( ( always_inline ) ) static __INLINE uint32_t __get_MSP(void)
 431:libs/CMSIS/Include/core_cmFunc.h **** {
 432:libs/CMSIS/Include/core_cmFunc.h ****   register uint32_t result;
 433:libs/CMSIS/Include/core_cmFunc.h **** 
 434:libs/CMSIS/Include/core_cmFunc.h ****   __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
 268              		.loc 2 434 0
 269              	@ 434 "libs/CMSIS/Include/core_cmFunc.h" 1
 270 000a EFF30882 		MRS r2, msp
 271              	
 272              	@ 0 "" 2
 273              		.thumb
 274              	.LBE6:
 275              	.LBE5:
 276              		.loc 1 88 0
 277 000e 0A4D     		ldr	r5, .L31+4
 278 0010 2D68     		ldr	r5, [r5]
 279 0012 521B     		subs	r2, r2, r5
 280 0014 9142     		cmp	r1, r2
 281 0016 03D8     		bhi	.L30
 282              	.LVL26:
  89:sys/syscalls.c ****         r->_errno = ENOMEM;
  90:sys/syscalls.c ****         return (void*)-1;
  91:sys/syscalls.c ****     }
  92:sys/syscalls.c **** 
  93:sys/syscalls.c ****     void *ret = __brkval;
  94:sys/syscalls.c ****     __brkval += incr;
 283              		.loc 1 94 0
 284 0018 2160     		str	r1, [r4]
  95:sys/syscalls.c **** 
  96:sys/syscalls.c ****     return ret;
 285              		.loc 1 96 0
 286 001a 1846     		mov	r0, r3
 287              	.LVL27:
  97:sys/syscalls.c **** }
 288              		.loc 1 97 0
 289 001c 30BC     		pop	{r4, r5}
 290              	.LCFI3:
 291              		.cfi_remember_state
 292              		.cfi_restore 5
 293              		.cfi_restore 4
 294              		.cfi_def_cfa_offset 0
 295 001e 7047     		bx	lr
 296              	.LVL28:
 297              	.L30:
 298              	.LCFI4:
 299              		.cfi_restore_state
  89:sys/syscalls.c ****         r->_errno = ENOMEM;
 300              		.loc 1 89 0
 301 0020 0C23     		movs	r3, #12
 302 0022 0360     		str	r3, [r0]
 303              		.loc 1 97 0
 304 0024 30BC     		pop	{r4, r5}
 305              	.LCFI5:
 306              		.cfi_remember_state
 307              		.cfi_restore 4
 308              		.cfi_restore 5
 309              		.cfi_def_cfa_offset 0
  90:sys/syscalls.c ****     }
 310              		.loc 1 90 0
 311 0026 4FF0FF30 		mov	r0, #-1
 312              	.LVL29:
 313              		.loc 1 97 0
 314 002a 7047     		bx	lr
 315              	.LVL30:
 316              	.L29:
 317              	.LCFI6:
 318              		.cfi_restore_state
  86:sys/syscalls.c **** 
 319              		.loc 1 86 0
 320 002c 034B     		ldr	r3, .L31+8
 321 002e 2360     		str	r3, [r4]
 322 0030 EAE7     		b	.L25
 323              	.L32:
 324 0032 00BF     		.align	2
 325              	.L31:
 326 0034 00000000 		.word	__brkval
 327 0038 00000000 		.word	.LANCHOR0
 328 003c 00000000 		.word	end
 329              		.cfi_endproc
 330              	.LFE117:
 332              		.section	.text._kill_r,"ax",%progbits
 333              		.align	2
 334              		.global	_kill_r
 335              		.thumb
 336              		.thumb_func
 338              	_kill_r:
 339              	.LFB118:
  98:sys/syscalls.c **** 
  99:sys/syscalls.c **** 
 100:sys/syscalls.c **** int _kill_r(struct _reent *r, int pid, int signal)
 101:sys/syscalls.c **** {
 340              		.loc 1 101 0
 341              		.cfi_startproc
 342              		@ args = 0, pretend = 0, frame = 0
 343              		@ frame_needed = 0, uses_anonymous_args = 0
 344              		@ link register save eliminated.
 345              	.LVL31:
 102:sys/syscalls.c ****     r->_errno = ENOSYS;
 346              		.loc 1 102 0
 347 0000 5823     		movs	r3, #88
 348 0002 0360     		str	r3, [r0]
 103:sys/syscalls.c ****     return -1;
 104:sys/syscalls.c **** }
 349              		.loc 1 104 0
 350 0004 4FF0FF30 		mov	r0, #-1
 351              	.LVL32:
 352 0008 7047     		bx	lr
 353              		.cfi_endproc
 354              	.LFE118:
 356              		.section	.text._getpid_r,"ax",%progbits
 357              		.align	2
 358              		.global	_getpid_r
 359              		.thumb
 360              		.thumb_func
 362              	_getpid_r:
 363              	.LFB119:
 105:sys/syscalls.c **** 
 106:sys/syscalls.c **** 
 107:sys/syscalls.c **** int _getpid_r(struct _reent *r)
 108:sys/syscalls.c **** {
 364              		.loc 1 108 0
 365              		.cfi_startproc
 366              		@ args = 0, pretend = 0, frame = 0
 367              		@ frame_needed = 0, uses_anonymous_args = 0
 368              		@ link register save eliminated.
 369              	.LVL33:
 109:sys/syscalls.c ****     r->_errno = ENOSYS;
 370              		.loc 1 109 0
 371 0000 5823     		movs	r3, #88
 372 0002 0360     		str	r3, [r0]
 110:sys/syscalls.c ****     return -1;
 111:sys/syscalls.c **** }
 373              		.loc 1 111 0
 374 0004 4FF0FF30 		mov	r0, #-1
 375              	.LVL34:
 376 0008 7047     		bx	lr
 377              		.cfi_endproc
 378              	.LFE119:
 380              		.section	.text.__malloc_lock,"ax",%progbits
 381              		.align	2
 382              		.global	__malloc_lock
 383              		.thumb
 384              		.thumb_func
 386              	__malloc_lock:
 387              	.LFB120:
 112:sys/syscalls.c **** 
 113:sys/syscalls.c **** 
 114:sys/syscalls.c **** void __malloc_lock(struct _reent *r)
 115:sys/syscalls.c **** {
 388              		.loc 1 115 0
 389              		.cfi_startproc
 390              		@ args = 0, pretend = 0, frame = 0
 391              		@ frame_needed = 0, uses_anonymous_args = 0
 392              		@ link register save eliminated.
 393              	.LVL35:
 116:sys/syscalls.c ****     vPortEnterCritical();
 394              		.loc 1 116 0
 395 0000 FFF7FEBF 		b	vPortEnterCritical
 396              	.LVL36:
 397              		.cfi_endproc
 398              	.LFE120:
 400              		.section	.text.__malloc_unlock,"ax",%progbits
 401              		.align	2
 402              		.global	__malloc_unlock
 403              		.thumb
 404              		.thumb_func
 406              	__malloc_unlock:
 407              	.LFB121:
 117:sys/syscalls.c **** }
 118:sys/syscalls.c **** 
 119:sys/syscalls.c **** 
 120:sys/syscalls.c **** void __malloc_unlock(struct _reent *r)
 121:sys/syscalls.c **** {
 408              		.loc 1 121 0
 409              		.cfi_startproc
 410              		@ args = 0, pretend = 0, frame = 0
 411              		@ frame_needed = 0, uses_anonymous_args = 0
 412              		@ link register save eliminated.
 413              	.LVL37:
 122:sys/syscalls.c ****     vPortExitCritical();
 414              		.loc 1 122 0
 415 0000 FFF7FEBF 		b	vPortExitCritical
 416              	.LVL38:
 417              		.cfi_endproc
 418              	.LFE121:
 420              		.comm	__brkval,4,4
 421              		.global	__malloc_margin
 422              		.section	.data.__malloc_margin,"aw",%progbits
 423              		.align	2
 424              		.set	.LANCHOR0,. + 0
 427              	__malloc_margin:
 428 0000 00010000 		.word	256
 429              		.text
 430              	.Letext0:
 431              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\4.9 2014q4\\lib\\gcc\\arm-none-eabi\\4.9
 432              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\4.9 2014q4\\arm-none-eabi\\include\\mach
 433              		.file 5 "c:\\program files (x86)\\gnu tools arm embedded\\4.9 2014q4\\arm-none-eabi\\include\\sys\
 434              		.file 6 "c:\\program files (x86)\\gnu tools arm embedded\\4.9 2014q4\\arm-none-eabi\\include\\sys\
 435              		.file 7 "c:\\program files (x86)\\gnu tools arm embedded\\4.9 2014q4\\arm-none-eabi\\include\\sys\
 436              		.file 8 "c:\\program files (x86)\\gnu tools arm embedded\\4.9 2014q4\\arm-none-eabi\\include\\stdi
 437              		.file 9 "c:\\program files (x86)\\gnu tools arm embedded\\4.9 2014q4\\arm-none-eabi\\include\\sys\
 438              		.file 10 "c:\\program files (x86)\\gnu tools arm embedded\\4.9 2014q4\\arm-none-eabi\\include\\sys
 439              		.file 11 "c:\\program files (x86)\\gnu tools arm embedded\\4.9 2014q4\\arm-none-eabi\\include\\ree
 440              		.file 12 "c:\\program files (x86)\\gnu tools arm embedded\\4.9 2014q4\\arm-none-eabi\\include\\sys
 441              		.file 13 "libs/CMSIS/Include/core_cm4.h"
 442              		.file 14 "FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
 443              		.file 15 "drivers/dbgu.h"
DEFINED SYMBOLS
                            *ABS*:00000000 syscalls.c
C:\Users\Student\AppData\Local\Temp\ccO3Cjae.s:20     .text._exit:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccO3Cjae.s:25     .text._exit:00000000 _exit
C:\Users\Student\AppData\Local\Temp\ccO3Cjae.s:42     .text._read_r:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccO3Cjae.s:47     .text._read_r:00000000 _read_r
C:\Users\Student\AppData\Local\Temp\ccO3Cjae.s:88     .text._write_r:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccO3Cjae.s:93     .text._write_r:00000000 _write_r
C:\Users\Student\AppData\Local\Temp\ccO3Cjae.s:132    .text._lseek_r:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccO3Cjae.s:137    .text._lseek_r:00000000 _lseek_r
C:\Users\Student\AppData\Local\Temp\ccO3Cjae.s:157    .text._close_r:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccO3Cjae.s:162    .text._close_r:00000000 _close_r
C:\Users\Student\AppData\Local\Temp\ccO3Cjae.s:181    .text._fstat_r:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccO3Cjae.s:186    .text._fstat_r:00000000 _fstat_r
C:\Users\Student\AppData\Local\Temp\ccO3Cjae.s:218    .text._isatty_r:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccO3Cjae.s:223    .text._isatty_r:00000000 _isatty_r
C:\Users\Student\AppData\Local\Temp\ccO3Cjae.s:239    .text._sbrk_r:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccO3Cjae.s:244    .text._sbrk_r:00000000 _sbrk_r
C:\Users\Student\AppData\Local\Temp\ccO3Cjae.s:326    .text._sbrk_r:00000034 $d
                            *COM*:00000004 __brkval
C:\Users\Student\AppData\Local\Temp\ccO3Cjae.s:333    .text._kill_r:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccO3Cjae.s:338    .text._kill_r:00000000 _kill_r
C:\Users\Student\AppData\Local\Temp\ccO3Cjae.s:357    .text._getpid_r:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccO3Cjae.s:362    .text._getpid_r:00000000 _getpid_r
C:\Users\Student\AppData\Local\Temp\ccO3Cjae.s:381    .text.__malloc_lock:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccO3Cjae.s:386    .text.__malloc_lock:00000000 __malloc_lock
C:\Users\Student\AppData\Local\Temp\ccO3Cjae.s:401    .text.__malloc_unlock:00000000 $t
C:\Users\Student\AppData\Local\Temp\ccO3Cjae.s:406    .text.__malloc_unlock:00000000 __malloc_unlock
C:\Users\Student\AppData\Local\Temp\ccO3Cjae.s:427    .data.__malloc_margin:00000000 __malloc_margin
C:\Users\Student\AppData\Local\Temp\ccO3Cjae.s:423    .data.__malloc_margin:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
debug_waitkey
debug_chr
end
vPortEnterCritical
vPortExitCritical
